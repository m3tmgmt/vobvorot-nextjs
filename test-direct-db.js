const { Client } = require('pg');

async function testDirectConnection() {
  const client = new Client({
    connectionString: 'postgresql://vobvorot_owner:WUJUYkjHT68V@ep-lively-hat-a1aqblz3.ap-southeast-1.aws.neon.tech/vobvorot?sslmode=require'
  });

  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon PostgreSQL...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    tablesResult.rows.forEach(row => {
      console.log(`- ${row.table_name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    const productsResult = await client.query(`
      SELECT p.id, p.name, p.slug, p.description, c.name as category_name
      FROM products p
      LEFT JOIN categories c ON p."categoryId" = c.id
      ORDER BY p."createdAt" DESC
      LIMIT 10
    `);
    
    console.log(`\nüì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${productsResult.rows.length}`);
    productsResult.rows.forEach(product => {
      console.log(`- ${product.name} (${product.slug})`);
      console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category_name || '–ù–µ—Ç'}`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${product.description || '–ù–µ—Ç'}`);
    });
    
    // –ò—â–µ–º —Ç–æ–≤–∞—Ä Lv
    const lvResult = await client.query(`
      SELECT p.*, c.name as category_name
      FROM products p
      LEFT JOIN categories c ON p."categoryId" = c.id
      WHERE p.name = 'Lv'
    `);
    
    if (lvResult.rows.length > 0) {
      console.log('\n‚úÖ –¢–æ–≤–∞—Ä "Lv" –Ω–∞–π–¥–µ–Ω!');
      console.log('–î–µ—Ç–∞–ª–∏:', lvResult.rows[0]);
    } else {
      console.log('\n‚ùå –¢–æ–≤–∞—Ä "Lv" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await client.end();
  }
}

testDirectConnection();