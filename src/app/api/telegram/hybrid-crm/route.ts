import { NextRequest, NextResponse } from 'next/server'
import { Bot, Context, InlineKeyboard } from 'grammy'
import { PrismaClient } from '@prisma/client'

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
type MyContext = Context

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7700098378:AAGZ1zZOxiwXbJeknO9SvyN25KvfWQkQNrI'
const ADMIN_IDS = (process.env.TELEGRAM_OWNER_CHAT_ID || '316593422,1837334996').split(',')
const ADMIN_API_KEY = process.env.ADMIN_API_KEY || 'development-key'
const API_URL = process.env.NEXTAUTH_URL || 'https://vobvorot.com'

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Prisma (–¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ serverless)
let prisma: PrismaClient

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
function getPrismaClient() {
  if (!prisma) {
    prisma = new PrismaClient()
  }
  return prisma
}

function isAdmin(userId: string): boolean {
  return ADMIN_IDS.includes(userId)
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return new InlineKeyboard()
    .text('üì¶ –ó–∞–∫–∞–∑—ã', 'menu:orders')
    .text('üõçÔ∏è –¢–æ–≤–∞—Ä—ã', 'menu:products')
    .row()
    .text('üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'menu:categories')
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'menu:stats')
    .row()
    .text('üé¨ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π', 'menu:home_videos')
    .text('‚úçÔ∏è –í–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–∏', 'menu:sign_videos')
    .row()
    .text('üí¨ –û—Ç–∑—ã–≤—ã', 'menu:reviews')
    .text('üë• –ö–ª–∏–µ–Ω—Ç—ã', 'menu:customers')
    .row()
    .text('üìß Email —Ä–∞—Å—Å—ã–ª–∫–∏', 'menu:emails')
    .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'menu:settings')
}

// –ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
function getOrdersMenu() {
  return new InlineKeyboard()
    .text('üìã –í—Å–µ –∑–∞–∫–∞–∑—ã', 'orders:all')
    .text('üÜï –ù–æ–≤—ã–µ', 'orders:new')
    .row()
    .text('‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', 'orders:processing')
    .text('üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ', 'orders:shipped')
    .row()
    .text('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', 'orders:completed')
    .text('‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ', 'orders:cancelled')
    .row()
    .text('üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞', 'orders:search')
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'orders:stats')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
function getProductsMenu() {
  return new InlineKeyboard()
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'products:add')
    .text('üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', 'products:list')
    .row()
    .text('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'products:edit')
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'products:delete')
    .row()
    .text('üì∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ', 'products:photos')
    .text('üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ', 'products:videos')
    .row()
    .text('üì¶ –°–∫–ª–∞–¥', 'products:stock')
    .text('üí∞ –¶–µ–Ω—ã', 'products:prices')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function getCategoriesMenu() {
  return new InlineKeyboard()
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'categories:add')
    .text('üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', 'categories:list')
    .row()
    .text('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'categories:edit')
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'categories:delete')
    .row()
    .text('üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫', 'categories:reorder')
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'categories:stats')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –ú–µ–Ω—é –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function getHomeVideosMenu() {
  return new InlineKeyboard()
    .text('üìã –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ', 'home_videos:list')
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ', 'home_videos:add')
    .row()
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ', 'home_videos:delete')
    .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'home_videos:refresh')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –ú–µ–Ω—é –≤–∏–¥–µ–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–∏
function getSignVideosMenu() {
  return new InlineKeyboard()
    .text('üìã –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ', 'sign_videos:list')
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ', 'sign_videos:add')
    .row()
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ', 'sign_videos:delete')
    .text('üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫', 'sign_videos:reorder')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
async function createBot() {
  const bot = new Bot<MyContext>(BOT_TOKEN)
  await bot.init()  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
  const prisma = getPrismaClient()

  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.command('start', async (ctx) => {
    console.log('üéØ /start command from:', ctx.from?.id)
    
    if (!isAdmin(ctx.from?.id.toString() || '')) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
      return
    }

    await ctx.reply(
      'üöÄ *VobVorot Store Management*\\n\\n' +
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º!\\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:',
      { 
        parse_mode: 'Markdown',
        reply_markup: getMainMenu()
      }
    )
  })

  // –ö–æ–º–∞–Ω–¥–∞ /menu
  bot.command('menu', async (ctx) => {
    if (!isAdmin(ctx.from?.id.toString() || '')) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
      return
    }

    await ctx.reply(
      'üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
      { 
        parse_mode: 'Markdown',
        reply_markup: getMainMenu()
      }
    )
  })

  // –ö–æ–º–∞–Ω–¥–∞ /help
  bot.command('help', async (ctx) => {
    if (!isAdmin(ctx.from?.id.toString() || '')) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
      return
    }

    await ctx.reply(
      'üìñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\\n\\n' +
      '*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\\n' +
      '/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\\n' +
      '/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\\n' +
      '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\\n\\n' +
      '*–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\\n' +
      '/orders - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\\n' +
      '/products - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\\n' +
      '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\n\\n' +
      '*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ:*\\n' +
      '/home\\_videos - –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π\\n' +
      '/sign\\_videos - –í–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–∏\\n\\n' +
      '*–ü–æ–∏—Å–∫:*\\n' +
      '/order <–Ω–æ–º–µ—Ä> - –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑\\n' +
      '/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫',
      { parse_mode: 'Markdown' }
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  bot.callbackQuery('menu:main', async (ctx) => {
    await ctx.editMessageText(
      'üöÄ *VobVorot Store Management*\\n\\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:',
      { 
        parse_mode: 'Markdown',
        reply_markup: getMainMenu()
      }
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
  bot.callbackQuery('menu:orders', async (ctx) => {
    await ctx.editMessageText(
      'üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏*\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { 
        parse_mode: 'Markdown',
        reply_markup: getOrdersMenu()
      }
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
  bot.callbackQuery('menu:products', async (ctx) => {
    await ctx.editMessageText(
      'üõçÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { 
        parse_mode: 'Markdown',
        reply_markup: getProductsMenu()
      }
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  bot.callbackQuery('menu:categories', async (ctx) => {
    await ctx.editMessageText(
      'üè∑Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏*\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { 
        parse_mode: 'Markdown',
        reply_markup: getCategoriesMenu()
      }
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π
  bot.callbackQuery('menu:home_videos', async (ctx) => {
    await ctx.editMessageText(
      'üé¨ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã*\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { 
        parse_mode: 'Markdown',
        reply_markup: getHomeVideosMenu()
      }
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –≤–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–∏
  bot.callbackQuery('menu:sign_videos', async (ctx) => {
    await ctx.editMessageText(
      '‚úçÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–∏*\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { 
        parse_mode: 'Markdown',
        reply_markup: getSignVideosMenu()
      }
    )
  })

  // –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  bot.callbackQuery('home_videos:list', async (ctx) => {
    await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...' })
    
    try {
      const response = await fetch(`${API_URL}/api/admin/site/home-videos`, {
        headers: {
          'Authorization': `Bearer ${ADMIN_API_KEY}`
        }
      })
      const data = await response.json()
      
      if (data.videos && data.videos.length > 0) {
        let message = `üé¨ *–í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (${data.count} —à—Ç.)*\\n\\n`
        
        data.videos.forEach((video: any, index: number) => {
          message += `${index + 1}. ID: \`${video.id}\`\\n`
          message += `   üîó URL: ${video.url}\\n`
          message += `   üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${new Date(video.createdAt).toLocaleDateString('ru-RU')}\\n\\n`
        })
        
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          reply_markup: getHomeVideosMenu()
        })
      } else {
        await ctx.editMessageText(
          'üé¨ *–í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã*\\n\\n‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          { 
            parse_mode: 'Markdown',
            reply_markup: getHomeVideosMenu()
          }
        )
      }
    } catch (error) {
      console.error('‚ùå Error loading home videos:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ',
        { reply_markup: getHomeVideosMenu() }
      )
    }
  })

  // –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–∏
  bot.callbackQuery('sign_videos:list', async (ctx) => {
    await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...' })
    
    try {
      const response = await fetch(`${API_URL}/api/admin/site/sign-videos`, {
        headers: {
          'Authorization': `Bearer ${ADMIN_API_KEY}`
        }
      })
      const data = await response.json()
      
      if (data.videos && data.videos.length > 0) {
        let message = `‚úçÔ∏è *–í–∏–¥–µ–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–∏ (${data.count} —à—Ç.)*\\n\\n`
        
        data.videos.forEach((video: any, index: number) => {
          message += `${index + 1}. ID: \`${video.id}\`\\n`
          if (video.title) {
            message += `   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${video.title}\\n`
          }
          message += `   üîó URL: ${video.url}\\n`
          message += `   üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${new Date(video.createdAt).toLocaleDateString('ru-RU')}\\n\\n`
        })
        
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          reply_markup: getSignVideosMenu()
        })
      } else {
        await ctx.editMessageText(
          '‚úçÔ∏è *–í–∏–¥–µ–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–∏*\\n\\n‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          { 
            parse_mode: 'Markdown',
            reply_markup: getSignVideosMenu()
          }
        )
      }
    } catch (error) {
      console.error('‚ùå Error loading sign videos:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ',
        { reply_markup: getSignVideosMenu() }
      )
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  bot.callbackQuery('menu:stats', async (ctx) => {
    await ctx.answerCallbackQuery({ text: 'üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...' })
    
    try {
      const [orderCount, productCount, customerCount, totalRevenue] = await Promise.all([
        prisma.order.count(),
        prisma.product.count(), 
        prisma.customer.count(),
        prisma.order.aggregate({
          _sum: { total: true },
          where: { status: 'completed' }
        })
      ])

      const todayOrders = await prisma.order.count({
        where: {
          createdAt: {
            gte: new Date(new Date().setHours(0, 0, 0, 0))
          }
        }
      })

      let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*\\n\\n'
      message += `üì¶ *–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:* ${orderCount}\\n`
      message += `üìÖ *–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è:* ${todayOrders}\\n`
      message += `üõç *–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:* ${productCount}\\n`
      message += `üë• *–ö–ª–∏–µ–Ω—Ç–æ–≤:* ${customerCount}\\n`
      message += `üí∞ *–û–±—â–∏–π –¥–æ—Ö–æ–¥:* ${totalRevenue._sum.total || 0} –≥—Ä–Ω\\n`

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
      })
    } catch (error) {
      console.error('‚ùå Error fetching stats:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main') }
      )
    }
  })

  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
  bot.callbackQuery('orders:all', async (ctx) => {
    await ctx.answerCallbackQuery({ text: 'üì¶ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–∫–∞–∑—ã...' })
    
    try {
      const orders = await prisma.order.findMany({
        include: {
          customer: true,
          orderItems: {
            include: { product: true }
          }
        },
        orderBy: { createdAt: 'desc' },
        take: 10
      })

      if (orders.length === 0) {
        await ctx.editMessageText(
          'üì¶ *–ó–∞–∫–∞–∑—ã*\\n\\n–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç',
          {
            parse_mode: 'Markdown',
            reply_markup: getOrdersMenu()
          }
        )
        return
      }

      let message = 'üì¶ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:*\\n\\n'
      const keyboard = new InlineKeyboard()

      for (const order of orders) {
        const status = order.status === 'pending' ? '‚è≥' : 
                      order.status === 'processing' ? 'üîÑ' :
                      order.status === 'completed' ? '‚úÖ' : '‚ùå'
        
        message += `${status} *#${order.id}* - ${order.customer?.name || '–ê–Ω–æ–Ω–∏–º'}\\n`
        message += `üí∞ ${order.total} –≥—Ä–Ω | üìÖ ${new Date(order.createdAt).toLocaleDateString('ru')}\\n\\n`
        
        keyboard.text(`–ó–∞–∫–∞–∑ #${order.id}`, `order:view:${order.id}`).row()
      }

      keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'menu:orders')

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    } catch (error) {
      console.error('‚ùå Error fetching orders:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤',
        { reply_markup: getOrdersMenu() }
      )
    }
  })

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  bot.callbackQuery(/^order:view:(\d+)$/, async (ctx) => {
    const orderId = parseInt(ctx.match![1])
    await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–∫–∞–∑...' })
    
    try {
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          customer: true,
          orderItems: {
            include: { product: true }
          }
        }
      })

      if (!order) {
        await ctx.answerCallbackQuery('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }

      let message = `üì¶ *–ó–∞–∫–∞–∑ #${order.id}*\\n\\n`
      message += `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${order.customer?.name || '–ê–Ω–æ–Ω–∏–º'}\\n`
      message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.customer?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\\n`
      message += `üìç *–ê–¥—Ä–µ—Å:* ${order.shippingAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}\\n`
      message += `üí≥ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* ${order.paymentMethod}\\n`
      message += `üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* ${order.shippingMethod}\\n`
      message += `üìÖ *–î–∞—Ç–∞:* ${new Date(order.createdAt).toLocaleString('ru')}\\n`
      message += `üí∞ *–°—É–º–º–∞:* ${order.total} –≥—Ä–Ω\\n`
      message += `üìä *–°—Ç–∞—Ç—É—Å:* ${
        order.status === 'pending' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç' :
        order.status === 'processing' ? 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ' :
        order.status === 'completed' ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω' : '‚ùå –û—Ç–º–µ–Ω—ë–Ω'
      }\\n\\n`

      message += '*–¢–æ–≤–∞—Ä—ã:*\\n'
      for (const item of order.orderItems) {
        message += `‚Ä¢ ${item.product?.name || '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω'} x${item.quantity} = ${item.price * item.quantity} –≥—Ä–Ω\\n`
      }

      const keyboard = new InlineKeyboard()
      if (order.status === 'pending') {
        keyboard.text('üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫—É', `order:process:${order.id}`).row()
      }
      if (order.status === 'processing') {
        keyboard.text('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', `order:complete:${order.id}`).row()
      }
      if (order.status !== 'cancelled' && order.status !== 'completed') {
        keyboard.text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `order:cancel:${order.id}`).row()
      }
      keyboard.text('‚óÄÔ∏è –ö –∑–∞–∫–∞–∑–∞–º', 'orders:all')

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    } catch (error) {
      console.error('‚ùå Error viewing order:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞',
        { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ö –∑–∞–∫–∞–∑–∞–º', 'orders:all') }
      )
    }
  })

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  bot.callbackQuery(/^order:(process|complete|cancel):(\d+)$/, async (ctx) => {
    const action = ctx.match![1]
    const orderId = parseInt(ctx.match![2])
    
    try {
      const newStatus = action === 'process' ? 'processing' :
                       action === 'complete' ? 'completed' : 'cancelled'

      await prisma.order.update({
        where: { id: orderId },
        data: { 
          status: newStatus,
          updatedAt: new Date()
        }
      })

      await ctx.answerCallbackQuery(
        action === 'process' ? 'üîÑ –ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É' :
        action === 'complete' ? '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω' : '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω'
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞
      const callbackData = `order:view:${orderId}`
      await ctx.editMessageReplyMarkup({
        reply_markup: new InlineKeyboard().text('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...', 'loading')
      })
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      ctx.match = [`order:view:${orderId}`, orderId.toString()]
      await bot.handleUpdate({ callback_query: { ...ctx.callbackQuery!, data: callbackData } })
    } catch (error) {
      console.error('‚ùå Error updating order:', error)
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞')
    }
  })

  // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  bot.callbackQuery('products:list', async (ctx) => {
    await ctx.answerCallbackQuery({ text: 'üõç –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã...' })
    
    try {
      const products = await prisma.product.findMany({
        include: { category: true },
        orderBy: { name: 'asc' },
        take: 20
      })

      if (products.length === 0) {
        await ctx.editMessageText(
          'üõç *–¢–æ–≤–∞—Ä—ã*\\n\\n–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç',
          {
            parse_mode: 'Markdown',
            reply_markup: getProductsMenu()
          }
        )
        return
      }

      let message = 'üõç *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\\n\\n'
      const keyboard = new InlineKeyboard()

      for (const product of products) {
        const status = product.active ? '‚úÖ' : 'üö´'
        message += `${status} *${product.name}*\\n`
        message += `üí∞ ${product.price} –≥—Ä–Ω | üì¶ ${product.stock} —à—Ç\\n`
        message += `üìÇ ${product.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\\n\\n`
        
        if (products.indexOf(product) < 10) {
          keyboard.text(product.name.substring(0, 30), `product:view:${product.id}`).row()
        }
      }

      keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'menu:products')

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    } catch (error) {
      console.error('‚ùå Error fetching products:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤',
        { reply_markup: getProductsMenu() }
      )
    }
  })

  // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
  bot.callbackQuery(/^product:view:(\d+)$/, async (ctx) => {
    const productId = parseInt(ctx.match![1])
    await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä...' })
    
    try {
      const product = await prisma.product.findUnique({
        where: { id: productId },
        include: { category: true }
      })

      if (!product) {
        await ctx.answerCallbackQuery('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }

      let message = `üõç *${product.name}*\\n\\n`
      message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${product.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\\n`
      message += `üí∞ *–¶–µ–Ω–∞:* ${product.price} –≥—Ä–Ω\\n`
      message += `üì¶ *–ù–∞ —Å–∫–ª–∞–¥–µ:* ${product.stock} —à—Ç\\n`
      message += `üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${product.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\\n`
      message += `üñº *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:* ${product.images.length || 0} —à—Ç\\n`
      message += `üìä *–°—Ç–∞—Ç—É—Å:* ${product.active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : 'üö´ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\\n`
      message += `üìÖ *–î–æ–±–∞–≤–ª–µ–Ω:* ${new Date(product.createdAt).toLocaleDateString('ru')}\\n`

      const keyboard = new InlineKeyboard()
      keyboard.text(
        product.active ? 'üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', 
        `product:toggle:${product.id}`
      ).row()
      keyboard.text('‚óÄÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º', 'products:list')

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    } catch (error) {
      console.error('‚ùå Error viewing product:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞',
        { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º', 'products:list') }
      )
    }
  })

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
  bot.callbackQuery(/^product:toggle:(\d+)$/, async (ctx) => {
    const productId = parseInt(ctx.match![1])
    
    try {
      const product = await prisma.product.findUnique({
        where: { id: productId }
      })

      if (!product) {
        await ctx.answerCallbackQuery('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }

      await prisma.product.update({
        where: { id: productId },
        data: { active: !product.active }
      })

      await ctx.answerCallbackQuery(
        product.active ? 'üö´ –¢–æ–≤–∞—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
      const callbackData = `product:view:${productId}`
      ctx.match = [`product:view:${productId}`, productId.toString()]
      await bot.handleUpdate({ callback_query: { ...ctx.callbackQuery!, data: callbackData } })
    } catch (error) {
      console.error('‚ùå Error toggling product:', error)
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞')
    }
  })

  // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  bot.callbackQuery('categories:list', async (ctx) => {
    await ctx.answerCallbackQuery({ text: 'üè∑ –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...' })
    
    try {
      const categories = await prisma.category.findMany({
        include: {
          _count: {
            select: { products: true }
          }
        },
        orderBy: { name: 'asc' }
      })

      let message = 'üè∑ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:*\\n\\n'
      const keyboard = new InlineKeyboard()

      if (categories.length === 0) {
        message += '–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç'
      } else {
        for (const category of categories) {
          message += `‚Ä¢ *${category.name}* (${category._count.products} —Ç–æ–≤–∞—Ä–æ–≤)\\n`
          keyboard.text(category.name, `category:view:${category.id}`).row()
        }
      }

      keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', 'menu:categories')

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    } catch (error) {
      console.error('‚ùå Error fetching categories:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
        { reply_markup: getCategoriesMenu() }
      )
    }
  })

  // –ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  bot.callbackQuery(/^orders:(new|processing|shipped|completed|cancelled)$/, async (ctx) => {
    const status = ctx.match![1]
    await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–∫–∞–∑—ã...' })
    
    try {
      const orders = await prisma.order.findMany({
        where: { status },
        include: {
          customer: true,
          orderItems: {
            include: { product: true }
          }
        },
        orderBy: { createdAt: 'desc' },
        take: 10
      })

      const statusNames: Record<string, string> = {
        new: '–ù–æ–≤—ã–µ',
        processing: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        shipped: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ',
        completed: '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ',
        cancelled: '–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ'
      }

      if (orders.length === 0) {
        await ctx.editMessageText(
          `üì¶ *${statusNames[status]} –∑–∞–∫–∞–∑—ã*\\n\\n–ó–∞–∫–∞–∑–æ–≤ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ—Ç`,
          {
            parse_mode: 'Markdown',
            reply_markup: getOrdersMenu()
          }
        )
        return
      }

      let message = `üì¶ *${statusNames[status]} –∑–∞–∫–∞–∑—ã:*\\n\\n`
      const keyboard = new InlineKeyboard()

      for (const order of orders) {
        message += `*#${order.id}* - ${order.customer?.name || '–ê–Ω–æ–Ω–∏–º'}\\n`
        message += `üí∞ ${order.total} –≥—Ä–Ω | üìÖ ${new Date(order.createdAt).toLocaleDateString('ru')}\\n\\n`
        
        keyboard.text(`–ó–∞–∫–∞–∑ #${order.id}`, `order:view:${order.id}`).row()
      }

      keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º', 'menu:orders')

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    } catch (error) {
      console.error('‚ùå Error fetching orders by status:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤',
        { reply_markup: getOrdersMenu() }
      )
    }
  })

  // –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.command('orders', async (ctx) => {
    if (!isAdmin(ctx.from?.id.toString() || '')) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
      return
    }

    const orders = await prisma.order.findMany({
      include: { customer: true },
      orderBy: { createdAt: 'desc' },
      take: 5
    })

    if (orders.length === 0) {
      await ctx.reply('üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç')
      return
    }

    let message = 'üì¶ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:*\\n\\n'
    for (const order of orders) {
      const status = order.status === 'pending' ? '‚è≥' : 
                    order.status === 'processing' ? 'üîÑ' :
                    order.status === 'completed' ? '‚úÖ' : '‚ùå'
      
      message += `${status} *#${order.id}* - ${order.customer?.name || '–ê–Ω–æ–Ω–∏–º'}\\n`
      message += `üí∞ ${order.total} –≥—Ä–Ω | üìÖ ${new Date(order.createdAt).toLocaleDateString('ru')}\\n\\n`
    }

    await ctx.reply(message, { parse_mode: 'Markdown' })
  })

  bot.command('products', async (ctx) => {
    if (!isAdmin(ctx.from?.id.toString() || '')) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
      return
    }

    const products = await prisma.product.findMany({
      where: { active: true },
      orderBy: { name: 'asc' },
      take: 10
    })

    if (products.length === 0) {
      await ctx.reply('üõç –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç')
      return
    }

    let message = 'üõç *–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*\\n\\n'
    for (const product of products) {
      message += `‚Ä¢ *${product.name}*\\n`
      message += `  üí∞ ${product.price} –≥—Ä–Ω | üì¶ ${product.stock} —à—Ç\\n\\n`
    }

    await ctx.reply(message, { parse_mode: 'Markdown' })
  })

  bot.command('stats', async (ctx) => {
    if (!isAdmin(ctx.from?.id.toString() || '')) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
      return
    }

    const [orderCount, productCount, customerCount] = await Promise.all([
      prisma.order.count(),
      prisma.product.count(),
      prisma.customer.count()
    ])

    const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\\n\\n` +
                   `üì¶ –ó–∞–∫–∞–∑–æ–≤: ${orderCount}\\n` +
                   `üõç –¢–æ–≤–∞—Ä–æ–≤: ${productCount}\\n` +
                   `üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: ${customerCount}`

    await ctx.reply(message, { parse_mode: 'Markdown' })
  })

  // –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤
  bot.callbackQuery('menu:customers', async (ctx) => {
    await ctx.answerCallbackQuery({ text: 'üë• –ó–∞–≥—Ä—É–∂–∞—é –∫–ª–∏–µ–Ω—Ç–æ–≤...' })
    
    try {
      const [totalCustomers, recentCustomers] = await Promise.all([
        prisma.customer.count(),
        prisma.customer.findMany({
          include: {
            _count: {
              select: { orders: true }
            }
          },
          orderBy: { createdAt: 'desc' },
          take: 10
        })
      ])

      let message = `üë• *–ö–ª–∏–µ–Ω—Ç—ã (${totalCustomers} —á–µ–ª.)*\\n\\n`
      const keyboard = new InlineKeyboard()

      if (recentCustomers.length === 0) {
        message += '–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'
      } else {
        message += '*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã:*\\n\\n'
        for (const customer of recentCustomers) {
          message += `‚Ä¢ *${customer.name}*\\n`
          message += `  üì± ${customer.phone || '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}\\n`
          message += `  üì¶ –ó–∞–∫–∞–∑–æ–≤: ${customer._count.orders}\\n\\n`
          
          keyboard.text(customer.name, `customer:view:${customer.id}`).row()
        }
      }

      keyboard
        .text('üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞', 'customers:search').row()
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', 'customers:stats').row()
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    } catch (error) {
      console.error('‚ùå Error fetching customers:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤',
        { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main') }
      )
    }
  })

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–∞
  bot.callbackQuery(/^customer:view:(\d+)$/, async (ctx) => {
    const customerId = parseInt(ctx.match![1])
    await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...' })
    
    try {
      const customer = await prisma.customer.findUnique({
        where: { id: customerId },
        include: {
          orders: {
            orderBy: { createdAt: 'desc' },
            take: 5
          },
          _count: {
            select: { orders: true }
          }
        }
      })

      if (!customer) {
        await ctx.answerCallbackQuery('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }

      let message = `üë§ *${customer.name}*\\n\\n`
      message += `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${customer.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\\n`
      message += `üìß *Email:* ${customer.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\\n`
      message += `üìç *–ê–¥—Ä–µ—Å:* ${customer.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\\n`
      message += `üìÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:* ${new Date(customer.createdAt).toLocaleDateString('ru')}\\n`
      message += `üì¶ *–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:* ${customer._count.orders}\\n\\n`

      if (customer.orders.length > 0) {
        message += '*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:*\\n'
        for (const order of customer.orders) {
          const status = order.status === 'pending' ? '‚è≥' : 
                        order.status === 'processing' ? 'üîÑ' :
                        order.status === 'completed' ? '‚úÖ' : '‚ùå'
          message += `${status} #${order.id} - ${order.total} –≥—Ä–Ω (${new Date(order.createdAt).toLocaleDateString('ru')})\\n`
        }
      }

      const keyboard = new InlineKeyboard()
        .text('üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞', `customer:orders:${customer.id}`).row()
        .text('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `customer:edit:${customer.id}`).row()
        .text('‚óÄÔ∏è –ö –∫–ª–∏–µ–Ω—Ç–∞–º', 'menu:customers')

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    } catch (error) {
      console.error('‚ùå Error viewing customer:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∏–µ–Ω—Ç–∞',
        { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ö –∫–ª–∏–µ–Ω—Ç–∞–º', 'menu:customers') }
      )
    }
  })

  // –ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤
  bot.callbackQuery('menu:reviews', async (ctx) => {
    await ctx.answerCallbackQuery({ text: 'üí¨ –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–∑—ã–≤—ã...' })
    
    try {
      const [totalReviews, pendingReviews, recentReviews] = await Promise.all([
        prisma.review.count(),
        prisma.review.count({ where: { approved: false } }),
        prisma.review.findMany({
          include: {
            product: true,
            customer: true
          },
          orderBy: { createdAt: 'desc' },
          take: 5
        })
      ])

      let message = `üí¨ *–û—Ç–∑—ã–≤—ã (${totalReviews} —à—Ç.)*\\n`
      message += `‚è≥ *–û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏:* ${pendingReviews}\\n\\n`
      
      const keyboard = new InlineKeyboard()

      if (recentReviews.length > 0) {
        message += '*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:*\\n\\n'
        for (const review of recentReviews) {
          const stars = '‚≠ê'.repeat(review.rating)
          const status = review.approved ? '‚úÖ' : '‚è≥'
          message += `${status} ${stars} –æ—Ç *${review.customer?.name || '–ê–Ω–æ–Ω–∏–º'}*\\n`
          message += `üì¶ ${review.product?.name || '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω'}\\n`
          message += `üí¨ ${review.comment.substring(0, 50)}...\\n\\n`
          
          keyboard.text(`–û—Ç–∑—ã–≤ #${review.id}`, `review:view:${review.id}`).row()
        }
      } else {
        message += '–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'
      }

      keyboard
        .text('‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'reviews:pending').row()
        .text('‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ', 'reviews:approved').row()
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'reviews:stats').row()
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    } catch (error) {
      console.error('‚ùå Error fetching reviews:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤',
        { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main') }
      )
    }
  })

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–∞
  bot.callbackQuery(/^review:view:(\d+)$/, async (ctx) => {
    const reviewId = parseInt(ctx.match![1])
    await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–∑—ã–≤...' })
    
    try {
      const review = await prisma.review.findUnique({
        where: { id: reviewId },
        include: {
          product: true,
          customer: true
        }
      })

      if (!review) {
        await ctx.answerCallbackQuery('–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }

      const stars = '‚≠ê'.repeat(review.rating)
      let message = `üí¨ *–û—Ç–∑—ã–≤ #${review.id}*\\n\\n`
      message += `${stars} *${review.rating}/5*\\n\\n`
      message += `üë§ *–û—Ç:* ${review.customer?.name || '–ê–Ω–æ–Ω–∏–º'}\\n`
      message += `üì¶ *–¢–æ–≤–∞—Ä:* ${review.product?.name || '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω'}\\n`
      message += `üìÖ *–î–∞—Ç–∞:* ${new Date(review.createdAt).toLocaleDateString('ru')}\\n`
      message += `üìä *–°—Ç–∞—Ç—É—Å:* ${review.approved ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω' : '‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}\\n\\n`
      message += `*–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:*\\n${review.comment}`

      const keyboard = new InlineKeyboard()
      if (!review.approved) {
        keyboard.text('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `review:approve:${review.id}`).row()
      }
      keyboard
        .text('üóë –£–¥–∞–ª–∏—Ç—å', `review:delete:${review.id}`).row()
        .text('‚óÄÔ∏è –ö –æ—Ç–∑—ã–≤–∞–º', 'menu:reviews')

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      })
    } catch (error) {
      console.error('‚ùå Error viewing review:', error)
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–∞',
        { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ö –æ—Ç–∑—ã–≤–∞–º', 'menu:reviews') }
      )
    }
  })

  // –û–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
  bot.callbackQuery(/^review:approve:(\d+)$/, async (ctx) => {
    const reviewId = parseInt(ctx.match![1])
    
    try {
      await prisma.review.update({
        where: { id: reviewId },
        data: { approved: true }
      })

      await ctx.answerCallbackQuery('‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω')

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–∞
      ctx.match = [`review:view:${reviewId}`, reviewId.toString()]
      await bot.handleUpdate({ callback_query: { ...ctx.callbackQuery!, data: `review:view:${reviewId}` } })
    } catch (error) {
      console.error('‚ùå Error approving review:', error)
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞')
    }
  })

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
  bot.callbackQuery(/^review:delete:(\d+)$/, async (ctx) => {
    const reviewId = parseInt(ctx.match![1])
    
    try {
      await prisma.review.delete({
        where: { id: reviewId }
      })

      await ctx.answerCallbackQuery('üóë –û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω')
      await ctx.callbackQuery('menu:reviews')
    } catch (error) {
      console.error('‚ùå Error deleting review:', error)
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞')
    }
  })

  // –ú–µ–Ω—é email —Ä–∞—Å—Å—ã–ª–æ–∫
  bot.callbackQuery('menu:emails', async (ctx) => {
    await ctx.editMessageText(
      'üìß *Email —Ä–∞—Å—Å—ã–ª–∫–∏*\\n\\n' +
      '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª email —Ä–∞—Å—Å—ã–ª–æ–∫:\\n' +
      '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö\\n' +
      '‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–∫—Ü–∏–π\\n' +
      '‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\\n\\n' +
      '_–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å_',
      {
        parse_mode: 'Markdown',
        reply_markup: new InlineKeyboard()
          .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫', 'emails:stats').row()
          .text('üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫', 'emails:history').row()
          .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
      }
    )
  })

  // –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
  bot.callbackQuery('menu:settings', async (ctx) => {
    await ctx.editMessageText(
      '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\\n\\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\\n' +
      '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\\n' +
      '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏\\n' +
      '‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏\\n' +
      '‚Ä¢ SEO –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\\n\\n' +
      '_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏_',
      {
        parse_mode: 'Markdown',
        reply_markup: new InlineKeyboard()
          .text('üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã', 'settings:admins').row()
          .text('üîß –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'settings:info').row()
          .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
      }
    )
  })

  // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  bot.callbackQuery('settings:info', async (ctx) => {
    const [orderCount, productCount, customerCount] = await Promise.all([
      prisma.order.count(),
      prisma.product.count(),
      prisma.customer.count()
    ])

    const message = `üîß *–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\\n\\n` +
                   `ü§ñ *–ë–æ—Ç:* VobVorot CRM v2.0\\n` +
                   `üåê *–°–∞–π—Ç:* vobvorot.com\\n` +
                   `üíæ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* PostgreSQL\\n` +
                   `üöÄ *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* Vercel\\n\\n` +
                   `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:*\\n` +
                   `üì¶ –ó–∞–∫–∞–∑–æ–≤: ${orderCount}\\n` +
                   `üõç –¢–æ–≤–∞—Ä–æ–≤: ${productCount}\\n` +
                   `üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: ${customerCount}\\n\\n` +
                   `*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\\n${ADMIN_IDS.map(id => `‚Ä¢ ID: ${id}`).join('\\n')}`

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:settings')
    })
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  bot.on('message', async (ctx) => {
    if (!isAdmin(ctx.from?.id.toString() || '')) {
      return
    }

    await ctx.reply(
      '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\\n\\n' +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ /menu –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é',
      { parse_mode: 'Markdown' }
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err) => {
    const ctx = err.ctx
    console.error('‚ùå Bot error:', err.error)
  })
  
  return bot
}

// Webhook handler
export async function POST(request: NextRequest) {
  console.log('üöÄ [HYBRID-CRM] POST request received')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const secretToken = request.headers.get('x-telegram-bot-api-secret-token')
    const expectedToken = process.env.TELEGRAM_WEBHOOK_SECRET || 'vobvorot_webhook_secret_2025'
    
    if (expectedToken && secretToken !== expectedToken) {
      console.log('‚ùå [HYBRID-CRM] Unauthorized webhook attempt')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    const update = await request.json()
    console.log('üì® [HYBRID-CRM] Update:', JSON.stringify(update, null, 2))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞
    if (update.message?.from?.id || update.callback_query?.from?.id) {
      const userId = update.message?.from?.id || update.callback_query?.from?.id
      if (!isAdmin(userId.toString())) {
        console.log('‚ùå [HYBRID-CRM] Unauthorized user:', userId)
        return NextResponse.json({ ok: true })
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    const bot = await createBot()
    await bot.handleUpdate(update)
    
    return NextResponse.json({ ok: true })
    
  } catch (error) {
    console.error('üí• [HYBRID-CRM] Error:', error)
    
    return NextResponse.json(
      { error: 'Internal server error' }, 
      { status: 500 }
    )
  }
}

// GET endpoint –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const action = searchParams.get('action')
    
    if (action === 'set') {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      const webhookUrl = 'https://vobvorot.com/api/telegram/hybrid-crm'
      const secretToken = process.env.TELEGRAM_WEBHOOK_SECRET || 'vobvorot_webhook_secret_2025'
      
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          url: webhookUrl,
          secret_token: secretToken,
          allowed_updates: ['message', 'callback_query', 'inline_query']
        })
      })
      
      const result = await response.json()
      console.log('üéØ [HYBRID-CRM] Webhook set result:', result)
      
      return NextResponse.json(result)
      
    } else if (action === 'info') {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`)
      const result = await response.json()
      
      return NextResponse.json(result)
      
    } else if (action === 'delete') {
      // –£–¥–∞–ª—è–µ–º webhook
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`)
      const result = await response.json()
      
      return NextResponse.json(result)
      
    } else {
      return NextResponse.json({ 
        status: 'Hybrid CRM webhook ready',
        bot_token: BOT_TOKEN.substring(0, 10) + '...',
        admin_ids: ADMIN_IDS,
        features: {
          orders: 'Full order management',
          products: 'Product CRUD operations',
          categories: 'Category management',
          videos: 'Home & Sign page videos',
          customers: 'Customer CRM',
          reviews: 'Review management',
          statistics: 'Analytics & reports',
          emails: 'Email campaigns',
          settings: 'Site configuration'
        },
        timestamp: new Date().toISOString()
      })
    }
    
  } catch (error) {
    console.error('[HYBRID-CRM] Webhook error', error)
    return NextResponse.json(
      { error: 'Failed to manage webhook' }, 
      { status: 500 }
    )
  }
}