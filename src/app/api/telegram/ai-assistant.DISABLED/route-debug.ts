import { Bot, webhookCallback } from 'grammy'
import { NextRequest } from 'next/server'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate, formatPrice } from './utils'
import { rateLimiter } from './rate-limiter'
import { confirmationManager } from './confirmation-manager'
import { 
  uploadVideoFromTelegram, 
  updateHomeVideo, 
  getHomeVideo,
  getSignVideos, 
  addSignVideo, 
  deleteSignVideo,
  formatVideoList 
} from './video-manager'
import {
  refundPayment,
  getPaymentInfo,
  retryPayment,
  checkPaymentStatus,
  formatPaymentInfo,
  formatRefundInfo
} from './payment-manager'
import {
  sendTestEmail,
  sendOrderNotificationEmail,
  sendShippingNotificationEmail,
  sendBulkEmails,
  sendMarketingCampaign,
  getEmailStatistics,
  formatEmailResult,
  formatBulkEmailResult,
  formatEmailStats
} from './email-manager'
import {
  calculateOrderShipping,
  checkShippingAvailability,
  updateOrderTracking,
  getDeliveryStatus,
  getShippingZones,
  calculateBulkShipping,
  formatShippingResult,
  formatBulkShippingResult
} from './delivery-manager'
import {
  logAction,
  logError,
  logAIInteraction,
  getActionLogs,
  getErrorLogs,
  getUsageStatistics,
  exportLogs,
  cleanupOldLogs,
  formatUsageStats,
  formatLogs
} from './logging-manager'

// Hardcoded values –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å env vars)
const BOT_TOKEN = '7700098378:AAGZ1zZOxiwXbJeknO9SvyN25KvfWQkQNrI'
const ADMIN_IDS = ['316593422', '1837334996']
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'AIzaSyAYSLsD4XW40XJm5uv6w71bYoZkTAeoU7Y'
const WEBHOOK_SECRET = 'vobvorot_webhook_secret_2025' // Hardcoded –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// Initialize Gemini
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY)
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })

// System prompt –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
const SYSTEM_PROMPT = `–¢—ã AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ VOBVOROT. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π JSON —Å –¥–µ–π—Å—Ç–≤–∏–µ–º.

–í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{
  "action": "string",
  "params": {},
  "needConfirm": boolean
}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
- view_orders: –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã (params: {filter?: "today"|"week"|"month"|"all", status?: string})
- add_product: –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (params: {name: string, price: number, category?: string})
- search_customer: –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ (params: {query: string})
- stats: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (params: {period?: "today"|"week"|"month"|"all"})
- search_product: –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä (params: {query: string})
- update_order_status: –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (params: {orderId: number, status: string})
- add_category: —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (params: {name: string, emoji?: string})
- view_categories: –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (params: {})
- upload_home_video: –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –≥–ª–∞–≤–Ω—É—é (params: {})
- view_home_video: –ø–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π (params: {})
- delete_home_video: —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π (params: {})
- list_sign_videos: –ø–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–µ–π (params: {})
- add_sign_video: –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–µ–π (params: {})
- delete_sign_video: —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–µ–π (params: {videoId: string})
- refund_payment: –≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ (params: {orderId: string, reason: string, amount?: number})
- check_payment_status: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (params: {orderId: string})
- retry_payment: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (params: {orderId: string})
- view_payment_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ (params: {orderId: string})
- send_test_email: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ (params: {email: string})
- send_order_notification: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ (params: {orderId: string, type?: "confirmation"|"status-update"})
- send_shipping_notification: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä (params: {orderId: string, trackingNumber: string, carrier?: string})
- send_bulk_emails: –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (params: {type: string, orderIds?: string[], status?: string, dateFrom?: string, dateTo?: string})
- send_marketing_campaign: –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (params: {subject: string, content: string, customerIds?: string[], onlyRecentCustomers?: boolean, daysBack?: number})
- get_email_statistics: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ email (params: {dateFrom?: string, dateTo?: string})
- calculate_shipping: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (params: {orderId: string, packageType?: "box"|"package", currency?: "UAH"|"USD"})
- check_shipping: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Å—Ç—Ä–∞–Ω—É (params: {countryCode: string, weight?: number})
- update_tracking: –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä (params: {orderId: string, trackingNumber: string, carrier?: string})
- get_delivery_status: —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (params: {orderId: string})
- get_shipping_zones: –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (params: {})
- calculate_bulk_shipping: –º–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ (params: {orderIds: string[], packageType?: "box"|"package", currency?: "UAH"|"USD"})
- view_logs: –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (params: {filter?: "errors"|"recent"|"user", userId?: string, dateFrom?: string, dateTo?: string})
- view_statistics: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (params: {dateFrom?: string, dateTo?: string})
- export_logs: —ç–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ (params: {format?: "csv"|"json", dateFrom?: string, dateTo?: string})
- cleanup_logs: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (params: {daysToKeep?: number})
- unknown: –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (params: {})

–í–ê–ñ–ù–û: needConfirm –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.`

async function createBot() {
  const bot = new Bot(BOT_TOKEN)
  await bot.init()

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
  function isAdmin(userId: string): boolean {
    return ADMIN_IDS.includes(userId)
  }

  // AI –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  async function analyzeMessage(text: string, userId: string) {
    const startTime = Date.now()
    
    try {
      const prompt = `${SYSTEM_PROMPT}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"\n\n–û—Ç–≤–µ—Ç JSON:`
      const result = await model.generateContent(prompt)
      const response = await result.response
      const responseText = response.text()
      
      // –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö markdown –±–ª–æ–∫–æ–≤
      const cleanedText = responseText
        .replace(/```json\n?/g, '')
        .replace(/```\n?/g, '')
        .trim()
      
      const parsedResult = JSON.parse(cleanedText)
      
      // –õ–æ–≥–∏—Ä—É–µ–º AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
      const duration = Date.now() - startTime
      await logAIInteraction(userId, text, parsedResult.action, parsedResult.params, duration)
      
      return parsedResult
    } catch (error) {
      console.error('AI analysis error:', error)
      await logError(userId, 'ai_analysis', error, { userMessage: text })
      return { action: 'unknown', params: {}, needConfirm: false }
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.command('start', async (ctx) => {
    if (!ctx.from || !isAdmin(ctx.from.id.toString())) {
      await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É')
      return
    }

    await ctx.reply(
      'üëã *AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç VOBVOROT*\\n\\n' +
      'ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫\\! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ:\\n\\n' +
      'üì¶ *–ó–∞–∫–∞–∑—ã:*\\n' +
      '‚Ä¢ –ü–æ–∫–∞–∂–∏ –∑–∞–∫–∞–∑—ã\\n' +
      '‚Ä¢ –ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\\n' +
      '‚Ä¢ –ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –Ω–æ–≤—ã–π\\n\\n' +
      'üõç *–¢–æ–≤–∞—Ä—ã:*\\n' +
      '‚Ä¢ –î–æ–±–∞–≤—å –ø–ª–∞—Ç—å–µ –∑–∞ 2500\\n' +
      '‚Ä¢ –ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä —é–±–∫–∞\\n' +
      '‚Ä¢ –î–æ–±–∞–≤—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–µ–∂–¥–∞\\n\\n' +
      'üë• *–ö–ª–∏–µ–Ω—Ç—ã:*\\n' +
      '‚Ä¢ –ù–∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ú–∞—Ä–∏—è\\n' +
      '‚Ä¢ –ü–æ–∫–∞–∂–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\\n\\n' +
      'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\\n' +
      '‚Ä¢ –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\\n' +
      '‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\\n\\n' +
      'üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –ü–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏\\!',
      { parse_mode: 'MarkdownV2' }
    )
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message:text', async (ctx) => {
    if (!ctx.from || !isAdmin(ctx.from.id.toString())) return

    await ctx.reply('ü§ñ –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç')
  })

  return bot
}

// Webhook handler —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function POST(req: NextRequest) {
  try {
    console.log('=== WEBHOOK DEBUG START ===')
    console.log('Timestamp:', new Date().toISOString())
    console.log('URL:', req.url)
    console.log('Method:', req.method)
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers: Record<string, string> = {}
    req.headers.forEach((value, key) => {
      headers[key] = value
    })
    console.log('Headers:', JSON.stringify(headers, null, 2))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ secret token
    const receivedToken = req.headers.get('x-telegram-bot-api-secret-token')
    console.log('Received Secret Token:', receivedToken)
    console.log('Expected Secret Token:', WEBHOOK_SECRET)
    console.log('Tokens Match:', receivedToken === WEBHOOK_SECRET)
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const body = await req.text()
    console.log('Body Length:', body.length)
    console.log('Body Preview:', body.substring(0, 200))
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    let parsedBody
    try {
      parsedBody = JSON.parse(body)
      console.log('Parsed Body:', JSON.stringify(parsedBody, null, 2))
    } catch (e) {
      console.error('Failed to parse body as JSON:', e)
    }
    
    console.log('=== WEBHOOK DEBUG END ===')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token –≤—Ä—É—á–Ω—É—é
    if (receivedToken !== WEBHOOK_SECRET) {
      console.error('SECRET TOKEN MISMATCH!')
      console.error('Expected:', WEBHOOK_SECRET)
      console.error('Received:', receivedToken)
      return new Response('Unauthorized', { status: 401 })
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Request —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º body
    const newReq = new Request(req.url, {
      method: req.method,
      headers: req.headers,
      body: body
    })
    
    const bot = await createBot()
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Grammy webhookCallback –±–µ–∑ secret token (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä—É—á–Ω—É—é)
    const handleUpdate = webhookCallback(bot, 'std/http')
    
    return handleUpdate(newReq)
  } catch (error) {
    console.error('=== WEBHOOK ERROR ===')
    console.error('Error Type:', error.constructor.name)
    console.error('Error Message:', error.message)
    console.error('Error Stack:', error.stack)
    console.error('=== END ERROR ===')
    return new Response('Error', { status: 500 })
  }
}