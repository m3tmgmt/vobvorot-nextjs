import { Bot, webhookCallback } from 'grammy'
import { NextRequest } from 'next/server'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate, formatPrice } from './utils'
import { rateLimiter } from './rate-limiter'
import { confirmationManager } from './confirmation-manager'
import { 
  uploadVideoFromTelegram, 
  updateHomeVideo, 
  getHomeVideo,
  getSignVideos, 
  addSignVideo, 
  deleteSignVideo,
  formatVideoList 
} from './video-manager'
import {
  refundPayment,
  getPaymentInfo,
  retryPayment,
  checkPaymentStatus,
  formatPaymentInfo,
  formatRefundInfo
} from './payment-manager'
import {
  sendTestEmail,
  sendOrderNotificationEmail,
  sendShippingNotificationEmail,
  sendBulkEmails,
  sendMarketingCampaign,
  getEmailStatistics,
  formatEmailResult,
  formatBulkEmailResult,
  formatEmailStats
} from './email-manager'
import {
  calculateOrderShipping,
  checkShippingAvailability,
  updateOrderTracking,
  getDeliveryStatus,
  getShippingZones,
  calculateBulkShipping,
  formatShippingResult,
  formatBulkShippingResult
} from './delivery-manager'
import {
  logAction,
  logError,
  logAIInteraction,
  getActionLogs,
  getErrorLogs,
  getUsageStatistics,
  exportLogs,
  cleanupOldLogs,
  formatUsageStats,
  formatLogs
} from './logging-manager'

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN?.trim() || '7700098378:AAGZ1zZOxiwXbJeknO9SvyN25KvfWQkQNrI'
const ADMIN_IDS = process.env.TELEGRAM_OWNER_CHAT_ID?.trim().split(',').map(id => id.trim()) || ['316593422', '1837334996']
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || process.env.GOOGLE_GENERATIVE_AI_API_KEY || ''

// Initialize Gemini
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY)
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })

// System prompt –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
const SYSTEM_PROMPT = `–¢—ã AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ VOBVOROT. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π JSON —Å –¥–µ–π—Å—Ç–≤–∏–µ–º.

–í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{
  "action": "string",
  "params": {},
  "needConfirm": boolean
}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:

=== üì¶ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò (15 —Ñ—É–Ω–∫—Ü–∏–π) ===
- view_orders: –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã (params: {filter?: "today"|"yesterday"|"week"|"month"|"all", status?: string, search?: string})
- search_order: –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ (params: {orderId: string})
- order_details: –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (params: {orderId: string})
- update_order_status: –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (params: {orderId: string, status: "pending"|"processing"|"shipped"|"delivered"|"cancelled"})
- add_tracking: –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä (params: {orderId: string, trackingNumber: string, carrier?: string})
- add_order_note: –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞–∫–∞–∑—É (params: {orderId: string, note: string})
- print_invoice: –ø–µ—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω–æ–π (params: {orderId: string})
- initiate_return: –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç (params: {orderId: string, reason: string})
- partial_refund: —á–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç (params: {orderId: string, amount: number, reason: string})
- full_refund: –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç (params: {orderId: string, reason: string})
- send_return_notification: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ (params: {orderId: string})
- order_history: –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–∫–∞–∑–∞ (params: {orderId: string})
- bulk_status_update: –º–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ (params: {orderIds: string[], status: string})
- export_orders: —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ (params: {format: "csv"|"excel", filter?: string})
- cancel_order: –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (params: {orderId: string, reason?: string})

=== üõçÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò (20 —Ñ—É–Ω–∫—Ü–∏–π) ===
- add_product: –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (params: {name: string, description?: string, price: number, category?: string, quantity?: number, weight?: number, sizes?: string[], brand?: string})
- edit_product: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä (params: {productId: string, field: string, value: any})
- update_product_price: –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É (params: {productId: string, price: number})
- update_product_stock: –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (params: {productId: string, quantity: number})
- update_product_status: –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ (params: {productId: string, status: "active"|"inactive"|"out_of_stock"})
- add_product_photos: –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (params: {productId: string})
- delete_product_photo: —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (params: {productId: string, photoId: string})
- add_product_videos: –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ (params: {productId: string})
- delete_product_video: —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ (params: {productId: string, videoId: string})
- search_product: –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä (params: {query: string})
- view_products: –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (params: {category?: string, status?: string})
- view_products_by_category: —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (params: {categoryId: string})
- delete_product: —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (params: {productId: string})
- bulk_edit_products: –º–∞—Å—Å–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (params: {productIds: string[], field: string, value: any})
- export_products: —ç–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ (params: {format: "csv"|"excel"})
- import_products: –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ (params: {fileUrl: string})
- product_details: –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ (params: {productId: string})
- low_stock_products: —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º (params: {threshold?: number})
- out_of_stock_products: —Ç–æ–≤–∞—Ä—ã –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏ (params: {})
- duplicate_product: –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä (params: {productId: string})

=== üè∑Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò (6 —Ñ—É–Ω–∫—Ü–∏–π) ===
- add_category: —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (params: {name: string, emoji?: string})
- edit_category: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (params: {categoryId: string, name?: string, emoji?: string})
- reorder_categories: –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (params: {categoryIds: string[]})
- delete_category: —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (params: {categoryId: string})
- view_categories: –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (params: {})
- category_products: —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (params: {categoryId: string})

=== üé¨ –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ï–û (10 —Ñ—É–Ω–∫—Ü–∏–π) ===
- upload_home_video: –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –≥–ª–∞–≤–Ω—É—é (params: {})
- view_home_video: –ø–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π (params: {})
- delete_home_video: —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π (params: {})
- reorder_home_videos: –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤–∏–¥–µ–æ (params: {videoIds: string[]})
- list_sign_videos: –ø–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–µ–π (params: {letter?: string})
- add_sign_video: –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–µ–π (params: {letter?: string})
- delete_sign_video: —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–µ–π (params: {videoId: string})
- search_sign_video: –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –±—É–∫–≤–µ (params: {letter: string})
- bulk_upload_videos: –º–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ (params: {})
- video_statistics: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ (params: {})

=== üë• CRM –§–£–ù–ö–¶–ò–ò (16 —Ñ—É–Ω–∫—Ü–∏–π) ===
- search_customer: –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ (params: {query: string, searchBy?: "email"|"phone"|"name"})
- customer_profile: –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (params: {customerId: string})
- customer_orders: –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ (params: {customerId: string})
- customer_total_spent: –æ–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫ (params: {customerId: string})
- add_customer_tag: –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –∫–ª–∏–µ–Ω—Ç—É (params: {customerId: string, tag: string})
- remove_customer_tag: —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –∫–ª–∏–µ–Ω—Ç–∞ (params: {customerId: string, tag: string})
- update_customer_status: –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ (params: {customerId: string, status: "active"|"inactive"|"vip"|"blocked"})
- add_customer_note: –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ –∫–ª–∏–µ–Ω—Ç–µ (params: {customerId: string, note: string})
- send_personal_message: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (params: {customerId: string, message: string})
- mass_message_all: —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º (params: {message: string})
- mass_message_by_tag: —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Ç–µ–≥–∞–º (params: {tags: string[], message: string})
- mass_message_by_status: —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É (params: {status: string, message: string})
- export_customers: —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ (params: {format: "csv"|"excel"})
- customer_analytics: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É (params: {customerId: string})
- segment_customers: —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (params: {criteria: string})
- merge_customers: –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ (params: {customerId1: string, customerId2: string})

=== üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´ (15 —Ñ—É–Ω–∫—Ü–∏–π) ===
- stats: –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (params: {period?: "today"|"yesterday"|"week"|"month"|"year"|"all"})
- revenue_report: –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º (params: {period?: string, groupBy?: "day"|"week"|"month"})
- average_order_value: —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ (params: {period?: string})
- customer_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ (params: {period?: string, status?: string})
- product_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (params: {status?: string})
- top_products: —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ (params: {limit?: number, period?: string})
- top_customers: —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ (params: {limit?: number, period?: string})
- sales_chart: –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ (params: {period?: string, groupBy?: string})
- conversion_rate: –∫–æ–Ω–≤–µ—Ä—Å–∏—è (params: {period?: string})
- returns_analytics: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ (params: {period?: string})
- category_performance: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π (params: {period?: string})
- payment_methods_stats: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã (params: {period?: string})
- shipping_stats: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (params: {period?: string})
- product_performance: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ (params: {productId?: string, period?: string})
- customer_lifetime_value: LTV –∫–ª–∏–µ–Ω—Ç–æ–≤ (params: {})

=== üí¨ –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê–ú–ò (6 —Ñ—É–Ω–∫—Ü–∏–π) ===
- view_reviews: –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ (params: {status?: "new"|"approved"|"rejected", rating?: number})
- moderate_review: –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞ (params: {reviewId: string, action: "approve"|"reject"})
- reply_to_review: –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤ (params: {reviewId: string, reply: string})
- review_statistics: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ (params: {})
- export_reviews: —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤ (params: {format: "csv"|"excel"})
- delete_review: —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤ (params: {reviewId: string})

=== üìß EMAIL –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (10 —Ñ—É–Ω–∫—Ü–∏–π) ===
- send_test_email: —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ (params: {email: string})
- send_order_notification: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ (params: {orderId: string, type?: "confirmation"|"status-update"})
- send_shipping_notification: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä (params: {orderId: string, trackingNumber: string, carrier?: string})
- send_return_notification: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ (params: {orderId: string})
- send_bulk_emails: –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (params: {type: string, orderIds?: string[], status?: string, dateFrom?: string, dateTo?: string})
- send_marketing_campaign: –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (params: {subject: string, content: string, customerIds?: string[], onlyRecentCustomers?: boolean, daysBack?: number})
- send_abandoned_cart_emails: –ø–∏—Å—å–º–∞ –æ –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω–∞—Ö (params: {})
- send_review_request: –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ (params: {orderId: string})
- email_template_preview: –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞ (params: {template: string, sampleData?: any})
- get_email_statistics: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ email (params: {dateFrom?: string, dateTo?: string})

=== üöö –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–°–¢–ê–í–ö–û–ô (10 —Ñ—É–Ω–∫—Ü–∏–π) ===
- calculate_shipping: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (params: {orderId: string, packageType?: "box"|"package", currency?: "UAH"|"USD"})
- check_shipping: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Å—Ç—Ä–∞–Ω—É (params: {countryCode: string, weight?: number})
- update_tracking: –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä (params: {orderId: string, trackingNumber: string, carrier?: string})
- get_delivery_status: —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (params: {orderId: string})
- get_shipping_zones: –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (params: {})
- calculate_bulk_shipping: –º–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ (params: {orderIds: string[], packageType?: "box"|"package", currency?: "UAH"|"USD"})
- create_shipping_label: —Å–æ–∑–¥–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ (params: {orderId: string})
- schedule_pickup: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–±–æ—Ä (params: {date: string, timeSlot: string})
- track_shipment: –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É (params: {trackingNumber: string})
- shipping_report: –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Å—Ç–∞–≤–∫–∞–º (params: {period?: string})

=== üí≥ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê–ú–ò (8 —Ñ—É–Ω–∫—Ü–∏–π) ===
- refund_payment: –≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ (params: {orderId: string, reason: string, amount?: number})
- check_payment_status: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (params: {orderId: string})
- retry_payment: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (params: {orderId: string})
- view_payment_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ (params: {orderId: string})
- payment_history: –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π (params: {customerId?: string, period?: string})
- pending_payments: –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ (params: {})
- failed_payments: –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (params: {period?: string})
- payment_reconciliation: —Å–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (params: {period?: string})

=== üîß –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò (10 —Ñ—É–Ω–∫—Ü–∏–π) ===
- view_logs: –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (params: {filter?: "errors"|"recent"|"user", userId?: string, dateFrom?: string, dateTo?: string})
- view_statistics: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (params: {dateFrom?: string, dateTo?: string})
- export_logs: —ç–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ (params: {format?: "csv"|"json", dateFrom?: string, dateTo?: string})
- cleanup_logs: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (params: {daysToKeep?: number})
- system_health: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (params: {})
- backup_data: —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (params: {type?: "full"|"products"|"orders"|"customers"})
- clear_cache: –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à (params: {})
- regenerate_thumbnails: –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—ã (params: {})
- database_optimization: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î (params: {})
- send_test_notification: —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (params: {})

=== ü§ñ AI –ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø (5 —Ñ—É–Ω–∫—Ü–∏–π) ===
- ai_product_description: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (params: {productId: string})
- ai_email_template: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è email —à–∞–±–ª–æ–Ω–∞ (params: {purpose: string, tone?: string})
- ai_response_suggestion: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ (params: {reviewId: string})
- automation_rules: –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (params: {})
- workflow_status: —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π (params: {})

=== üìà –ú–ê–†–ö–ï–¢–ò–ù–ì (5 —Ñ—É–Ω–∫—Ü–∏–π) ===
- create_discount_code: —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥ —Å–∫–∏–¥–∫–∏ (params: {code: string, discount: number, type: "percent"|"fixed", expiresAt?: string})
- view_discount_codes: –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–æ–≤ —Å–∫–∏–¥–æ–∫ (params: {active?: boolean})
- deactivate_discount: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∏–¥–∫—É (params: {code: string})
- campaign_performance: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–º–ø–∞–Ω–∏–π (params: {campaignId?: string})
- social_media_integration: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ—Ü—Å–µ—Ç–µ–π (params: {platform: string, action: string})

- unknown: –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (params: {})

–í–ê–ñ–ù–û: needConfirm –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
- –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
- —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–æ—Ç–∑—ã–≤–∞
- –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
- –≤–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã
- –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
- –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
- –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫`

async function createBot() {
  const bot = new Bot(BOT_TOKEN)
  await bot.init()

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
  function isAdmin(userId: string): boolean {
    return ADMIN_IDS.includes(userId)
  }

  // AI –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  async function analyzeMessage(text: string, userId: string) {
    const startTime = Date.now()
    
    try {
      const prompt = `${SYSTEM_PROMPT}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"\n\n–û—Ç–≤–µ—Ç JSON:`
      const result = await model.generateContent(prompt)
      const response = await result.response
      const responseText = response.text()
      
      // –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö markdown –±–ª–æ–∫–æ–≤
      const cleanedText = responseText
        .replace(/```json\n?/g, '')
        .replace(/```\n?/g, '')
        .trim()
      
      const parsedResult = JSON.parse(cleanedText)
      
      // –õ–æ–≥–∏—Ä—É–µ–º AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
      const duration = Date.now() - startTime
      await logAIInteraction(userId, text, parsedResult.action, parsedResult.params, duration)
      
      return parsedResult
    } catch (error) {
      console.error('AI analysis error:', error)
      await logError(userId, 'ai_analysis', error, { userMessage: text })
      return { action: 'unknown', params: {}, needConfirm: false }
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.command('start', async (ctx) => {
    if (!ctx.from || !isAdmin(ctx.from.id.toString())) {
      await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É')
      return
    }

    await ctx.reply(
      'üëã *AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç VOBVOROT*\\n\\n' +
      'ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫\\! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ:\\n\\n' +
      'üì¶ *–ó–∞–∫–∞–∑—ã:*\\n' +
      '‚Ä¢ –ü–æ–∫–∞–∂–∏ –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\\n' +
      '‚Ä¢ –ù–∞–π–¥–∏ –∑–∞–∫–∞–∑ 12345\\n' +
      '‚Ä¢ –ò–∑–º–µ–Ω–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\\n\\n' +
      'üõç *–¢–æ–≤–∞—Ä—ã:*\\n' +
      '‚Ä¢ –î–æ–±–∞–≤—å –ø–ª–∞—Ç—å–µ –∑–∞ 2500\\n' +
      '‚Ä¢ –ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä —é–±–∫–∞\\n' +
      '‚Ä¢ –ü–æ–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏\\n\\n' +
      'üë• *–ö–ª–∏–µ–Ω—Ç—ã:*\\n' +
      '‚Ä¢ –ù–∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ú–∞—Ä–∏—è\\n' +
      '‚Ä¢ –ü–æ–∫–∞–∂–∏ —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤\\n' +
      '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ä–∞—Å—Å—ã–ª–∫—É VIP –∫–ª–∏–µ–Ω—Ç–∞–º\\n\\n' +
      'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\\n' +
      '‚Ä¢ –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü\\n' +
      '‚Ä¢ –¢–æ–ø 10 —Ç–æ–≤–∞—Ä–æ–≤\\n' +
      '‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂\\n\\n' +
      'üé¨ *–í–∏–¥–µ–æ:*\\n' +
      '‚Ä¢ –ó–∞–≥—Ä—É–∑–∏ –≤–∏–¥–µ–æ –Ω–∞ –≥–ª–∞–≤–Ω—É—é\\n' +
      '‚Ä¢ –ü–æ–∫–∞–∂–∏ –≤–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–µ–π\\n\\n' +
      'üìß *Email:*\\n' +
      '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ\\n' +
      '‚Ä¢ –°–¥–µ–ª–∞–π —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è\\n\\n' +
      'üí° *–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ 100\\+ —Ñ—É–Ω–∫—Ü–∏–π\\!*',
      { parse_mode: 'MarkdownV2' }
    )
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message:video', async (ctx) => {
    if (!ctx.from || !isAdmin(ctx.from.id.toString())) return
    await handleVideoUpload(ctx)
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message:photo', async (ctx) => {
    if (!ctx.from || !isAdmin(ctx.from.id.toString())) return
    await handlePhotoUpload(ctx)
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  bot.on('message:document', async (ctx) => {
    if (!ctx.from || !isAdmin(ctx.from.id.toString())) return
    await handleDocumentUpload(ctx)
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message:text', async (ctx) => {
    if (!ctx.from || !isAdmin(ctx.from.id.toString())) return

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    const rateCheck = rateLimiter.checkUserLimit(ctx.from.id.toString())
    if (!rateCheck.allowed) {
      await ctx.reply(
        `‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤\\! –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${rateCheck.resetIn} —Å–µ–∫—É–Ω–¥\\.`,
        { parse_mode: 'MarkdownV2' }
      )
      return
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const messageText = ctx.message.text.toLowerCase()
    if (messageText === '–¥–∞' || messageText === 'yes' || messageText === '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é') {
      const confirmation = confirmationManager.getLastConfirmation(ctx.from.id.toString())
      if (confirmation) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await executeAction(ctx, confirmation.action, confirmation.params)
        return
      }
    } else if (messageText === '–Ω–µ—Ç' || messageText === 'no' || messageText === '–æ—Ç–º–µ–Ω–∞') {
      confirmationManager.cancelUserConfirmations(ctx.from.id.toString())
      await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
      return
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    const typing = ctx.replyWithChatAction('typing')
    
    try {
      const result = await analyzeMessage(ctx.message.text, ctx.from.id.toString())
      console.log('AI analysis result:', result)
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      if (result.needConfirm) {
        confirmationManager.createConfirmation(
          ctx.from.id.toString(),
          result.action,
          result.params,
          ctx.message.message_id
        )
        
        await ctx.reply(
          `‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\\!*\\n\\n` +
          `–î–µ–π—Å—Ç–≤–∏–µ: *${escapeMarkdownV2(result.action)}*\\n` +
          `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\\n\`\`\`\\n${escapeMarkdownV2(JSON.stringify(result.params, null, 2))}\\n\`\`\`\\n\\n` +
          `–û—Ç–ø—Ä–∞–≤—å—Ç–µ *"–¥–∞"* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *"–Ω–µ—Ç"* –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.`,
          { parse_mode: 'MarkdownV2' }
        )
        return
      }
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
      await executeAction(ctx, result.action, result.params)
    } catch (error) {
      console.error('Message handling error:', error)
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    } finally {
      typing.then(t => t.delete().catch(() => {}))
    }
  })

  return bot
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è
function getCategoryFromAction(action: string): 'command' | 'error' | 'ai_request' | 'ai_response' | 'system' | 'payment' | 'email' | 'delivery' {
  if (action.includes('payment') || action.includes('refund')) return 'payment'
  if (action.includes('email') || action.includes('send_')) return 'email'
  if (action.includes('shipping') || action.includes('delivery') || action.includes('tracking')) return 'delivery'
  if (action === 'unknown') return 'error'
  if (action.includes('logs') || action.includes('statistics') || action.includes('cleanup')) return 'system'
  return 'command'
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
async function executeAction(ctx: any, action: string, params: any) {
  const userId = ctx.from?.id?.toString() || 'unknown'
  const username = ctx.from?.username || ctx.from?.first_name
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
  await logAction({
    userId,
    username,
    action,
    category: getCategoryFromAction(action),
    details: params
  })
  
  try {
    switch (action) {
      // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò ===
      case 'view_orders':
        await handleViewOrders(ctx, params)
        break
      case 'search_order':
        await handleSearchOrder(ctx, params)
        break
      case 'order_details':
        await handleOrderDetails(ctx, params)
        break
      case 'update_order_status':
        await handleUpdateOrderStatus(ctx, params)
        break
      case 'add_tracking':
        await handleAddTracking(ctx, params)
        break
      case 'add_order_note':
        await handleAddOrderNote(ctx, params)
        break
      case 'print_invoice':
        await handlePrintInvoice(ctx, params)
        break
      case 'initiate_return':
        await handleInitiateReturn(ctx, params)
        break
      case 'partial_refund':
        await handlePartialRefund(ctx, params)
        break
      case 'full_refund':
        await handleFullRefund(ctx, params)
        break
      case 'send_return_notification':
        await handleSendReturnNotification(ctx, params)
        break
      case 'order_history':
        await handleOrderHistory(ctx, params)
        break
      case 'bulk_status_update':
        await handleBulkStatusUpdate(ctx, params)
        break
      case 'export_orders':
        await handleExportOrders(ctx, params)
        break
      case 'cancel_order':
        await handleCancelOrder(ctx, params)
        break

      // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò ===
      case 'add_product':
        await handleAddProduct(ctx, params)
        break
      case 'edit_product':
        await handleEditProduct(ctx, params)
        break
      case 'update_product_price':
        await handleUpdateProductPrice(ctx, params)
        break
      case 'update_product_stock':
        await handleUpdateProductStock(ctx, params)
        break
      case 'update_product_status':
        await handleUpdateProductStatus(ctx, params)
        break
      case 'add_product_photos':
        await handleAddProductPhotos(ctx, params)
        break
      case 'delete_product_photo':
        await handleDeleteProductPhoto(ctx, params)
        break
      case 'add_product_videos':
        await handleAddProductVideos(ctx, params)
        break
      case 'delete_product_video':
        await handleDeleteProductVideo(ctx, params)
        break
      case 'search_product':
        await handleSearchProduct(ctx, params)
        break
      case 'view_products':
        await handleViewProducts(ctx, params)
        break
      case 'view_products_by_category':
        await handleViewProductsByCategory(ctx, params)
        break
      case 'delete_product':
        await handleDeleteProduct(ctx, params)
        break
      case 'bulk_edit_products':
        await handleBulkEditProducts(ctx, params)
        break
      case 'export_products':
        await handleExportProducts(ctx, params)
        break
      case 'import_products':
        await handleImportProducts(ctx, params)
        break
      case 'product_details':
        await handleProductDetails(ctx, params)
        break
      case 'low_stock_products':
        await handleLowStockProducts(ctx, params)
        break
      case 'out_of_stock_products':
        await handleOutOfStockProducts(ctx, params)
        break
      case 'duplicate_product':
        await handleDuplicateProduct(ctx, params)
        break

      // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ===
      case 'add_category':
        await handleAddCategory(ctx, params)
        break
      case 'edit_category':
        await handleEditCategory(ctx, params)
        break
      case 'reorder_categories':
        await handleReorderCategories(ctx, params)
        break
      case 'delete_category':
        await handleDeleteCategory(ctx, params)
        break
      case 'view_categories':
        await handleViewCategories(ctx, params)
        break
      case 'category_products':
        await handleCategoryProducts(ctx, params)
        break

      // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ï–û ===
      case 'upload_home_video':
        await handleUploadHomeVideo(ctx, params)
        break
      case 'view_home_video':
        await handleViewHomeVideo(ctx, params)
        break
      case 'delete_home_video':
        await handleDeleteHomeVideo(ctx, params)
        break
      case 'reorder_home_videos':
        await handleReorderHomeVideos(ctx, params)
        break
      case 'list_sign_videos':
        await handleListSignVideos(ctx, params)
        break
      case 'add_sign_video':
        await handleAddSignVideo(ctx, params)
        break
      case 'delete_sign_video':
        await handleDeleteSignVideo(ctx, params)
        break
      case 'search_sign_video':
        await handleSearchSignVideo(ctx, params)
        break
      case 'bulk_upload_videos':
        await handleBulkUploadVideos(ctx, params)
        break
      case 'video_statistics':
        await handleVideoStatistics(ctx, params)
        break

      // === CRM –§–£–ù–ö–¶–ò–ò ===
      case 'search_customer':
        await handleSearchCustomer(ctx, params)
        break
      case 'customer_profile':
        await handleCustomerProfile(ctx, params)
        break
      case 'customer_orders':
        await handleCustomerOrders(ctx, params)
        break
      case 'customer_total_spent':
        await handleCustomerTotalSpent(ctx, params)
        break
      case 'add_customer_tag':
        await handleAddCustomerTag(ctx, params)
        break
      case 'remove_customer_tag':
        await handleRemoveCustomerTag(ctx, params)
        break
      case 'update_customer_status':
        await handleUpdateCustomerStatus(ctx, params)
        break
      case 'add_customer_note':
        await handleAddCustomerNote(ctx, params)
        break
      case 'send_personal_message':
        await handleSendPersonalMessage(ctx, params)
        break
      case 'mass_message_all':
        await handleMassMessageAll(ctx, params)
        break
      case 'mass_message_by_tag':
        await handleMassMessageByTag(ctx, params)
        break
      case 'mass_message_by_status':
        await handleMassMessageByStatus(ctx, params)
        break
      case 'export_customers':
        await handleExportCustomers(ctx, params)
        break
      case 'customer_analytics':
        await handleCustomerAnalytics(ctx, params)
        break
      case 'segment_customers':
        await handleSegmentCustomers(ctx, params)
        break
      case 'merge_customers':
        await handleMergeCustomers(ctx, params)
        break

      // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´ ===
      case 'stats':
        await handleStats(ctx, params)
        break
      case 'revenue_report':
        await handleRevenueReport(ctx, params)
        break
      case 'average_order_value':
        await handleAverageOrderValue(ctx, params)
        break
      case 'customer_count':
        await handleCustomerCount(ctx, params)
        break
      case 'product_count':
        await handleProductCount(ctx, params)
        break
      case 'top_products':
        await handleTopProducts(ctx, params)
        break
      case 'top_customers':
        await handleTopCustomers(ctx, params)
        break
      case 'sales_chart':
        await handleSalesChart(ctx, params)
        break
      case 'conversion_rate':
        await handleConversionRate(ctx, params)
        break
      case 'returns_analytics':
        await handleReturnsAnalytics(ctx, params)
        break
      case 'category_performance':
        await handleCategoryPerformance(ctx, params)
        break
      case 'payment_methods_stats':
        await handlePaymentMethodsStats(ctx, params)
        break
      case 'shipping_stats':
        await handleShippingStats(ctx, params)
        break
      case 'product_performance':
        await handleProductPerformance(ctx, params)
        break
      case 'customer_lifetime_value':
        await handleCustomerLifetimeValue(ctx, params)
        break

      // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê–ú–ò ===
      case 'view_reviews':
        await handleViewReviews(ctx, params)
        break
      case 'moderate_review':
        await handleModerateReview(ctx, params)
        break
      case 'reply_to_review':
        await handleReplyToReview(ctx, params)
        break
      case 'review_statistics':
        await handleReviewStatistics(ctx, params)
        break
      case 'export_reviews':
        await handleExportReviews(ctx, params)
        break
      case 'delete_review':
        await handleDeleteReview(ctx, params)
        break

      // === EMAIL –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
      case 'send_test_email':
        await handleSendTestEmail(ctx, params)
        break
      case 'send_order_notification':
        await handleSendOrderNotification(ctx, params)
        break
      case 'send_shipping_notification':
        await handleSendShippingNotification(ctx, params)
        break
      case 'send_return_notification':
        await handleSendReturnNotification(ctx, params)
        break
      case 'send_bulk_emails':
        await handleSendBulkEmails(ctx, params)
        break
      case 'send_marketing_campaign':
        await handleSendMarketingCampaign(ctx, params)
        break
      case 'send_abandoned_cart_emails':
        await handleSendAbandonedCartEmails(ctx, params)
        break
      case 'send_review_request':
        await handleSendReviewRequest(ctx, params)
        break
      case 'email_template_preview':
        await handleEmailTemplatePreview(ctx, params)
        break
      case 'get_email_statistics':
        await handleGetEmailStatistics(ctx, params)
        break

      // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–°–¢–ê–í–ö–û–ô ===
      case 'calculate_shipping':
        await handleCalculateShipping(ctx, params)
        break
      case 'check_shipping':
        await handleCheckShipping(ctx, params)
        break
      case 'update_tracking':
        await handleUpdateTracking(ctx, params)
        break
      case 'get_delivery_status':
        await handleGetDeliveryStatus(ctx, params)
        break
      case 'get_shipping_zones':
        await handleGetShippingZones(ctx, params)
        break
      case 'calculate_bulk_shipping':
        await handleCalculateBulkShipping(ctx, params)
        break
      case 'create_shipping_label':
        await handleCreateShippingLabel(ctx, params)
        break
      case 'schedule_pickup':
        await handleSchedulePickup(ctx, params)
        break
      case 'track_shipment':
        await handleTrackShipment(ctx, params)
        break
      case 'shipping_report':
        await handleShippingReport(ctx, params)
        break

      // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê–ú–ò ===
      case 'refund_payment':
        await handleRefundPayment(ctx, params)
        break
      case 'check_payment_status':
        await handleCheckPaymentStatus(ctx, params)
        break
      case 'retry_payment':
        await handleRetryPayment(ctx, params)
        break
      case 'view_payment_info':
        await handleViewPaymentInfo(ctx, params)
        break
      case 'payment_history':
        await handlePaymentHistory(ctx, params)
        break
      case 'pending_payments':
        await handlePendingPayments(ctx, params)
        break
      case 'failed_payments':
        await handleFailedPayments(ctx, params)
        break
      case 'payment_reconciliation':
        await handlePaymentReconciliation(ctx, params)
        break

      // === –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
      case 'view_logs':
        await handleViewLogs(ctx, params)
        break
      case 'view_statistics':
        await handleViewStatistics(ctx, params)
        break
      case 'export_logs':
        await handleExportLogs(ctx, params)
        break
      case 'cleanup_logs':
        await handleCleanupLogs(ctx, params)
        break
      case 'system_health':
        await handleSystemHealth(ctx, params)
        break
      case 'backup_data':
        await handleBackupData(ctx, params)
        break
      case 'clear_cache':
        await handleClearCache(ctx, params)
        break
      case 'regenerate_thumbnails':
        await handleRegenerateThumbnails(ctx, params)
        break
      case 'database_optimization':
        await handleDatabaseOptimization(ctx, params)
        break
      case 'send_test_notification':
        await handleSendTestNotification(ctx, params)
        break

      // === AI –ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø ===
      case 'ai_product_description':
        await handleAIProductDescription(ctx, params)
        break
      case 'ai_email_template':
        await handleAIEmailTemplate(ctx, params)
        break
      case 'ai_response_suggestion':
        await handleAIResponseSuggestion(ctx, params)
        break
      case 'automation_rules':
        await handleAutomationRules(ctx, params)
        break
      case 'workflow_status':
        await handleWorkflowStatus(ctx, params)
        break

      // === –ú–ê–†–ö–ï–¢–ò–ù–ì ===
      case 'create_discount_code':
        await handleCreateDiscountCode(ctx, params)
        break
      case 'view_discount_codes':
        await handleViewDiscountCodes(ctx, params)
        break
      case 'deactivate_discount':
        await handleDeactivateDiscount(ctx, params)
        break
      case 'campaign_performance':
        await handleCampaignPerformance(ctx, params)
        break
      case 'social_media_integration':
        await handleSocialMediaIntegration(ctx, params)
        break

      default:
        await ctx.reply('‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.')
    }
  } catch (error) {
    console.error(`Error in ${action}:`, error)
    await logError(userId, action, error, params)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

// === –ù–ê–ß–ê–õ–û –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –í–°–ï–• –§–£–ù–ö–¶–ò–ô ===

// ... (–∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—Å–µ handler —Ñ—É–Ω–∫—Ü–∏–∏, —è –ø—Ä–æ–¥–æ–ª–∂—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞)

// Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
export async function POST(req: NextRequest) {
  try {
    const bot = await createBot()
    
    // Grammy webhookCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç secret token –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    const secretToken = process.env.TELEGRAM_WEBHOOK_SECRET?.trim() || 'vobvorot_webhook_secret_2025'
    const handleUpdate = webhookCallback(bot, 'std/http', {
      secretToken: secretToken
    })
    
    return handleUpdate(req)
  } catch (error) {
    console.error('Webhook error:', error)
    return new Response('Error', { status: 500 })
  }
}