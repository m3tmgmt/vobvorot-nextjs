import { Context } from 'grammy'
import { prisma } from '@/lib/prisma'
import { 
  calculateShipping, 
  canShipToCountry, 
  getAvailableCountries,
  getShippingZone,
  SHIPPING_ZONES
} from '@/lib/meest-shipping'
import { escapeMarkdownV2 } from './utils'

export interface ShippingResult {
  success: boolean
  message: string
  data?: any
  error?: string
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞
export async function calculateOrderShipping(
  orderId: string,
  packageType: 'box' | 'package' = 'box',
  currency: 'UAH' | 'USD' = 'USD'
): Promise<ShippingResult> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
    const order = await prisma.order.findFirst({
      where: {
        OR: [
          { id: orderId },
          { orderNumber: orderId }
        ]
      },
      include: {
        orderItems: {
          include: {
            product: true
          }
        },
        customer: true
      }
    })

    if (!order) {
      return {
        success: false,
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –≤–µ—Å
    const totalWeight = order.orderItems.reduce((total, item) => {
      const weight = item.product.weight || 0.5 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5 –∫–≥
      return total + (weight * item.quantity)
    }, 0)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    const countryCode = order.shippingCountry || 'UA'
    const shippingCheck = canShipToCountry(countryCode, totalWeight)
    
    if (!shippingCheck.canShip) {
      return {
        success: false,
        error: shippingCheck.reason,
        data: { maxWeight: shippingCheck.maxWeight }
      }
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const shippingResult = calculateShipping(
      countryCode,
      packageType,
      totalWeight,
      undefined, // dimensions –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
      currency
    )

    return {
      success: true,
      message: '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞',
      data: {
        orderId: order.orderNumber,
        customerEmail: order.customer?.email,
        destination: order.shippingCountry,
        totalWeight,
        ...shippingResult
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏'
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
export async function checkShippingAvailability(
  countryCode: string,
  weight?: number
): Promise<ShippingResult> {
  try {
    const zone = getShippingZone(countryCode)
    const zoneInfo = SHIPPING_ZONES[zone]
    
    if (!zoneInfo) {
      return {
        success: false,
        error: '–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —ç—Ç—É —Å—Ç—Ä–∞–Ω—É –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
      }
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤–µ—Å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if (weight) {
      const check = canShipToCountry(countryCode, weight)
      if (!check.canShip) {
        return {
          success: false,
          error: check.reason,
          data: { maxWeight: check.maxWeight }
        }
      }
    }

    return {
      success: true,
      message: `–î–æ—Å—Ç–∞–≤–∫–∞ –≤ ${zoneInfo.name} –¥–æ—Å—Ç—É–ø–Ω–∞`,
      data: {
        zone: zoneInfo.name,
        deliveryTime: zoneInfo.deliveryTime,
        maxWeight: zoneInfo.maxWeight,
        maxDimensions: zoneInfo.maxDimensions
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏'
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
export async function updateOrderTracking(
  orderId: string,
  trackingNumber: string,
  carrier: string = 'Meest Express'
): Promise<ShippingResult> {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const order = await prisma.order.update({
      where: { 
        OR: [
          { id: orderId },
          { orderNumber: orderId }
        ]
      },
      data: {
        status: 'SHIPPED',
        trackingNumber,
        shippedAt: new Date()
      },
      include: {
        customer: true
      }
    })

    return {
      success: true,
      message: '–¢—Ä–µ–∫–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      data: {
        orderId: order.orderNumber,
        trackingNumber,
        carrier,
        status: order.status,
        shippedAt: order.shippedAt
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞'
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
export async function getDeliveryStatus(orderId: string): Promise<ShippingResult> {
  try {
    const order = await prisma.order.findFirst({
      where: {
        OR: [
          { id: orderId },
          { orderNumber: orderId }
        ]
      },
      include: {
        customer: true
      }
    })

    if (!order) {
      return {
        success: false,
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    let deliveryStatus = '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    let estimatedDelivery = null
    
    if (order.status === 'SHIPPED' && order.shippedAt) {
      deliveryStatus = '–í –ø—É—Ç–∏'
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏
      const zone = getShippingZone(order.shippingCountry || 'UA')
      const zoneInfo = SHIPPING_ZONES[zone]
      
      if (zoneInfo) {
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10-17 –¥–Ω–µ–π")
        const match = zoneInfo.deliveryTime.match(/(\d+)-(\d+)/)
        if (match) {
          const maxDays = parseInt(match[2])
          const estimatedDate = new Date(order.shippedAt)
          estimatedDate.setDate(estimatedDate.getDate() + maxDays)
          estimatedDelivery = estimatedDate
        }
      }
    } else if (order.status === 'DELIVERED') {
      deliveryStatus = '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'
    }

    return {
      success: true,
      message: '–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω',
      data: {
        orderId: order.orderNumber,
        orderStatus: order.status,
        deliveryStatus,
        trackingNumber: order.trackingNumber,
        shippedAt: order.shippedAt,
        estimatedDelivery,
        destination: order.shippingCountry
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
export async function getShippingZones(): Promise<ShippingResult> {
  try {
    const countries = getAvailableCountries()
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ –∑–æ–Ω–∞–º
    const zones: Record<string, any> = {}
    
    Object.entries(SHIPPING_ZONES).forEach(([zoneKey, zone]) => {
      zones[zoneKey] = {
        name: zone.name,
        deliveryTime: zone.deliveryTime,
        maxWeight: zone.maxWeight,
        countries: countries
          .filter(c => c.zone === zoneKey)
          .map(c => ({ code: c.code, name: c.name }))
      }
    })

    return {
      success: true,
      message: '–°–ø–∏—Å–æ–∫ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏',
      data: zones
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏'
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
export async function calculateBulkShipping(
  orderIds: string[],
  packageType: 'box' | 'package' = 'box',
  currency: 'UAH' | 'USD' = 'USD'
): Promise<ShippingResult> {
  try {
    const results = []
    let totalCost = 0
    let errors = 0

    for (const orderId of orderIds) {
      const result = await calculateOrderShipping(orderId, packageType, currency)
      
      if (result.success && result.data) {
        results.push({
          orderId,
          cost: result.data.totalCost,
          weight: result.data.totalWeight,
          destination: result.data.destination
        })
        totalCost += result.data.totalCost
      } else {
        errors++
        results.push({
          orderId,
          error: result.error
        })
      }
    }

    return {
      success: true,
      message: '–ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      data: {
        processed: orderIds.length,
        successful: orderIds.length - errors,
        errors,
        totalCost,
        currency,
        results
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏'
    }
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è Telegram
export function formatShippingResult(result: ShippingResult): string {
  if (!result.success) {
    return `‚ùå ${escapeMarkdownV2(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}`
  }

  const data = result.data
  if (!data) {
    return `‚úÖ ${escapeMarkdownV2(result.message)}`
  }

  let response = `‚úÖ ${escapeMarkdownV2(result.message)}`

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  if (data.totalCost !== undefined) {
    response += `\n\nüìã *–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:*`
    if (data.orderId) response += `\nüÜî –ó–∞–∫–∞–∑: ${escapeMarkdownV2(data.orderId)}`
    if (data.destination) response += `\nüåç –°—Ç—Ä–∞–Ω–∞: ${escapeMarkdownV2(data.destination)}`
    if (data.zone) response += `\nüìç –ó–æ–Ω–∞: ${escapeMarkdownV2(data.zone)}`
    response += `\n‚öñÔ∏è –í–µ—Å: ${escapeMarkdownV2(data.totalWeight.toString())} –∫–≥`
    response += `\nüì¶ –¢–∏–ø: ${escapeMarkdownV2(data.packageType)}`
    response += `\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${escapeMarkdownV2(data.totalCost.toString())} ${escapeMarkdownV2(data.currency)}`
    response += `\nüöö –°—Ä–æ–∫: ${escapeMarkdownV2(data.deliveryTime)}`
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
  if (data.deliveryStatus) {
    response += `\n\nüì¶ *–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*`
    response += `\nüÜî –ó–∞–∫–∞–∑: ${escapeMarkdownV2(data.orderId)}`
    response += `\nüìä –°—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(data.deliveryStatus)}`
    if (data.trackingNumber) {
      response += `\nüîç –¢—Ä–µ–∫\\-–Ω–æ–º–µ—Ä: ${escapeMarkdownV2(data.trackingNumber)}`
    }
    if (data.shippedAt) {
      response += `\nüìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${escapeMarkdownV2(new Date(data.shippedAt).toLocaleDateString('ru-RU'))}`
    }
    if (data.estimatedDelivery) {
      response += `\nüìÖ –û–∂–∏–¥–∞–µ—Ç—Å—è: ${escapeMarkdownV2(new Date(data.estimatedDelivery).toLocaleDateString('ru-RU'))}`
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
  if (data.ukraine || data.europe || data.usa) {
    response += `\n\nüåç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏:*`
    Object.entries(data).forEach(([zoneKey, zone]: [string, any]) => {
      if (zone.name && zone.countries) {
        response += `\n\nüìç *${escapeMarkdownV2(zone.name)}*`
        response += `\n‚è±Ô∏è –°—Ä–æ–∫: ${escapeMarkdownV2(zone.deliveryTime)}`
        response += `\n‚öñÔ∏è –ú–∞–∫—Å\\. –≤–µ—Å: ${escapeMarkdownV2(zone.maxWeight.toString())} –∫–≥`
        response += `\nüåê –°—Ç—Ä–∞–Ω—ã: ${escapeMarkdownV2(zone.countries.length.toString())} —Å—Ç—Ä–∞–Ω`
      }
    })
  }

  return response
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
export function formatBulkShippingResult(result: ShippingResult): string {
  if (!result.success) {
    return `‚ùå ${escapeMarkdownV2(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}`
  }

  const data = result.data
  if (!data) {
    return `‚úÖ ${escapeMarkdownV2(result.message)}`
  }

  let response = `üì¶ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:*`
  response += `\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${escapeMarkdownV2(data.successful.toString())}`
  response += `\n‚ùå –û—à–∏–±–æ–∫: ${escapeMarkdownV2(data.errors.toString())}`
  response += `\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${escapeMarkdownV2(data.totalCost.toString())} ${escapeMarkdownV2(data.currency)}`

  if (data.results && data.results.length > 0) {
    response += `\n\nüìã *–î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º:*`
    data.results.slice(0, 10).forEach((result: any) => {
      if (result.error) {
        response += `\n‚ùå ${escapeMarkdownV2(result.orderId)}: ${escapeMarkdownV2(result.error)}`
      } else {
        response += `\n‚úÖ ${escapeMarkdownV2(result.orderId)}: ${escapeMarkdownV2(result.cost.toString())} ${escapeMarkdownV2(data.currency)} \\(${escapeMarkdownV2(result.weight.toString())} –∫–≥\\)`
      }
    })
    
    if (data.results.length > 10) {
      response += `\n\\.\\.\\. –∏ –µ—â–µ ${escapeMarkdownV2((data.results.length - 10).toString())} –∑–∞–∫–∞–∑–æ–≤`
    }
  }

  return response
}