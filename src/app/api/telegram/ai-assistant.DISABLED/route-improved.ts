import { Bot, webhookCallback, InlineKeyboard } from 'grammy'
import { NextRequest, NextResponse } from 'next/server'
import { GoogleGenerativeAI } from '@google/generative-ai'

// Import all comprehensive handler modules
import * as OrderHandlers from './handlers/order-handlers'
import * as ProductHandlers from './handlers/product-handlers'
import * as CategoryHandlers from './handlers/category-handlers'
import * as VideoHandlers from './handlers/video-handlers'
import * as CrmHandlers from './handlers/crm-handlers'
import * as StatsHandlers from './handlers/stats-handlers'
import * as ReviewHandlers from './handlers/review-handlers'
import * as DeliveryHandlers from './handlers/delivery-handlers'
import * as PaymentHandlers from './handlers/payment-handlers'
import * as SystemHandlers from './handlers/system-handlers'
import * as AiHandlers from './handlers/ai-handlers'
import * as MarketingHandlers from './handlers/marketing-handlers'

// Import utilities and managers
import { escapeMarkdownV2, formatDate, formatPrice } from './utils'
import { rateLimiter } from './rate-limiter'
import { confirmationManager } from './confirmation-manager'
import { logAIInteraction, logError, logAction } from './logging-manager'

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7700098378:AAGZ1zZOxiwXbJeknO9SvyN25KvfWQkQNrI'
const ADMIN_IDS = (process.env.TELEGRAM_OWNER_CHAT_ID || '316593422,1837334996').split(',')
const GEMINI_API_KEY = process.env.GEMINI_API_KEY!

// Initialize Gemini
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY)
const model = genAI.getGenerativeModel({ 
  model: 'gemini-1.5-flash',
  generationConfig: {
    temperature: 0.1,
    topP: 0.8,
    maxOutputTokens: 1024,
  }
})

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const SYSTEM_PROMPT = `–¢—ã AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ VOBVOROT. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{
  "action": "string",
  "params": {},
  "needConfirm": boolean
}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (12 –∫–∞—Ç–µ–≥–æ—Ä–∏–π):

–ó–ê–ö–ê–ó–´: view_orders, search_order, order_details, update_order_status, add_tracking, cancel_order
–¢–û–í–ê–†–´: add_product, edit_product, search_product, view_products, update_product_price, delete_product
–ö–ê–¢–ï–ì–û–†–ò–ò: add_category, view_categories, edit_category, delete_category
–í–ò–î–ï–û: upload_main_video, view_main_videos, delete_main_video, upload_sign_video, view_sign_videos
CRM: search_customer, customer_details, customer_history, top_customers, customer_segmentation
–°–¢–ê–¢–ò–°–¢–ò–ö–ê: general_stats, sales_report, revenue_analysis, top_products_report, customer_analytics
–û–¢–ó–´–í–´: view_reviews, moderate_review, respond_to_review, review_analytics
–î–û–°–¢–ê–í–ö–ê: calculate_shipping, shipping_zones, track_shipment, delivery_performance
–ü–õ–ê–¢–ï–ñ–ò: process_payment, refund_payment, view_payments, payment_statistics
–°–ò–°–¢–ï–ú–ê: system_status, database_backup, system_logs, clear_cache, health_check
AI: auto_restock, price_optimization, sales_forecasting, inventory_optimization
–ú–ê–†–ö–ï–¢–ò–ù–ì: create_promo_code, view_promo_codes, email_campaign, social_media_post

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ params –æ–±—ä–µ–∫—Ç–µ. needConfirm=true –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (delete, refund, update_status).

–ü—Ä–∏–º–µ—Ä—ã:
"–ø–æ–∫–∞–∂–∏ –∑–∞–∫–∞–∑—ã" ‚Üí {"action":"view_orders","params":{},"needConfirm":false}
"–¥–æ–±–∞–≤—å –ø–ª–∞—Ç—å–µ –∑–∞ 2500" ‚Üí {"action":"add_product","params":{"name":"–ø–ª–∞—Ç—å–µ","price":2500},"needConfirm":false}
"–Ω–∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ –º–∞—Ä–∏—è" ‚Üí {"action":"search_customer","params":{"query":"–º–∞—Ä–∏—è"},"needConfirm":false}
"—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é" ‚Üí {"action":"general_stats","params":{"period":"week"},"needConfirm":false}
"—É–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä 123" ‚Üí {"action":"delete_product","params":{"productId":"123"},"needConfirm":true}
"–≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ 456" ‚Üí {"action":"refund_payment","params":{"paymentId":"456"},"needConfirm":true}

–í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ markdown –±–ª–æ–∫–æ–≤!`

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
async function createBot() {
  const bot = new Bot(BOT_TOKEN)
  await bot.init()

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
  function isAdmin(userId: string): boolean {
    return ADMIN_IDS.includes(userId)
  }

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ —Å retry –ª–æ–≥–∏–∫–æ–π
  async function analyzeMessage(text: string, userId: string, retryCount = 0): Promise<any> {
    const startTime = Date.now()
    const maxRetries = 2
    
    try {
      const prompt = `${SYSTEM_PROMPT}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: "${text}"\n\n–û—Ç–≤–µ—Ç JSON:`
      
      const result = await model.generateContent(prompt)
      const response = await result.response
      let responseText = response.text()
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
      responseText = responseText
        .replace(/```json\s*/gi, '')
        .replace(/```\s*/g, '')
        .replace(/^[^{]*({.*})[^}]*$/s, '$1')
        .trim()
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
      let parsedResult
      try {
        parsedResult = JSON.parse(responseText)
      } catch (parseError) {
        // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ JSON
        const fixedText = responseText
          .replace(/'/g, '"')
          .replace(/([{,]\s*)(\w+):/g, '$1"$2":')
          .replace(/:\s*([^",{\[\d][^",}]*)/g, ':"$1"')
        
        parsedResult = JSON.parse(fixedText)
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      if (!parsedResult.action || typeof parsedResult.action !== 'string') {
        throw new Error('Invalid response structure: missing action')
      }
      
      if (!parsedResult.params || typeof parsedResult.params !== 'object') {
        parsedResult.params = {}
      }
      
      if (typeof parsedResult.needConfirm !== 'boolean') {
        parsedResult.needConfirm = false
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
      const duration = Date.now() - startTime
      await logAIInteraction(userId, text, parsedResult.action, parsedResult.params, duration)
      
      return parsedResult
    } catch (error) {
      console.error(`AI analysis error (attempt ${retryCount + 1}):`, error)
      
      // Retry –ª–æ–≥–∏–∫–∞
      if (retryCount < maxRetries) {
        await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)))
        return analyzeMessage(text, userId, retryCount + 1)
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      await logError(userId, 'ai_analysis', error, { userMessage: text, retryCount })
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
      return { action: 'unknown', params: { originalMessage: text }, needConfirm: false }
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
  bot.command('start', async (ctx) => {
    if (!ctx.from || !isAdmin(ctx.from.id.toString())) {
      await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É')
      return
    }

    const keyboard = new InlineKeyboard()
      .text('üì¶ –ó–∞–∫–∞–∑—ã', 'help_orders')
      .text('üõç –¢–æ–≤–∞—Ä—ã', 'help_products').row()
      .text('üë• –ö–ª–∏–µ–Ω—Ç—ã', 'help_customers')
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'help_stats').row()
      .text('üí≥ –ü–ª–∞—Ç–µ–∂–∏', 'help_payments')
      .text('üöö –î–æ—Å—Ç–∞–≤–∫–∞', 'help_delivery')

    await ctx.reply(
      'ü§ñ *AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç VOBVOROT v2\\.0*\\n\\n' +
      '‚ú® –¢–µ–ø–µ—Ä—å —Å **106 —Ñ—É–Ω–∫—Ü–∏—è–º–∏** –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π AI –æ–±—Ä–∞–±–æ—Ç–∫–æ–π\\!\\n\\n' +
      'üí¨ –ü–∏—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏:\\n' +
      '‚Ä¢ "–ü–æ–∫–∞–∂–∏ –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"\\n' +
      '‚Ä¢ "–î–æ–±–∞–≤—å —Ç–æ–≤–∞—Ä —é–±–∫–∞ –∑–∞ 1500"\\n' +
      '‚Ä¢ "–ù–∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email"\\n' +
      '‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ –º–µ—Å—è—Ü"\\n\\n' +
      'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤:',
      { 
        parse_mode: 'MarkdownV2',
        reply_markup: keyboard
      }
    )
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query:data', async (ctx) => {
    const data = ctx.callbackQuery.data
    let examples = ''

    switch (data) {
      case 'help_orders':
        examples = 'üì¶ *–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:*\\n\\n' +
          '‚Ä¢ –ü–æ–∫–∞–∂–∏ –∑–∞–∫–∞–∑—ã\\n' +
          '‚Ä¢ –ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\\n' +
          '‚Ä¢ –ù–∞–π–¥–∏ –∑–∞–∫–∞–∑ 123\\n' +
          '‚Ä¢ –û–±–Ω–æ–≤–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ 456 –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\\n' +
          '‚Ä¢ –î–æ–±–∞–≤—å —Ç—Ä–µ–∫\\-–Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ 789'
        break
      case 'help_products':
        examples = 'üõç *–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤:*\\n\\n' +
          '‚Ä¢ –î–æ–±–∞–≤—å –ø–ª–∞—Ç—å–µ –∑–∞ 2500\\n' +
          '‚Ä¢ –ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä —é–±–∫–∞\\n' +
          '‚Ä¢ –û–±–Ω–æ–≤–∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ 123 –Ω–∞ 1800\\n' +
          '‚Ä¢ –ü–æ–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º\\n' +
          '‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ –º–µ—Å—è—Ü'
        break
      case 'help_customers':
        examples = 'üë• *–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:*\\n\\n' +
          '‚Ä¢ –ù–∞–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ú–∞—Ä–∏—è\\n' +
          '‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email\\n' +
          '‚Ä¢ –õ—É—á—à–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ –º–µ—Å—è—Ü\\n' +
          '‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤\\n' +
          '‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã'
        break
      case 'help_stats':
        examples = 'üìä *–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:*\\n\\n' +
          '‚Ä¢ –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\\n' +
          '‚Ä¢ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é\\n' +
          '‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º\\n' +
          '‚Ä¢ –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –∑–∞ –≥–æ–¥\\n' +
          '‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∏ –≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂'
        break
      case 'help_payments':
        examples = 'üí≥ *–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π:*\\n\\n' +
          '‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ 123\\n' +
          '‚Ä¢ –°–¥–µ–ª–∞–π –≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ 456\\n' +
          '‚Ä¢ –ü–æ–∫–∞–∂–∏ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –¥–µ–Ω—å\\n' +
          '‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π\\n' +
          '‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏'
        break
      case 'help_delivery':
        examples = 'üöö *–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:*\\n\\n' +
          '‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞–π –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ 789\\n' +
          '‚Ä¢ –ó–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏\\n' +
          '‚Ä¢ –û—Ç—Å–ª–µ–¥–∏ –ø–æ—Å—ã–ª–∫—É ABC123\\n' +
          '‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\\n' +
          '‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤'
        break
    }

    await ctx.editMessageText(examples, { parse_mode: 'MarkdownV2' })
    await ctx.answerCallbackQuery()
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  bot.on('message:text', async (ctx) => {
    if (!ctx.from || !isAdmin(ctx.from.id.toString())) return

    const userId = ctx.from.id.toString()
    const messageText = ctx.message.text.toLowerCase().trim()

    // Rate limiting
    const rateCheck = rateLimiter.checkUserLimit(userId)
    if (!rateCheck.allowed) {
      await ctx.reply(
        `‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤\\! –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${rateCheck.resetIn} —Å–µ–∫—É–Ω–¥\\.`,
        { parse_mode: 'MarkdownV2' }
      )
      return
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    if (['–¥–∞', 'yes', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'].includes(messageText)) {
      const confirmation = confirmationManager.getLastConfirmation(userId)
      if (confirmation) {
        await executeAction(ctx, confirmation.action, confirmation.params)
        return
      } else {
        await ctx.reply('‚ùå –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
        return
      }
    } 
    
    if (['–Ω–µ—Ç', 'no', '–æ—Ç–º–µ–Ω–∞', 'cancel'].includes(messageText)) {
      confirmationManager.cancelUserConfirmations(userId)
      await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
      return
    }

    // –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ AI
    const quickCommands: Record<string, any> = {
      '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': { action: 'general_stats', params: {}, needConfirm: false },
      '–∑–∞–∫–∞–∑—ã': { action: 'view_orders', params: {}, needConfirm: false },
      '—Ç–æ–≤–∞—Ä—ã': { action: 'view_products', params: {}, needConfirm: false },
      '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏': { action: 'view_categories', params: {}, needConfirm: false },
      'help': { action: 'help', params: {}, needConfirm: false }
    }

    if (quickCommands[messageText]) {
      await executeAction(ctx, quickCommands[messageText].action, quickCommands[messageText].params)
      return
    }

    // AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const typingAction = ctx.replyWithChatAction('typing')
    
    try {
      const result = await analyzeMessage(ctx.message.text, userId)
      console.log('AI analysis result:', result)
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      if (result.needConfirm) {
        confirmationManager.createConfirmation(
          userId,
          result.action,
          result.params,
          ctx.message.message_id
        )
        
        await ctx.reply(
          `‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\\!*\\n\\n` +
          `–î–µ–π—Å—Ç–≤–∏–µ: *${escapeMarkdownV2(result.action)}*\\n` +
          `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${escapeMarkdownV2(JSON.stringify(result.params))}\\n\\n` +
          `–û—Ç–ø—Ä–∞–≤—å—Ç–µ *"–¥–∞"* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ *"–Ω–µ—Ç"* –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.`,
          { parse_mode: 'MarkdownV2' }
        )
        return
      }
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      await executeAction(ctx, result.action, result.params)
    } catch (error) {
      console.error('Message handling error:', error)
      await logError(userId, 'message_processing', error)
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.')
    } finally {
      typingAction.then(t => t.delete().catch(() => {}))
    }
  })

  return bot
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è
function getCategoryFromAction(action: string): 'command' | 'error' | 'ai_request' | 'ai_response' | 'system' | 'payment' | 'email' | 'delivery' {
  if (action.includes('payment') || action.includes('refund')) return 'payment'
  if (action.includes('email') || action.includes('send_')) return 'email'
  if (action.includes('shipping') || action.includes('delivery') || action.includes('tracking')) return 'delivery'
  if (action === 'unknown') return 'error'
  if (action.includes('logs') || action.includes('statistics') || action.includes('cleanup')) return 'system'
  return 'command'
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
async function executeAction(ctx: any, action: string, params: any) {
  const userId = ctx.from?.id?.toString() || 'unknown'
  const username = ctx.from?.username || ctx.from?.first_name
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
  await logAction({
    userId,
    username,
    action,
    category: getCategoryFromAction(action),
    details: params
  })
  
  try {
    switch (action) {
      // === –ó–ê–ö–ê–ó–´ (15 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'view_orders':
        await OrderHandlers.handleViewOrders(ctx, params)
        break
      case 'search_order':
        await OrderHandlers.handleSearchOrder(ctx, params)
        break
      case 'order_details':
        await OrderHandlers.handleOrderDetails(ctx, params)
        break
      case 'update_order_status':
        await OrderHandlers.handleUpdateOrderStatus(ctx, params)
        break
      case 'add_tracking':
        await OrderHandlers.handleAddTracking(ctx, params)
        break
      case 'cancel_order':
        await OrderHandlers.handleCancelOrder(ctx, params)
        break
      case 'order_history':
        await OrderHandlers.handleOrderHistory(ctx, params)
        break
      case 'bulk_order_update':
        await OrderHandlers.handleBulkOrderUpdate(ctx, params)
        break
      case 'pending_orders':
        await OrderHandlers.handlePendingOrders(ctx, params)
        break
      case 'today_orders':
        await OrderHandlers.handleTodayOrders(ctx, params)
        break
      case 'urgent_orders':
        await OrderHandlers.handleUrgentOrders(ctx, params)
        break
      case 'problem_orders':
        await OrderHandlers.handleProblemOrders(ctx, params)
        break
      case 'export_orders':
        await OrderHandlers.handleExportOrders(ctx, params)
        break
      case 'order_analytics':
        await OrderHandlers.handleOrderAnalytics(ctx, params)
        break
      case 'duplicate_orders':
        await OrderHandlers.handleDuplicateOrders(ctx, params)
        break
      
      // === –¢–û–í–ê–†–´ (20 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'add_product':
        await ProductHandlers.handleAddProduct(ctx, params)
        break
      case 'edit_product':
        await ProductHandlers.handleEditProduct(ctx, params)
        break
      case 'delete_product':
        await ProductHandlers.handleDeleteProduct(ctx, params)
        break
      case 'search_product':
        await ProductHandlers.handleSearchProduct(ctx, params)
        break
      case 'view_products':
        await ProductHandlers.handleViewProducts(ctx, params)
        break
      case 'update_product_price':
        await ProductHandlers.handleUpdateProductPrice(ctx, params)
        break
      case 'update_product_stock':
        await ProductHandlers.handleUpdateProductStock(ctx, params)
        break
      case 'product_details':
        await ProductHandlers.handleProductDetails(ctx, params)
        break
      case 'low_stock_products':
        await ProductHandlers.handleLowStockProducts(ctx, params)
        break
      case 'top_products':
        await ProductHandlers.handleTopProducts(ctx, params)
        break
      case 'product_analytics':
        await ProductHandlers.handleProductAnalytics(ctx, params)
        break
      case 'duplicate_products':
        await ProductHandlers.handleDuplicateProducts(ctx, params)
        break
      case 'bulk_price_update':
        await ProductHandlers.handleBulkPriceUpdate(ctx, params)
        break
      case 'import_products':
        await ProductHandlers.handleImportProducts(ctx, params)
        break
      case 'export_products':
        await ProductHandlers.handleExportProducts(ctx, params)
        break
      case 'product_recommendations':
        await ProductHandlers.handleProductRecommendations(ctx, params)
        break
      case 'set_product_featured':
        await ProductHandlers.handleSetProductFeatured(ctx, params)
        break
      case 'product_variants':
        await ProductHandlers.handleProductVariants(ctx, params)
        break
      case 'product_reviews_summary':
        await ProductHandlers.handleProductReviewsSummary(ctx, params)
        break
      case 'archive_products':
        await ProductHandlers.handleArchiveProducts(ctx, params)
        break
      
      // === –ö–ê–¢–ï–ì–û–†–ò–ò (6 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'add_category':
        await CategoryHandlers.handleAddCategory(ctx, params)
        break
      case 'view_categories':
        await CategoryHandlers.handleViewCategories(ctx, params)
        break
      case 'edit_category':
        await CategoryHandlers.handleEditCategory(ctx, params)
        break
      case 'delete_category':
        await CategoryHandlers.handleDeleteCategory(ctx, params)
        break
      case 'reorder_categories':
        await CategoryHandlers.handleReorderCategories(ctx, params)
        break
      case 'category_stats':
        await CategoryHandlers.handleCategoryStats(ctx, params)
        break
      
      // === –í–ò–î–ï–û (10 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'upload_main_video':
        await VideoHandlers.handleUploadMainVideo(ctx, params)
        break
      case 'view_main_videos':
        await VideoHandlers.handleViewMainVideos(ctx, params)
        break
      case 'delete_main_video':
        await VideoHandlers.handleDeleteMainVideo(ctx, params)
        break
      case 'upload_product_video':
        await VideoHandlers.handleUploadProductVideo(ctx, params)
        break
      case 'view_product_videos':
        await VideoHandlers.handleViewProductVideos(ctx, params)
        break
      case 'delete_product_video':
        await VideoHandlers.handleDeleteProductVideo(ctx, params)
        break
      case 'upload_sign_video':
        await VideoHandlers.handleUploadSignVideo(ctx, params)
        break
      case 'view_sign_videos':
        await VideoHandlers.handleViewSignVideos(ctx, params)
        break
      case 'delete_sign_video':
        await VideoHandlers.handleDeleteSignVideo(ctx, params)
        break
      case 'video_analytics':
        await VideoHandlers.handleVideoAnalytics(ctx, params)
        break
      
      // === CRM –ò –ö–õ–ò–ï–ù–¢–´ (16 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'search_customer':
        await CrmHandlers.handleSearchCustomer(ctx, params)
        break
      case 'customer_details':
        await CrmHandlers.handleCustomerDetails(ctx, params)
        break
      case 'customer_history':
        await CrmHandlers.handleCustomerHistory(ctx, params)
        break
      case 'add_customer_note':
        await CrmHandlers.handleAddCustomerNote(ctx, params)
        break
      case 'top_customers':
        await CrmHandlers.handleTopCustomers(ctx, params)
        break
      case 'customer_segmentation':
        await CrmHandlers.handleCustomerSegmentation(ctx, params)
        break
      case 'inactive_customers':
        await CrmHandlers.handleInactiveCustomers(ctx, params)
        break
      case 'new_customers':
        await CrmHandlers.handleNewCustomers(ctx, params)
        break
      case 'customer_lifetime_value':
        await CrmHandlers.handleCustomerLifetimeValue(ctx, params)
        break
      case 'customer_recommendations':
        await CrmHandlers.handleCustomerRecommendations(ctx, params)
        break
      case 'export_customers':
        await CrmHandlers.handleExportCustomers(ctx, params)
        break
      case 'merge_customers':
        await CrmHandlers.handleMergeCustomers(ctx, params)
        break
      case 'customer_tags':
        await CrmHandlers.handleCustomerTags(ctx, params)
        break
      case 'add_customer_tag':
        await CrmHandlers.handleAddCustomerTag(ctx, params)
        break
      case 'remove_customer_tag':
        await CrmHandlers.handleRemoveCustomerTag(ctx, params)
        break
      case 'customer_communication_log':
        await CrmHandlers.handleCustomerCommunicationLog(ctx, params)
        break
      
      // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê (15 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'general_stats':
      case 'stats':
        await StatsHandlers.handleGeneralStats(ctx, params)
        break
      case 'sales_report':
        await StatsHandlers.handleSalesReport(ctx, params)
        break
      case 'revenue_analysis':
        await StatsHandlers.handleRevenueAnalysis(ctx, params)
        break
      case 'top_products_report':
        await StatsHandlers.handleTopProductsReport(ctx, params)
        break
      case 'customer_analytics':
        await StatsHandlers.handleCustomerAnalytics(ctx, params)
        break
      case 'conversion_analysis':
        await StatsHandlers.handleConversionAnalysis(ctx, params)
        break
      case 'traffic_sources':
        await StatsHandlers.handleTrafficSources(ctx, params)
        break
      case 'abandon_cart_analysis':
        await StatsHandlers.handleAbandonCartAnalysis(ctx, params)
        break
      case 'seasonal_trends':
        await StatsHandlers.handleSeasonalTrends(ctx, params)
        break
      case 'geo_analytics':
        await StatsHandlers.handleGeoAnalytics(ctx, params)
        break
      case 'profit_margins':
        await StatsHandlers.handleProfitMargins(ctx, params)
        break
      case 'inventory_turnover':
        await StatsHandlers.handleInventoryTurnover(ctx, params)
        break
      case 'compare_periods':
        await StatsHandlers.handleComparePeriods(ctx, params)
        break
      case 'forecast_analysis':
        await StatsHandlers.handleForecastAnalysis(ctx, params)
        break
      case 'kpi_dashboard':
        await StatsHandlers.handleKpiDashboard(ctx, params)
        break
      
      // === –û–¢–ó–´–í–´ (6 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'view_reviews':
        await ReviewHandlers.handleViewReviews(ctx, params)
        break
      case 'moderate_review':
        await ReviewHandlers.handleModerateReview(ctx, params)
        break
      case 'respond_to_review':
        await ReviewHandlers.handleRespondToReview(ctx, params)
        break
      case 'review_analytics':
        await ReviewHandlers.handleReviewAnalytics(ctx, params)
        break
      case 'export_reviews':
        await ReviewHandlers.handleExportReviews(ctx, params)
        break
      case 'flag_review':
        await ReviewHandlers.handleFlagReview(ctx, params)
        break
      
      // === –î–û–°–¢–ê–í–ö–ê (10 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'calculate_shipping':
        await DeliveryHandlers.handleCalculateShipping(ctx, params)
        break
      case 'shipping_zones':
        await DeliveryHandlers.handleShippingZones(ctx, params)
        break
      case 'update_shipping_rates':
        await DeliveryHandlers.handleUpdateShippingRates(ctx, params)
        break
      case 'track_shipment':
        await DeliveryHandlers.handleTrackShipment(ctx, params)
        break
      case 'bulk_shipping_labels':
        await DeliveryHandlers.handleBulkShippingLabels(ctx, params)
        break
      case 'shipping_analytics':
        await DeliveryHandlers.handleShippingAnalytics(ctx, params)
        break
      case 'delivery_performance':
        await DeliveryHandlers.handleDeliveryPerformance(ctx, params)
        break
      case 'shipping_issues':
        await DeliveryHandlers.handleShippingIssues(ctx, params)
        break
      case 'carrier_comparison':
        await DeliveryHandlers.handleCarrierComparison(ctx, params)
        break
      case 'delivery_time_analysis':
        await DeliveryHandlers.handleDeliveryTimeAnalysis(ctx, params)
        break
      
      // === –ü–õ–ê–¢–ï–ñ–ò (8 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'process_payment':
        await PaymentHandlers.handleProcessPayment(ctx, params)
        break
      case 'refund_payment':
        await PaymentHandlers.handleRefundPayment(ctx, params)
        break
      case 'view_payments':
        await PaymentHandlers.handleViewPayments(ctx, params)
        break
      case 'payment_statistics':
        await PaymentHandlers.handlePaymentStatistics(ctx, params)
        break
      case 'failed_payments':
        await PaymentHandlers.handleFailedPayments(ctx, params)
        break
      case 'update_payment_status':
        await PaymentHandlers.handleUpdatePaymentStatus(ctx, params)
        break
      case 'export_payments':
        await PaymentHandlers.handleExportPayments(ctx, params)
        break
      case 'recurring_payments':
        await PaymentHandlers.handleRecurringPayments(ctx, params)
        break
      
      // === –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò (10 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'system_status':
        await SystemHandlers.handleSystemStatus(ctx, params)
        break
      case 'database_backup':
        await SystemHandlers.handleDatabaseBackup(ctx, params)
        break
      case 'system_logs':
        await SystemHandlers.handleSystemLogs(ctx, params)
        break
      case 'clear_cache':
        await SystemHandlers.handleClearCache(ctx, params)
        break
      case 'system_maintenance':
        await SystemHandlers.handleSystemMaintenance(ctx, params)
        break
      case 'health_check':
        await SystemHandlers.handleHealthCheck(ctx, params)
        break
      case 'system_configuration':
        await SystemHandlers.handleSystemConfiguration(ctx, params)
        break
      case 'restart_service':
        await SystemHandlers.handleRestartService(ctx, params)
        break
      case 'system_analytics':
        await SystemHandlers.handleSystemAnalytics(ctx, params)
        break
      case 'system_notifications':
        await SystemHandlers.handleSystemNotifications(ctx, params)
        break
      
      // === AI –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø (5 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'auto_restock':
        await AiHandlers.handleAutoRestock(ctx, params)
        break
      case 'price_optimization':
        await AiHandlers.handlePriceOptimization(ctx, params)
        break
      case 'sales_forecasting':
        await AiHandlers.handleSalesForecasting(ctx, params)
        break
      case 'customer_segmentation_ai':
        await AiHandlers.handleCustomerSegmentation(ctx, params)
        break
      case 'inventory_optimization':
        await AiHandlers.handleInventoryOptimization(ctx, params)
        break
      
      // === –ú–ê–†–ö–ï–¢–ò–ù–ì –ò –ü–†–û–ú–û (5 —Ñ—É–Ω–∫—Ü–∏–π) ===
      case 'create_promo_code':
        await MarketingHandlers.handleCreatePromoCode(ctx, params)
        break
      case 'view_promo_codes':
        await MarketingHandlers.handleViewPromoCodes(ctx, params)
        break
      case 'email_campaign':
        await MarketingHandlers.handleEmailCampaign(ctx, params)
        break
      case 'analytics_report':
        await MarketingHandlers.handleAnalyticsReport(ctx, params)
        break
      case 'social_media_post':
        await MarketingHandlers.handleSocialMediaPost(ctx, params)
        break
      
      // === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
      case 'help':
        await ctx.reply(
          'üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞*\\n\\n' +
          'üéØ **–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ 106 —Ñ—É–Ω–∫—Ü–∏–π –≤ 12 –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:**\\n\\n' +
          'üì¶ –ó–∞–∫–∞–∑—ã \\(15\\): —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\\n' +
          'üõç –¢–æ–≤–∞—Ä—ã \\(20\\): –∫–∞—Ç–∞–ª–æ–≥ –∏ –æ—Å—Ç–∞—Ç–∫–∏\\n' +
          'üë• CRM \\(16\\): —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\\n' +
          'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ \\(15\\): –æ—Ç—á–µ—Ç—ã –∏ –º–µ—Ç—Ä–∏–∫–∏\\n' +
          'üí≥ –ü–ª–∞—Ç–µ–∂–∏ \\(8\\): –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π\\n' +
          'üöö –î–æ—Å—Ç–∞–≤–∫–∞ \\(10\\): –ª–æ–≥–∏—Å—Ç–∏–∫–∞\\n' +
          '‚≠ê –û—Ç–∑—ã–≤—ã \\(6\\): –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤\\n' +
          'üé¨ –í–∏–¥–µ–æ \\(10\\): –∫–æ–Ω—Ç–µ–Ω—Ç\\-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\\n' +
          'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ \\(6\\): —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞\\n' +
          'üîß –°–∏—Å—Ç–µ–º–∞ \\(10\\): –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ\\n' +
          'ü§ñ AI \\(5\\): –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\\n' +
          'üì¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ \\(5\\): –ø—Ä–æ–º–æ –∏ —Ä–µ–∫–ª–∞–º–∞\\n\\n' +
          'üí° –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º\\!',
          { parse_mode: 'MarkdownV2' }
        )
        break
      
      case 'unknown':
      default:
        await ctx.reply(
          'ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\\n\\n' +
          '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —Ñ—Ä–∞–∑—ã\\n' +
          '‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\\n' +
          '‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –ø–æ–º–æ—â–∏\\n\\n' +
          'üìö –î–æ—Å—Ç—É–ø–Ω–æ **106 —Ñ—É–Ω–∫—Ü–∏–π** –≤ 12 –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\\!',
          { parse_mode: 'MarkdownV2' }
        )
        break
    }
  } catch (error) {
    console.error(`Error executing action ${action}:`, error)
    await logError(userId, action, error, params)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

// Webhook handler
export async function POST(req: NextRequest) {
  try {
    console.log('Webhook request received - AI Assistant v2.0')
    
    const bot = await createBot()
    
    const secretToken = process.env.TELEGRAM_WEBHOOK_SECRET?.trim() || 'vobvorot_webhook_secret_2025'
    const handleUpdate = webhookCallback(bot, 'std/http', {
      secretToken: secretToken
    })
    
    return handleUpdate(req)
  } catch (error) {
    console.error('Webhook error:', error)
    return new Response('Error', { status: 500 })
  }
}