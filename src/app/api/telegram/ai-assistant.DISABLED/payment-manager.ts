// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏ –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate, formatPrice } from './utils'

const ADMIN_API_KEY = process.env.ADMIN_API_KEY || process.env.INTERNAL_API_KEY || 'fallback-key'
const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'https://vobvorot.com'

// –ö–µ—à –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π (TTL: 60 —Å–µ–∫—É–Ω–¥)
const statusCache = new Map<string, { 
  data: any, 
  timestamp: number 
}>()

const CACHE_TTL = 60000 // 60 —Å–µ–∫—É–Ω–¥

export interface RefundResult {
  success: boolean
  refundId?: string
  refundAmount?: number
  message?: string
  error?: string
}

export interface PaymentInfo {
  orderId: string
  orderNumber: string
  total: number
  paymentStatus: string
  paymentMethod?: string
  paymentId?: string
  canRefund: boolean
  refundedAmount: number
  maxRefundAmount: number
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  orderStatus?: string
  customerName?: string
  customerEmail?: string
  itemsCount?: number
  createdAt?: Date
}

// –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
export async function refundPayment(
  orderId: string, 
  reason: string, 
  amount?: number
): Promise<RefundResult> {
  try {
    const response = await fetch(`${BASE_URL}/api/orders/${orderId}/refund`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${ADMIN_API_KEY}`
      },
      body: JSON.stringify({
        reason,
        amount,
        adminId: 'telegram-ai-assistant',
        notifyCustomer: true
      })
    })
    
    const data = await response.json()
    
    if (!response.ok) {
      return {
        success: false,
        error: data.error || `HTTP ${response.status}`
      }
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
    clearPaymentCache(orderId)
    
    return {
      success: true,
      refundId: data.refundId,
      refundAmount: data.refundAmount,
      message: data.message
    }
  } catch (error: any) {
    console.error('Refund payment error:', error)
    return {
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞'
    }
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
export async function getPaymentInfo(orderId: string): Promise<PaymentInfo | null> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = `payment_info_${orderId}`
    const cached = statusCache.get(cacheKey)
    
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      return cached.data
    }
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const order = await prisma.order.findFirst({
      where: {
        OR: [
          { id: orderId },
          { orderNumber: orderId }
        ]
      },
      include: {
        customer: {
          select: {
            name: true,
            email: true,
            phone: true
          }
        },
        orderItems: {
          include: {
            product: {
              select: {
                name: true,
                price: true
              }
            }
          }
        }
      }
    })
    
    if (!order) {
      return null
    }
    
    const canRefund = order.status !== 'REFUNDED' && 
                     order.status !== 'CANCELLED' &&
                     order.paymentStatus === 'COMPLETED'
    
    const refundedAmount = order.refundAmount ? parseFloat(order.refundAmount.toString()) : 0
    const total = parseFloat(order.total.toString())
    const maxRefundAmount = total - refundedAmount
    
    const paymentInfo = {
      orderId: order.id,
      orderNumber: order.orderNumber,
      total,
      paymentStatus: order.paymentStatus,
      paymentMethod: order.paymentMethod || undefined,
      paymentId: order.paymentId || undefined,
      canRefund,
      refundedAmount,
      maxRefundAmount,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      orderStatus: order.status,
      customerName: order.customer?.name,
      customerEmail: order.customer?.email,
      itemsCount: order.orderItems.length,
      createdAt: order.createdAt
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    statusCache.set(cacheKey, {
      data: paymentInfo,
      timestamp: Date.now()
    })
    
    return paymentInfo
  } catch (error) {
    console.error('Get payment info error:', error)
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
export function clearPaymentCache(orderId?: string) {
  if (orderId) {
    // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    statusCache.delete(`payment_info_${orderId}`)
    statusCache.delete(`payment_status_${orderId}`)
  } else {
    // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à
    statusCache.clear()
  }
}

// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
export async function retryPayment(orderId: string): Promise<{
  success: boolean
  paymentId?: string
  formData?: any
  error?: string
}> {
  try {
    const response = await fetch(`${BASE_URL}/api/orders/${orderId}/retry-payment`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    
    const data = await response.json()
    
    if (!response.ok) {
      return {
        success: false,
        error: data.error || `HTTP ${response.status}`
      }
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–µ—Å—Å–∏–∏
    clearPaymentCache(orderId)
    
    return {
      success: true,
      paymentId: data.paymentId,
      formData: data.formData
    }
  } catch (error: any) {
    console.error('Retry payment error:', error)
    return {
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞'
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–µ—à–µ–º)
export async function checkPaymentStatus(orderId: string): Promise<string> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = `payment_status_${orderId}`
    const cached = statusCache.get(cacheKey)
    
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      return cached.data
    }
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
    const order = await prisma.order.findFirst({
      where: {
        OR: [
          { id: orderId },
          { orderNumber: orderId }
        ]
      },
      select: {
        orderNumber: true,
        paymentStatus: true,
        status: true,
        total: true,
        refundAmount: true,
        createdAt: true,
        updatedAt: true,
        paymentMethod: true,
        paymentId: true,
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
        customer: {
          select: {
            name: true,
            email: true
          }
        },
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        paymentLogs: {
          orderBy: { createdAt: 'desc' },
          take: 1,
          select: {
            status: true,
            message: true,
            createdAt: true
          }
        }
      }
    })
    
    if (!order) {
      return '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
    }
    
    let statusEmoji = '‚ùì'
    let statusText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    switch (order.paymentStatus) {
      case 'PENDING':
        statusEmoji = '‚è≥'
        statusText = '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
        break
      case 'PROCESSING':
        statusEmoji = 'üîÑ'
        statusText = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è'
        break
      case 'COMPLETED':
        statusEmoji = '‚úÖ'
        statusText = '–û–ø–ª–∞—á–µ–Ω'
        break
      case 'FAILED':
        statusEmoji = '‚ùå'
        statusText = '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã'
        break
      case 'CANCELLED':
        statusEmoji = 'üö´'
        statusText = '–û—Ç–º–µ–Ω–µ–Ω'
        break
    }
    
    let message = `üí≥ *–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ \\#${escapeMarkdownV2(order.orderNumber)}*\\n\\n`
    message += `${statusEmoji} –ü–ª–∞—Ç–µ–∂: ${escapeMarkdownV2(statusText)}\\n`
    message += `üì¶ –ó–∞–∫–∞–∑: ${escapeMarkdownV2(order.status)}\\n`
    message += `üí∞ –°—É–º–º–∞: ${escapeMarkdownV2(formatPrice(order.total))}\\n`
    
    if (order.paymentMethod) {
      message += `üí≥ –ú–µ—Ç–æ–¥: ${escapeMarkdownV2(order.paymentMethod)}\\n`
    }
    
    if (order.customer) {
      message += `\\nüë§ *–ö–ª–∏–µ–Ω—Ç:*\\n`
      message += `${escapeMarkdownV2(order.customer.name)}\\n`
      message += `${escapeMarkdownV2(order.customer.email)}\\n`
    }
    
    if (order.refundAmount && parseFloat(order.refundAmount.toString()) > 0) {
      message += `\\nüí∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${escapeMarkdownV2(formatPrice(order.refundAmount))}\\n`
    }
    
    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const lastUpdate = new Date(order.updatedAt).toLocaleString('ru')
    message += `\\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${escapeMarkdownV2(lastUpdate)}`
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    statusCache.set(cacheKey, {
      data: message,
      timestamp: Date.now()
    })
    
    return message
  } catch (error) {
    console.error('Check payment status error:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞'
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
export function formatPaymentInfo(payment: PaymentInfo): string {
  let message = `üí≥ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ*\\n\\n`
  message += `üÜî –ó–∞–∫–∞–∑: \\#${escapeMarkdownV2(payment.orderNumber)}\\n`
  message += `üí∞ –°—É–º–º–∞: ${escapeMarkdownV2(formatPrice(payment.total))}\\n`
  
  let statusEmoji = '‚ùì'
  switch (payment.paymentStatus) {
    case 'PENDING': statusEmoji = '‚è≥'; break
    case 'PROCESSING': statusEmoji = 'üîÑ'; break
    case 'COMPLETED': statusEmoji = '‚úÖ'; break
    case 'FAILED': statusEmoji = '‚ùå'; break
    case 'CANCELLED': statusEmoji = 'üö´'; break
  }
  
  message += `${statusEmoji} –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${escapeMarkdownV2(payment.paymentStatus)}\\n`
  
  if (payment.orderStatus) {
    message += `üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${escapeMarkdownV2(payment.orderStatus)}\\n`
  }
  
  if (payment.paymentMethod) {
    message += `üí≥ –ú–µ—Ç–æ–¥: ${escapeMarkdownV2(payment.paymentMethod)}\\n`
  }
  
  if (payment.paymentId) {
    message += `üîë ID –ø–ª–∞—Ç–µ–∂–∞: \\\`${escapeMarkdownV2(payment.paymentId)}\\\`\\n`
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
  if (payment.customerName || payment.customerEmail) {
    message += `\\nüë§ *–ö–ª–∏–µ–Ω—Ç:*\\n`
    if (payment.customerName) {
      message += `${escapeMarkdownV2(payment.customerName)}\\n`
    }
    if (payment.customerEmail) {
      message += `${escapeMarkdownV2(payment.customerEmail)}\\n`
    }
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
  if (payment.itemsCount) {
    message += `\\nüõç –¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: ${payment.itemsCount}\\n`
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
  message += `\\nüí∏ *–í–æ–∑–≤—Ä–∞—Ç:*\\n`
  
  if (payment.canRefund) {
    message += `‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç\\n`
    message += `üí∞ –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: ${escapeMarkdownV2(formatPrice(payment.maxRefundAmount))}\\n`
  } else {
    message += `‚ùå –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\\n`
    const reason = payment.paymentStatus !== 'COMPLETED' ? 
      '\\(–ø–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω\\)' : 
      payment.orderStatus === 'REFUNDED' ? 
      '\\(–∑–∞–∫–∞–∑ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω\\)' : 
      '\\(–∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω\\)'
    message += `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}\\n`
  }
  
  if (payment.refundedAmount > 0) {
    message += `üí∏ –£–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${escapeMarkdownV2(formatPrice(payment.refundedAmount))}\\n`
  }
  
  // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  if (payment.createdAt) {
    const createdDate = new Date(payment.createdAt).toLocaleString('ru')
    message += `\\nüìÖ –°–æ–∑–¥–∞–Ω: ${escapeMarkdownV2(createdDate)}`
  }
  
  return message
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
export function formatRefundInfo(refund: RefundResult, orderId: string): string {
  if (!refund.success) {
    return `‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ \\#${escapeMarkdownV2(orderId)}\\n\\n` +
           `–ü—Ä–∏—á–∏–Ω–∞: ${escapeMarkdownV2(refund.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}`
  }
  
  let message = `‚úÖ *–í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\\!*\\n\\n`
  message += `üÜî –ó–∞–∫–∞–∑: \\#${escapeMarkdownV2(orderId)}\\n`
  
  if (refund.refundAmount) {
    message += `üí∏ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${escapeMarkdownV2(formatPrice(refund.refundAmount))}\\n`
  }
  
  if (refund.refundId) {
    message += `üîë ID –≤–æ–∑–≤—Ä–∞—Ç–∞: \\\`${escapeMarkdownV2(refund.refundId)}\\\`\\n`
  }
  
  if (refund.message) {
    message += `\\nüìù ${escapeMarkdownV2(refund.message)}`
  }
  
  return message
}