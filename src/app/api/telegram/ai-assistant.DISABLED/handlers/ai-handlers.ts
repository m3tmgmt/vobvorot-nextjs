import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate } from '../utils'

// –í–ê–ñ–ù–û: –ü–æ–ª—è quantity/status —É —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ stock (—á–µ—Ä–µ–∑ SKU) –∏ isActive
// –£ –∑–∞–∫–∞–∑–æ–≤ status: 'PAID' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'CONFIRMED'
// –ü–æ–ª—è email/fullName –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ shippingEmail/shippingName

// === AI –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø ===

export async function handleAutoRestock(ctx: any, params: any) {
  try {
    const { threshold = 10, enabled = true } = params
    
    if (!enabled) {
      await ctx.reply(
        `ü§ñ –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n\n` +
        `üìä –ü–æ—Ä–æ–≥ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${threshold} —à—Ç.`,
        { parse_mode: 'MarkdownV2' }
      )
      return
    }
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
    const lowStockSkus = await prisma.productSku.findMany({
      where: {
        stock: { lte: threshold },
        isActive: true,
        product: {
          isActive: true
        }
      },
      include: {
        product: true
      },
      orderBy: { stock: 'asc' }
    })
    
    if (lowStockSkus.length === 0) {
      await ctx.reply(
        `‚úÖ –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n\n` +
        `üìä –ü–æ—Ä–æ–≥: ${threshold} —à—Ç.\n` +
        `üì¶ SKU —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 0`,
        { parse_mode: 'MarkdownV2' }
      )
      return
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    const restockTasks = []
    
    for (const sku of lowStockSkus) {
      // AI –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
      const avgMonthlySales = 50 // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª –±—ã —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
      const suggestedRestock = Math.max(100, avgMonthlySales * 2)
      
      restockTasks.push({
        skuId: sku.id,
        productName: sku.product.name,
        sku: sku.sku,
        size: sku.size,
        color: sku.color,
        currentStock: sku.stock,
        suggestedRestock
      })
    }
    
    let message = `ü§ñ *AI –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ*\n\n`
    message += `üìä –ü–æ—Ä–æ–≥: ${threshold} —à—Ç.\n`
    message += `üì¶ –ù–∞–π–¥–µ–Ω–æ SKU: ${lowStockSkus.length}\n\n`
    
    message += `üìã *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:*\n`
    
    for (const task of restockTasks.slice(0, 10)) {
      message += `üì¶ ${escapeMarkdownV2(task.productName)}\n`
      message += `   SKU: ${escapeMarkdownV2(task.sku)}\n`
      if (task.size) message += `   –†–∞–∑–º–µ—Ä: ${escapeMarkdownV2(task.size)}\n`
      if (task.color) message += `   –¶–≤–µ—Ç: ${escapeMarkdownV2(task.color)}\n`
      message += `   –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${task.currentStock} —à—Ç.\n`
      message += `   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫–∞–∑–∞—Ç—å: ${task.suggestedRestock} —à—Ç.\n\n`
    }
    
    if (restockTasks.length > 10) {
      message += `_–ò –µ—â–µ ${restockTasks.length - 10} —Ç–æ–≤–∞—Ä–æ–≤..._\n\n`
    }
    
    message += `üéØ *AI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç:*\n`
    message += `‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º\n`
    message += `‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞\n`
    message += `‚Ä¢ –£—á–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: –≤–∫–ª—é—á–µ–Ω`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error in auto restock:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
  }
}

export async function handlePriceOptimization(ctx: any, params: any) {
  try {
    const { productId, mode = 'auto' } = params
    
    let where: any = {}
    if (productId) {
      where.id = productId
    }
    
    const products = await prisma.product.findMany({
      where: {
        ...where,
        isActive: true
      },
      include: {
        skus: {
          where: { isActive: true }
        }
      },
      take: productId ? 1 : 20,
      orderBy: { createdAt: 'desc' }
    })
    
    if (products.length === 0) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }
    
    let message = `üéØ *AI –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–Ω*\n\n`
    message += `ü§ñ –†–µ–∂–∏–º: ${escapeMarkdownV2(mode.toUpperCase())}\n`
    message += `üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}\n\n`
    
    for (const product of products.slice(0, 5)) {
      // AI –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—ã
      const currentPrice = product.price
      // –°—É–º–º–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤—Å–µ–º SKU —Ç–æ–≤–∞—Ä–∞
      const totalStock = product.skus.reduce((sum, sku) => sum + sku.stock, 0)
      
      const marketAnalysis = {
        competitorAvg: currentPrice * 1.05, // +5% –æ—Ç —Ç–µ–∫—É—â–µ–π
        demandFactor: 1.1, // –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å
        seasonality: 0.95, // –ù–µ–±–æ–ª—å—à–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
        stockLevel: totalStock < 10 ? 1.1 : 1.0 // –î–µ—Ñ–∏—Ü–∏—Ç = +10%
      }
      
      const optimizedPrice = Math.round(
        currentPrice * 
        marketAnalysis.demandFactor * 
        marketAnalysis.seasonality * 
        marketAnalysis.stockLevel
      )
      
      const priceChange = ((optimizedPrice - currentPrice) / currentPrice * 100).toFixed(1)
      const changeEmoji = parseFloat(priceChange) > 0 ? 'üìà' : parseFloat(priceChange) < 0 ? 'üìâ' : '‚û°Ô∏è'
      
      message += `üì¶ *${escapeMarkdownV2(product.name)}*\n`
      message += `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice} –≥—Ä–Ω\n`
      message += `${changeEmoji} –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è: ${optimizedPrice} –≥—Ä–Ω (${priceChange}%)\n`
      message += `üìä –ê–Ω–∞–ª–∏–∑:\n`
      message += `   ‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã: ${marketAnalysis.competitorAvg} –≥—Ä–Ω\n`
      message += `   ‚Ä¢ –°–ø—Ä–æ—Å: ${marketAnalysis.demandFactor > 1 ? '–í—ã—Å–æ–∫–∏–π' : '–°—Ä–µ–¥–Ω–∏–π'}\n`
      message += `   ‚Ä¢ –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: ${marketAnalysis.seasonality > 1 ? '–†–∞—Å—Ç–µ—Ç' : '–°–Ω–∏–∂–∞–µ—Ç—Å—è'}\n`
      message += `   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: ${totalStock} —à—Ç.\n\n`
    }
    
    if (products.length > 5) {
      message += `_–ò –µ—â–µ ${products.length - 5} —Ç–æ–≤–∞—Ä–æ–≤..._\n\n`
    }
    
    message += `üéØ *AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`
    message += `‚Ä¢ –û–±–Ω–æ–≤–ª—è—Ç—å —Ü–µ–Ω—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ\n`
    message += `‚Ä¢ –£—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n`
    message += `‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π\n`
    message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error in price optimization:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω')
  }
}

export async function handleSalesForecasting(ctx: any, params: any) {
  try {
    const { period = 'month', productId } = params
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    const historicalOrders = await prisma.order.findMany({
      where: {
        status: { in: ['CONFIRMED', 'DELIVERED'] },
        createdAt: {
          gte: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
        }
      },
      include: {
        items: {
          include: {
            sku: {
              include: {
                product: true
              }
            }
          }
        }
      }
    })
    
    // AI –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    const currentMonth = new Date().getMonth()
    const seasonalityFactors = {
      0: 0.85, 1: 0.80, 2: 0.90, 3: 1.00, // –ó–∏–º–∞-–í–µ—Å–Ω–∞
      4: 1.10, 5: 1.20, 6: 1.25, 7: 1.20, // –í–µ—Å–Ω–∞-–õ–µ—Ç–æ  
      8: 1.15, 9: 1.05, 10: 1.00, 11: 1.30  // –û—Å–µ–Ω—å-–ó–∏–º–∞
    }
    
    const totalRevenue = historicalOrders.reduce((sum, order) => sum + order.total, 0)
    const avgDailyRevenue = totalRevenue / 90
    
    // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–∏–æ–¥–∞
    let forecastDays = 30
    switch (period) {
      case 'week': forecastDays = 7; break
      case 'month': forecastDays = 30; break
      case 'quarter': forecastDays = 90; break
    }
    
    const seasonalityFactor = seasonalityFactors[currentMonth] || 1.0
    const trendFactor = 1.05 // –†–æ—Å—Ç –Ω–∞ 5%
    const forecastRevenue = Math.round(avgDailyRevenue * forecastDays * seasonalityFactor * trendFactor)
    
    // –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryForecasts = {}
    const categories = ['–û–¥–µ–∂–¥–∞', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–û–±—É–≤—å', '–î—Ä—É–≥–æ–µ']
    
    for (const category of categories) {
      const categoryRevenue = Math.round(forecastRevenue * (Math.random() * 0.4 + 0.1)) // 10-50%
      categoryForecasts[category] = categoryRevenue
    }
    
    let message = `üîÆ *AI –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂*\n\n`
    message += `üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: ${escapeMarkdownV2(period)}\n`
    message += `üìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: 90 –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏\n\n`
    
    message += `üí∞ *–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏:*\n`
    message += `üéØ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: ${forecastRevenue} –≥—Ä–Ω\n`
    message += `üìà –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–∞—è: ${Math.round(forecastRevenue / forecastDays)} –≥—Ä–Ω\n`
    message += `üìä –†–æ—Å—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É: +5%\n\n`
    
    message += `üè∑ *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n`
    for (const [category, revenue] of Object.entries(categoryForecasts)) {
      const percentage = ((revenue / forecastRevenue) * 100).toFixed(1)
      message += `‚Ä¢ ${escapeMarkdownV2(category)}: ${revenue} –≥—Ä–Ω (${percentage}%)\n`
    }
    
    message += `\nü§ñ *AI –∞–Ω–∞–ª–∏–∑:*\n`
    message += `üìà –¢—Ä–µ–Ω–¥: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (+5%)\n`
    message += `üåç –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: ${seasonalityFactor > 1 ? '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è' : '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'}\n`
    message += `üéØ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ¬±15%\n`
    message += `‚ö° –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: 78%\n\n`
    
    message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`
    message += `‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–∫—É–ø–∫–∏ –Ω–∞ ${Math.round((trendFactor - 1) * 100)}%\n`
    message += `‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏\n`
    message += `‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø-—Ç–æ–≤–∞—Ä—ã\n`
    message += `‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error in sales forecasting:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂')
  }
}

export async function handleCustomerSegmentation(ctx: any, params: any) {
  try {
    const { action = 'analyze' } = params
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    const customers = await prisma.order.findMany({
      select: {
        shippingEmail: true,
        shippingName: true,
        total: true,
        createdAt: true
      }
    })
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
    const customerData = {}
    
    for (const order of customers) {
      if (!customerData[order.shippingEmail]) {
        customerData[order.shippingEmail] = {
          name: order.shippingName,
          email: order.shippingEmail,
          totalSpent: 0,
          orderCount: 0,
          firstOrder: order.createdAt,
          lastOrder: order.createdAt
        }
      }
      
      customerData[order.shippingEmail].totalSpent += order.total
      customerData[order.shippingEmail].orderCount += 1
      
      if (order.createdAt < customerData[order.shippingEmail].firstOrder) {
        customerData[order.shippingEmail].firstOrder = order.createdAt
      }
      if (order.createdAt > customerData[order.shippingEmail].lastOrder) {
        customerData[order.shippingEmail].lastOrder = order.createdAt
      }
    }
    
    // AI —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    const segments = {
      'VIP': [], // –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, —á–∞—Å—Ç—ã–µ –ø–æ–∫—É–ø–∫–∏
      '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ': [], // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
      '–ù–æ–≤—ã–µ': [], // –ù–µ–¥–∞–≤–Ω–æ –∫—É–ø–∏–ª–∏ –≤–ø–µ—Ä–≤—ã–µ
      '–°–ø—è—â–∏–µ': [], // –î–∞–≤–Ω–æ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏
      '–†–∞–∑–æ–≤—ã–µ': [] // –ö—É–ø–∏–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑ –¥–∞–≤–Ω–æ
    }
    
    const now = new Date()
    
    for (const customer of Object.values(customerData)) {
      const daysSinceLastOrder = (now.getTime() - customer.lastOrder.getTime()) / (1000 * 60 * 60 * 24)
      const daysSinceFirstOrder = (now.getTime() - customer.firstOrder.getTime()) / (1000 * 60 * 60 * 24)
      
      if (customer.totalSpent > 5000 && customer.orderCount > 5) {
        segments['VIP'].push(customer)
      } else if (customer.orderCount > 3 && daysSinceLastOrder < 60) {
        segments['–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ'].push(customer)
      } else if (daysSinceFirstOrder < 30) {
        segments['–ù–æ–≤—ã–µ'].push(customer)
      } else if (daysSinceLastOrder > 90) {
        segments['–°–ø—è—â–∏–µ'].push(customer)
      } else {
        segments['–†–∞–∑–æ–≤—ã–µ'].push(customer)
      }
    }
    
    let message = `üéØ *AI –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤*\n\n`
    message += `üë• –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${Object.keys(customerData).length}\n\n`
    
    for (const [segmentName, segmentCustomers] of Object.entries(segments)) {
      const count = segmentCustomers.length
      const percentage = Object.keys(customerData).length > 0 
        ? ((count / Object.keys(customerData).length) * 100).toFixed(1) 
        : 0
      
      const segmentEmoji = {
        'VIP': 'üëë',
        '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ': 'üíé',
        '–ù–æ–≤—ã–µ': 'üåü',
        '–°–ø—è—â–∏–µ': 'üò¥',
        '–†–∞–∑–æ–≤—ã–µ': 'üë§'
      }[segmentName] || 'üìä'
      
      message += `${segmentEmoji} **${escapeMarkdownV2(segmentName)}**: ${count} (${percentage}%)\n`
      
      if (count > 0) {
        const avgSpent = segmentCustomers.reduce((sum, c) => sum + c.totalSpent, 0) / count
        message += `   üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${Math.round(avgSpent)} –≥—Ä–Ω\n`
      }
      message += `\n`
    }
    
    message += `ü§ñ *AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:*\n\n`
    message += `üëë **VIP –∫–ª–∏–µ–Ω—Ç—ã:**\n`
    message += `‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n`
    message += `‚Ä¢ –†–∞–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö\n`
    message += `‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n\n`
    
    message += `üò¥ **–°–ø—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã:**\n`
    message += `‚Ä¢ –†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏ 15-20%\n`
    message += `‚Ä¢ –ü–∏—Å—å–º–∞ —Å –Ω–æ–≤–∏–Ω–∫–∞–º–∏\n`
    message += `‚Ä¢ –û–ø—Ä–æ—Å –æ –ø—Ä–∏—á–∏–Ω–∞—Ö —É—Ö–æ–¥–∞\n\n`
    
    message += `üåü **–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:**\n`
    message += `‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è –ø–∏—Å–µ–º\n`
    message += `‚Ä¢ –°–∫–∏–¥–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –∑–∞–∫–∞–∑\n`
    message += `‚Ä¢ –ì–∞–π–¥ –ø–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error in customer segmentation:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤')
  }
}

export async function handleInventoryOptimization(ctx: any, params: any) {
  try {
    const { category } = params
    
    let where: any = {}
    if (category) {
      where.categories = {
        some: {
          category: {
            name: category
          }
        }
      }
    }
    
    const products = await prisma.product.findMany({
      where: {
        ...where,
        isActive: true
      },
      include: {
        skus: {
          where: { isActive: true }
        }
      }
    })
    
    if (products.length === 0) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –¥–Ω–µ–π
    const salesData = await prisma.orderItem.findMany({
      where: {
        order: {
          createdAt: {
            gte: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000)
          },
          status: { in: ['CONFIRMED', 'DELIVERED'] }
        }
      },
      include: {
        sku: {
          include: {
            product: true
          }
        }
      }
    })
    
    // AI –∞–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
    const optimizationResults = []
    
    for (const product of products) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ SKU —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const productSales = salesData.filter(item => item.sku.productId === product.id)
      const totalSold = productSales.reduce((sum, item) => sum + item.quantity, 0)
      const dailyAvgSales = totalSold / 60
      
      // –°—É–º–º–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤—Å–µ–º SKU —Ç–æ–≤–∞—Ä–∞
      const totalStock = product.skus.reduce((sum, sku) => sum + sku.stock, 0)
      const daysOfStock = dailyAvgSales > 0 ? totalStock / dailyAvgSales : Infinity
      
      let recommendation = ''
      let priority = 'low'
      
      if (daysOfStock < 7) {
        recommendation = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò_–ù–ò–ó–ö–ò–ô - –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ'
        priority = 'critical'
      } else if (daysOfStock < 14) {
        recommendation = '–ù–ò–ó–ö–ò–ô - –∑–∞–∫–∞–∑–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏'
        priority = 'high'
      } else if (daysOfStock > 90) {
        recommendation = '–ò–ó–ë–´–¢–û–ö - —Å–Ω–∏–∑–∏—Ç—å –∑–∞–∫—É–ø–∫–∏'
        priority = 'medium'
      } else if (daysOfStock > 60) {
        recommendation = '–ú–ù–û–ì–û - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫—É–ø–∫–∏'
        priority = 'low'
      } else {
        recommendation = '–û–ü–¢–ò–ú–ê–õ–¨–ù–û'
        priority = 'optimal'
      }
      
      optimizationResults.push({
        product,
        totalSold,
        totalStock,
        dailyAvgSales: dailyAvgSales.toFixed(2),
        daysOfStock: Math.round(daysOfStock),
        recommendation,
        priority
      })
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const priorityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3, 'optimal': 4 }
    optimizationResults.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority])
    
    let message = `üì¶ *AI –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤*\n\n`
    message += `üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}\n`
    message += `üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: 60 –¥–Ω–µ–π\n\n`
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    const priorityStats = {}
    for (const result of optimizationResults) {
      priorityStats[result.priority] = (priorityStats[result.priority] || 0) + 1
    }
    
    message += `üö® *–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:*\n`
    if (priorityStats.critical) message += `üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${priorityStats.critical}\n`
    if (priorityStats.high) message += `üü† –í—ã—Å–æ–∫–∏—Ö: ${priorityStats.high}\n`
    if (priorityStats.medium) message += `üü° –°—Ä–µ–¥–Ω–∏—Ö: ${priorityStats.medium}\n`
    if (priorityStats.optimal) message += `üü¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö: ${priorityStats.optimal}\n\n`
    
    message += `üìã *–¢–û–ü-10 —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è:*\n`
    
    for (const result of optimizationResults.slice(0, 10)) {
      const priorityEmoji = {
        'critical': 'üî¥',
        'high': 'üü†',
        'medium': 'üü°',
        'low': '‚ö™',
        'optimal': 'üü¢'
      }[result.priority] || '‚ùì'
      
      message += `${priorityEmoji} ${escapeMarkdownV2(result.product.name)}\n`
      message += `   üìä –û—Å—Ç–∞—Ç–æ–∫: ${result.totalStock} —à—Ç.\n`
      message += `   üìà –ü—Ä–æ–¥–∞–Ω–æ –∑–∞ 60–¥: ${result.totalSold} —à—Ç.\n`
      message += `   ‚è± –î–Ω–µ–π –¥–æ –Ω—É–ª—è: ${result.daysOfStock === Infinity ? '‚àû' : result.daysOfStock}\n`
      message += `   üí° ${escapeMarkdownV2(result.recommendation)}\n\n`
    }
    
    message += `ü§ñ *AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`
    message += `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –æ—Å—Ç–∞—Ç–∫–µ < 14 –¥–Ω–µ–π\n`
    message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ABC-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤\n`
    message += `‚Ä¢ –£—á–∏—Ç—ã–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö\n`
    message += `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error in inventory optimization:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤')
  }
}