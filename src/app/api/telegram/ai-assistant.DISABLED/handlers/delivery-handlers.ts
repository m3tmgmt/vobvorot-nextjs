import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate, formatPrice } from '../utils'

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–°–¢–ê–í–ö–û–ô ===
// –í–ê–ñ–ù–û: –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã Delivery –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
// –¢–∞–±–ª–∏—Ü–∞ Delivery –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ Prisma

export async function handleCreateDelivery(ctx: any, params: any) {
  try {
    const { orderId, method, cost, trackingNumber, estimatedDelivery } = params
    
    if (!orderId || !method) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    const delivery = await prisma.delivery.create({
      data: {
        orderId,
        method,
        cost: cost || 0,
        trackingNumber: trackingNumber || '',
        status: 'PENDING',
        estimatedDelivery: estimatedDelivery ? new Date(estimatedDelivery) : null
      }
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await prisma.order.update({
      where: { id: orderId },
      data: { status: 'SHIPPED' }
    })
    
    await ctx.reply(
      `‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
      `üöö –°–ø–æ—Å–æ–±: ${escapeMarkdownV2(method)}\n` +
      `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(orderId)}\n` +
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${formatPrice(cost || 0)}\n` +
      `${trackingNumber ? `üìç –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: \`${escapeMarkdownV2(trackingNumber)}\`\n` : ''}` +
      `üÜî ID –¥–æ—Å—Ç–∞–≤–∫–∏: \`${escapeMarkdownV2(delivery.id)}\``,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error creating delivery:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏')
  }
}

export async function handleUpdateDeliveryStatus(ctx: any, params: any) {
  try {
    const { deliveryId, status, location } = params
    
    if (!deliveryId || !status) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å')
      return
    }
    
    const validStatuses = ['PENDING', 'IN_TRANSIT', 'DELIVERED', 'FAILED', 'RETURNED']
    
    if (!validStatuses.includes(status.toUpperCase())) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${validStatuses.join(', ')}`)
      return
    }
    
    const delivery = await prisma.delivery.update({
      where: { id: deliveryId },
      data: { 
        status: status.toUpperCase(),
        currentLocation: location || null,
        deliveredAt: status.toUpperCase() === 'DELIVERED' ? new Date() : null
      },
      include: { order: true }
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ
    if (status.toUpperCase() === 'DELIVERED') {
      await prisma.order.update({
        where: { id: delivery.orderId },
        data: { status: 'DELIVERED' }
      })
    }
    
    const statusEmoji = {
      'PENDING': '‚è≥',
      'IN_TRANSIT': 'üöö',
      'DELIVERED': '‚úÖ',
      'FAILED': '‚ùå',
      'RETURNED': 'üîÑ'
    }[status.toUpperCase()] || '‚ùì'
    
    await ctx.reply(
      `${statusEmoji} –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n` +
      `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(delivery.orderId)}\n` +
      `üöö –°–ø–æ—Å–æ–±: ${escapeMarkdownV2(delivery.method)}\n` +
      `üìç –°—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(status.toUpperCase())}\n` +
      `${location ? `üó∫ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${escapeMarkdownV2(location)}\n` : ''}` +
      `${delivery.trackingNumber ? `üìç –¢—Ä–µ–∫: \`${escapeMarkdownV2(delivery.trackingNumber)}\`\n` : ''}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error updating delivery status:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏')
  }
}

export async function handleTrackDelivery(ctx: any, params: any) {
  try {
    const { trackingNumber, orderId } = params
    
    if (!trackingNumber && !orderId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏–ª–∏ ID –∑–∞–∫–∞–∑–∞')
      return
    }
    
    let where: any = {}
    if (trackingNumber) {
      where.trackingNumber = trackingNumber
    } else if (orderId) {
      where.orderId = orderId
    }
    
    const delivery = await prisma.delivery.findFirst({
      where,
      include: {
        order: {
          include: {
            items: {
              include: {
                sku: {
                  include: {
                    product: true
                  }
                }
              }
            }
          }
        }
      }
    })
    
    if (!delivery) {
      await ctx.reply('‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }
    
    const statusEmoji = {
      'PENDING': '‚è≥',
      'IN_TRANSIT': 'üöö',
      'DELIVERED': '‚úÖ',
      'FAILED': '‚ùå',
      'RETURNED': 'üîÑ'
    }[delivery.status] || '‚ùì'
    
    let message = `üì¶ *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏*\n\n`
    message += `${statusEmoji} –°—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(delivery.status)}\n`
    message += `üöö –°–ø–æ—Å–æ–±: ${escapeMarkdownV2(delivery.method)}\n`
    message += `üìç –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: \`${escapeMarkdownV2(delivery.trackingNumber || '–ù–µ —É–∫–∞–∑–∞–Ω')}\`\n`
    
    if (delivery.currentLocation) {
      message += `üó∫ –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${escapeMarkdownV2(delivery.currentLocation)}\n`
    }
    
    if (delivery.estimatedDelivery) {
      message += `üìÖ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: ${formatDate(delivery.estimatedDelivery)}\n`
    }
    
    if (delivery.deliveredAt) {
      message += `‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${formatDate(delivery.deliveredAt)}\n`
    }
    
    message += `\nüì¶ *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #${escapeMarkdownV2(delivery.orderId)}:*\n`
    message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${escapeMarkdownV2(delivery.order.shippingName)}\n`
    message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${escapeMarkdownV2(delivery.order.shippingPhone)}\n`
    message += `üè† –ê–¥—Ä–µ—Å: ${escapeMarkdownV2(delivery.order.shippingAddress)}\n`
    message += `üí∞ –°—É–º–º–∞: ${formatPrice(delivery.order.total)}\n`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error tracking delivery:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏')
  }
}

export async function handleViewDeliveries(ctx: any, params: any) {
  try {
    const { status, method, date } = params
    
    let where: any = {}
    if (status) {
      where.status = status.toUpperCase()
    }
    if (method) {
      where.method = method
    }
    if (date) {
      const targetDate = new Date(date)
      const nextDay = new Date(targetDate)
      nextDay.setDate(nextDay.getDate() + 1)
      
      where.createdAt = {
        gte: targetDate,
        lt: nextDay
      }
    }
    
    const deliveries = await prisma.delivery.findMany({
      where,
      include: {
        order: true
      },
      orderBy: { createdAt: 'desc' },
      take: 15
    })
    
    if (deliveries.length === 0) {
      await ctx.reply('üì≠ –î–æ—Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return
    }
    
    let message = `üöö *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫:*\n\n`
    
    for (const delivery of deliveries) {
      const statusEmoji = {
        'PENDING': '‚è≥',
        'IN_TRANSIT': 'üöö',
        'DELIVERED': '‚úÖ',
        'FAILED': '‚ùå',
        'RETURNED': 'üîÑ'
      }[delivery.status] || '‚ùì'
      
      message += `${statusEmoji} *${escapeMarkdownV2(delivery.method)}*\n`
      message += `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(delivery.orderId)}\n`
      message += `üë§ ${escapeMarkdownV2(delivery.order.shippingName)}\n`
      message += `üí∞ ${formatPrice(delivery.cost)}\n`
      if (delivery.trackingNumber) {
        message += `üìç –¢—Ä–µ–∫: \`${escapeMarkdownV2(delivery.trackingNumber)}\`\n`
      }
      message += `üìÖ ${formatDate(delivery.createdAt)}\n\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error viewing deliveries:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–æ—Å—Ç–∞–≤–æ–∫')
  }
}

export async function handleCalculateDeliveryCost(ctx: any, params: any) {
  try {
    const { method, weight, city, country } = params
    
    if (!method || !weight || !city) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏, –≤–µ—Å –∏ –≥–æ—Ä–æ–¥')
      return
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    let baseCost = 0
    let weightMultiplier = 1
    
    switch (method.toLowerCase()) {
      case 'nova_poshta':
        baseCost = 50
        weightMultiplier = weight > 1 ? weight * 10 : 0
        break
      case 'ukrposhta':
        baseCost = 30
        weightMultiplier = weight > 1 ? weight * 8 : 0
        break
      case 'courier':
        baseCost = 100
        weightMultiplier = weight > 2 ? weight * 15 : 0
        break
      case 'pickup':
        baseCost = 0
        weightMultiplier = 0
        break
      default:
        baseCost = 60
        weightMultiplier = weight * 12
    }
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    const internationalMultiplier = (country && country.toLowerCase() !== 'ukraine') ? 3 : 1
    
    const totalCost = (baseCost + weightMultiplier) * internationalMultiplier
    
    let message = `üìä *–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏*\n\n`
    message += `üöö –°–ø–æ—Å–æ–±: ${escapeMarkdownV2(method)}\n`
    message += `‚öñÔ∏è –í–µ—Å: ${weight} –∫–≥\n`
    message += `üè† –ì–æ—Ä–æ–¥: ${escapeMarkdownV2(city)}\n`
    if (country) {
      message += `üåç –°—Ç—Ä–∞–Ω–∞: ${escapeMarkdownV2(country)}\n`
    }
    message += `\nüí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å: ${formatPrice(totalCost)}*\n\n`
    
    message += `üìã *–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞:*\n`
    message += `‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatPrice(baseCost)}\n`
    if (weightMultiplier > 0) {
      message += `‚Ä¢ –ó–∞ –≤–µ—Å: ${formatPrice(weightMultiplier)}\n`
    }
    if (internationalMultiplier > 1) {
      message += `‚Ä¢ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: x${internationalMultiplier}\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error calculating delivery cost:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏')
  }
}

export async function handleDeliveryStatistics(ctx: any, params: any) {
  try {
    const { period = 'month' } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.createdAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter.createdAt = { gte: monthAgo }
        break
      case 'year':
        const yearAgo = new Date(now)
        yearAgo.setFullYear(yearAgo.getFullYear() - 1)
        dateFilter.createdAt = { gte: yearAgo }
        break
    }
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–æ–∫
    const totalDeliveries = await prisma.delivery.count({ where: dateFilter })
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = await prisma.delivery.groupBy({
      by: ['status'],
      where: dateFilter,
      _count: { status: true }
    })
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
    const methodStats = await prisma.delivery.groupBy({
      by: ['method'],
      where: dateFilter,
      _count: { method: true },
      _sum: { cost: true }
    })
    
    // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
    const deliveredOrders = await prisma.delivery.findMany({
      where: {
        ...dateFilter,
        status: 'DELIVERED',
        deliveredAt: { not: null }
      },
      select: {
        createdAt: true,
        deliveredAt: true
      }
    })
    
    const avgDeliveryTime = deliveredOrders.length > 0 
      ? deliveredOrders.reduce((sum, delivery) => {
          const days = Math.ceil((delivery.deliveredAt!.getTime() - delivery.createdAt.getTime()) / (1000 * 60 * 60 * 24))
          return sum + days
        }, 0) / deliveredOrders.length
      : 0
    
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫ (${period}):*\n\n`
    message += `üì¶ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: ${totalDeliveries}\n`
    message += `‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgDeliveryTime.toFixed(1)} –¥–Ω–µ–π\n\n`
    
    message += `üìà *–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n`
    for (const stat of statusStats) {
      const emoji = {
        'PENDING': '‚è≥',
        'IN_TRANSIT': 'üöö',
        'DELIVERED': '‚úÖ',
        'FAILED': '‚ùå',
        'RETURNED': 'üîÑ'
      }[stat.status] || '‚ùì'
      
      const percentage = totalDeliveries > 0 ? ((stat._count.status / totalDeliveries) * 100).toFixed(1) : 0
      message += `${emoji} ${stat.status}: ${stat._count.status} (${percentage}%)\n`
    }
    
    message += `\nüöö *–ü–æ —Å–ø–æ—Å–æ–±–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏:*\n`
    for (const stat of methodStats) {
      message += `‚Ä¢ ${escapeMarkdownV2(stat.method)}: ${stat._count.method} —à—Ç. (${formatPrice(stat._sum.cost || 0)} –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting delivery statistics:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∞–≤–æ–∫')
  }
}

export async function handleBulkUpdateDeliveries(ctx: any, params: any) {
  try {
    const { deliveryIds, field, value } = params
    
    if (!deliveryIds || !Array.isArray(deliveryIds) || deliveryIds.length === 0 || !field || value === undefined) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –º–∞—Å—Å–∏–≤ ID –¥–æ—Å—Ç–∞–≤–æ–∫, –ø–æ–ª–µ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ')
      return
    }
    
    const updateData: any = {}
    updateData[field] = value
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    if (field === 'status' && value === 'DELIVERED') {
      updateData.deliveredAt = new Date()
    }
    
    const result = await prisma.delivery.updateMany({
      where: { id: { in: deliveryIds } },
      data: updateData
    })
    
    await ctx.reply(
      `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ—Å—Ç–∞–≤–æ–∫: ${result.count}\n` +
      `üìù ${escapeMarkdownV2(field)}: ${escapeMarkdownV2(String(value))}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error bulk updating deliveries:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–æ–∫')
  }
}

export async function handleExportDeliveries(ctx: any, params: any) {
  try {
    const { format = 'csv', status } = params
    
    let where: any = {}
    if (status) {
      where.status = status.toUpperCase()
    }
    
    const deliveries = await prisma.delivery.findMany({
      where,
      include: {
        order: true
      },
      orderBy: { createdAt: 'desc' }
    })
    
    if (deliveries.length === 0) {
      await ctx.reply('üì≠ –ù–µ—Ç –¥–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
      return
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º CSV
    let csv = 'ID,–ó–∞–∫–∞–∑,–ö–ª–∏–µ–Ω—Ç,–°–ø–æ—Å–æ–±,–°—Ç–∞—Ç—É—Å,–°—Ç–æ–∏–º–æ—Å—Ç—å,–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä,–ê–¥—Ä–µ—Å,–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è,–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n'
    
    for (const delivery of deliveries) {
      csv += `"${delivery.id}","${delivery.orderId}","${delivery.order.shippingName}","${delivery.method}","${delivery.status}",${delivery.cost},"${delivery.trackingNumber || ''}","${delivery.order.shippingAddress}","${delivery.createdAt.toISOString().split('T')[0]}","${delivery.deliveredAt ? delivery.deliveredAt.toISOString().split('T')[0] : ''}"\n`
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    await ctx.replyWithDocument(
      Buffer.from(csv, 'utf-8'),
      {
        filename: `deliveries_export_${new Date().toISOString().split('T')[0]}.csv`,
        caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç–∞–≤–æ–∫ (${deliveries.length} —à—Ç.)`
      }
    )
  } catch (error) {
    console.error('Error exporting deliveries:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–æ—Å—Ç–∞–≤–æ–∫')
  }
}

export async function handleScheduleDelivery(ctx: any, params: any) {
  try {
    const { orderId, scheduledDate, timeSlot, notes } = params
    
    if (!orderId || !scheduledDate) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –∏ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É —Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
    const delivery = await prisma.delivery.findFirst({
      where: { orderId }
    })
    
    if (!delivery) {
      await ctx.reply('‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }
    
    const updatedDelivery = await prisma.delivery.update({
      where: { id: delivery.id },
      data: {
        estimatedDelivery: new Date(scheduledDate),
        notes: notes || null,
        status: 'PENDING'
      }
    })
    
    await ctx.reply(
      `üìÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n\n` +
      `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(orderId)}\n` +
      `üöö –°–ø–æ—Å–æ–±: ${escapeMarkdownV2(delivery.method)}\n` +
      `üìÖ –î–∞—Ç–∞: ${formatDate(new Date(scheduledDate))}\n` +
      `${timeSlot ? `‚è∞ –í—Ä–µ–º—è: ${escapeMarkdownV2(timeSlot)}\n` : ''}` +
      `${notes ? `üìù –ó–∞–º–µ—Ç–∫–∏: ${escapeMarkdownV2(notes)}\n` : ''}` +
      `üë§ –ö–ª–∏–µ–Ω—Ç: ${escapeMarkdownV2(order.shippingName)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error scheduling delivery:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏')
  }
}

export async function handleUpdateTrackingInfo(ctx: any, params: any) {
  try {
    const { deliveryId, trackingNumber, carrier, trackingUrl } = params
    
    if (!deliveryId || !trackingNumber) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä')
      return
    }
    
    const delivery = await prisma.delivery.update({
      where: { id: deliveryId },
      data: {
        trackingNumber,
        carrier: carrier || null,
        trackingUrl: trackingUrl || null
      },
      include: { order: true }
    })
    
    await ctx.reply(
      `üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n` +
      `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(delivery.orderId)}\n` +
      `üë§ –ö–ª–∏–µ–Ω—Ç: ${escapeMarkdownV2(delivery.order.shippingName)}\n` +
      `üìç –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: \`${escapeMarkdownV2(trackingNumber)}\`\n` +
      `${carrier ? `üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫: ${escapeMarkdownV2(carrier)}\n` : ''}` +
      `${trackingUrl ? `üîó [–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É](${trackingUrl})\n` : ''}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error updating tracking info:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è')
  }
}