import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate, formatPrice } from '../utils'
import { OrderStatus } from '@prisma/client'

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò ===

export async function handleViewOrders(ctx: any, params: any) {
  try {
    const { filter = 'all', status, search } = params
    
    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    let where: any = {}
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
    const now = new Date()
    switch (filter) {
      case 'today':
        where.createdAt = {
          gte: new Date(now.setHours(0, 0, 0, 0))
        }
        break
      case 'yesterday':
        const yesterday = new Date(now)
        yesterday.setDate(yesterday.getDate() - 1)
        where.createdAt = {
          gte: new Date(yesterday.setHours(0, 0, 0, 0)),
          lt: new Date(now.setHours(0, 0, 0, 0))
        }
        break
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        where.createdAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        where.createdAt = { gte: monthAgo }
        break
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status) {
      where.status = status.toUpperCase()
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É
    if (search) {
      where.OR = [
        { id: { contains: search } },
        { shippingEmail: { contains: search, mode: 'insensitive' } },
        { shippingName: { contains: search, mode: 'insensitive' } }
      ]
    }
    
    const orders = await prisma.order.findMany({
      where,
      include: {
        items: {
          include: {
            sku: {
              include: {
                product: true
              }
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    })
    
    if (orders.length === 0) {
      await ctx.reply('üì≠ –ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return
    }
    
    let message = `üì¶ *–ó–∞–∫–∞–∑—ã ${filter === 'all' ? '' : `–∑–∞ ${filter}`}:*\\n\\n`
    
    for (const order of orders) {
      const statusEmoji = {
        PENDING: '‚è≥',
        CONFIRMED: '‚úÖ',
        PROCESSING: 'üîÑ',
        SHIPPED: 'üì¶',
        DELIVERED: '‚úÖ',
        CANCELLED: '‚ùå',
        REFUNDED: 'üí∏'
      }[order.status] || '‚ùì'
      
      const itemsCount = order.items.reduce((sum, item) => sum + item.quantity, 0)
      
      message += `${statusEmoji} *–ó–∞–∫–∞–∑ \\#${escapeMarkdownV2(order.id)}*\\n`
      message += `üë§ ${escapeMarkdownV2(order.shippingName)}\\n`
      message += `üìÖ ${formatDate(order.createdAt)}\\n`
      message += `üõç –¢–æ–≤–∞—Ä–æ–≤: ${itemsCount} —à—Ç\\.\\n`
      message += `üí∞ –°—É–º–º–∞: ${formatPrice(order.total)}\\n`
      message += `üìç –°—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(order.status)}\\n`
      if (order.trackingNumber) {
        message += `üöö –¢—Ä–µ–∫: \`${escapeMarkdownV2(order.trackingNumber)}\`\\n`
      }
      message += '\\n'
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error viewing orders:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤')
  }
}

export async function handleSearchOrder(ctx: any, params: any) {
  try {
    const { orderId } = params
    
    if (!orderId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: {
        items: {
          include: {
            sku: {
              include: {
                product: true
              }
            }
          }
        }
      }
    })
    
    if (!order) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    await handleOrderDetails(ctx, { orderId: order.id })
  } catch (error) {
    console.error('Error searching order:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞')
  }
}

export async function handleOrderDetails(ctx: any, params: any) {
  try {
    const { orderId } = params
    
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: {
        items: {
          include: {
            sku: {
              include: {
                product: true
              }
            }
          }
        }
      }
    })
    
    if (!order) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    let message = `üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ \\#${escapeMarkdownV2(order.id)}*\\n\\n`
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    message += `*üë§ –ö–ª–∏–µ–Ω—Ç:*\\n`
    message += `–ò–º—è: ${escapeMarkdownV2(order.shippingName)}\\n`
    message += `Email: ${escapeMarkdownV2(order.shippingEmail)}\\n`
    message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${escapeMarkdownV2(order.shippingPhone || '')}\\n\\n`
    
    // –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    message += `*üìç –î–æ—Å—Ç–∞–≤–∫–∞:*\\n`
    message += `${escapeMarkdownV2(order.shippingAddress)}\\n`
    message += `${escapeMarkdownV2(order.shippingCity)}, ${escapeMarkdownV2(order.shippingZip || '')}\\n`
    message += `${escapeMarkdownV2(order.shippingCountry)}\\n\\n`
    
    // –¢–æ–≤–∞—Ä—ã
    message += `*üõç –¢–æ–≤–∞—Ä—ã:*\\n`
    for (const item of order.items) {
      message += `‚Ä¢ ${escapeMarkdownV2(item.sku.product.name)} x${item.quantity} = ${formatPrice(item.price * item.quantity)}\\n`
    }
    
    // –ò—Ç–æ–≥–∏
    message += `\\n*üí∞ –ò—Ç–æ–≥–æ:*\\n`
    message += `–¢–æ–≤–∞—Ä—ã: ${formatPrice(order.subtotal)}\\n`
    if (order.shippingCost > 0) {
      message += `–î–æ—Å—Ç–∞–≤–∫–∞: ${formatPrice(order.shippingCost)}\\n`
    }
    message += `*–í—Å–µ–≥–æ: ${formatPrice(order.total)}*\\n\\n`
    
    // –°—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—ã
    message += `*üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\\n`
    message += `–°—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(order.status)}\\n`
    message += `–°–æ–∑–¥–∞–Ω: ${formatDate(order.createdAt)}\\n`
    if (order.trackingNumber) {
      message += `–¢—Ä–µ–∫\\-–Ω–æ–º–µ—Ä: \`${escapeMarkdownV2(order.trackingNumber)}\`\\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting order details:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞')
  }
}

export async function handleUpdateOrderStatus(ctx: any, params: any) {
  try {
    const { orderId, status } = params
    
    if (!orderId || !status) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å')
      return
    }
    
    const validStatuses = ['PENDING', 'CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'REFUNDED']
    const upperStatus = status.toUpperCase()
    
    if (!validStatuses.includes(upperStatus)) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${validStatuses.join(', ')}`)
      return
    }
    
    const order = await prisma.order.update({
      where: { id: orderId },
      data: { 
        status: upperStatus as OrderStatus,
        updatedAt: new Date()
      }
    })
    
    await ctx.reply(
      `‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ \\#${escapeMarkdownV2(order.id)} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *${escapeMarkdownV2(upperStatus)}*`,
      { parse_mode: 'MarkdownV2' }
    )
    
    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
  } catch (error) {
    console.error('Error updating order status:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞')
  }
}

export async function handleAddTracking(ctx: any, params: any) {
  try {
    const { orderId, trackingNumber, carrier } = params
    
    if (!orderId || !trackingNumber) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä')
      return
    }
    
    const order = await prisma.order.update({
      where: { id: orderId },
      data: { 
        trackingNumber,
        status: 'SHIPPED',
        updatedAt: new Date()
      }
    })
    
    await ctx.reply(
      `‚úÖ –¢—Ä–µ–∫\\-–Ω–æ–º–µ—Ä \`${escapeMarkdownV2(trackingNumber)}\` –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É \\#${escapeMarkdownV2(order.id)}`,
      { parse_mode: 'MarkdownV2' }
    )
    
    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç—É
  } catch (error) {
    console.error('Error adding tracking:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞')
  }
}

export async function handleAddOrderNote(ctx: any, params: any) {
  try {
    const { orderId, note } = params
    
    if (!orderId || !note) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏')
      return
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (–µ—Å–ª–∏ –µ—Å—Ç—å) 
    const existingNotes = order.notes || ''
    const newNotes = existingNotes + (existingNotes ? '\n' : '') + `[${new Date().toISOString()}] ${note}`
    
    await prisma.order.update({
      where: { id: orderId },
      data: { 
        notes: newNotes,
        updatedAt: new Date()
      }
    })
    
    await ctx.reply(
      `‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∑–∞–∫–∞–∑—É \\#${escapeMarkdownV2(orderId)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error adding order note:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏')
  }
}

export async function handlePrintInvoice(ctx: any, params: any) {
  try {
    const { orderId } = params
    
    if (!orderId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: {
        items: {
          include: {
            sku: {
              include: {
                product: true
              }
            }
          }
        }
      }
    })
    
    if (!order) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –Ω–∞–∫–ª–∞–¥–Ω—É—é
    let invoice = `–ù–ê–ö–õ–ê–î–ù–ê–Ø\n`
    invoice += `–ó–∞–∫–∞–∑ ‚Ññ${order.id}\n`
    invoice += `–î–∞—Ç–∞: ${order.createdAt.toLocaleDateString('ru-RU')}\n\n`
    invoice += `–ü–û–õ–£–ß–ê–¢–ï–õ–¨:\n`
    invoice += `${order.shippingName}\n`
    invoice += `${order.shippingAddress}\n`
    invoice += `${order.shippingCity}, ${order.shippingZip}\n`
    invoice += `${order.shippingCountry}\n`
    invoice += `–¢–µ–ª: ${order.shippingPhone}\n\n`
    invoice += `–¢–û–í–ê–†–´:\n`
    
    for (const item of order.items) {
      invoice += `${item.sku.product.name} x${item.quantity} = ${(item.price * item.quantity).toFixed(2)} –≥—Ä–Ω\n`
    }
    
    invoice += `\n–ò–¢–û–ì–û: ${order.total.toFixed(2)} –≥—Ä–Ω`
    
    await ctx.reply(`\`\`\`\n${invoice}\n\`\`\``, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error printing invoice:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π')
  }
}

export async function handleInitiateReturn(ctx: any, params: any) {
  try {
    const { orderId, reason } = params
    
    if (!orderId || !reason) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    if (!['DELIVERED', 'SHIPPED'].includes(order.status)) {
      await ctx.reply('‚ùå –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
    await prisma.order.update({
      where: { id: orderId },
      data: { 
        status: 'REFUNDED',
        notes: `${order.notes || ''}\n–í–æ–∑–≤—Ä–∞—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω: ${reason}`,
        updatedAt: new Date()
      }
    })
    
    await ctx.reply(
      `‚úÖ –í–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ \\#${escapeMarkdownV2(orderId)} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω\\n` +
      `–ü—Ä–∏—á–∏–Ω–∞: ${escapeMarkdownV2(reason)}`,
      { parse_mode: 'MarkdownV2' }
    )
    
    // TODO: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
  } catch (error) {
    console.error('Error initiating return:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞')
  }
}

export async function handlePartialRefund(ctx: any, params: any) {
  try {
    const { orderId, amount, reason } = params
    
    if (!orderId || !amount || !reason) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, —Å—É–º–º—É –∏ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    if (amount > order.total) {
      await ctx.reply('‚ùå –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—É–º–º—É –∑–∞–∫–∞–∑–∞')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    await prisma.order.update({
      where: { id: orderId },
      data: { 
        notes: `${order.notes || ''}\n–ß–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç ${amount} –≥—Ä–Ω: ${reason}`,
        updatedAt: new Date()
      }
    })
    
    await ctx.reply(
      `‚úÖ –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω\\n` +
      `–ó–∞–∫–∞–∑: \\#${escapeMarkdownV2(orderId)}\\n` +
      `–°—É–º–º–∞: ${formatPrice(amount)}\\n` +
      `–ü—Ä–∏—á–∏–Ω–∞: ${escapeMarkdownV2(reason)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error processing partial refund:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞')
  }
}

export async function handleFullRefund(ctx: any, params: any) {
  try {
    const { orderId, reason } = params
    
    if (!orderId || !reason) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await prisma.order.update({
      where: { id: orderId },
      data: { 
        status: 'REFUNDED',
        notes: `${order.notes || ''}\n–ü–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç: ${reason}`,
        updatedAt: new Date()
      }
    })
    
    await ctx.reply(
      `‚úÖ –ü–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω\\n` +
      `–ó–∞–∫–∞–∑: \\#${escapeMarkdownV2(orderId)}\\n` +
      `–°—É–º–º–∞: ${formatPrice(order.total)}\\n` +
      `–ü—Ä–∏—á–∏–Ω–∞: ${escapeMarkdownV2(reason)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error processing full refund:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞')
  }
}

export async function handleSendReturnNotification(ctx: any, params: any) {
  try {
    const { orderId } = params
    
    if (!orderId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º
    await ctx.reply(
      `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É\\n` +
      `Email: ${escapeMarkdownV2(order.shippingEmail)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error sending return notification:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
  }
}

export async function handleOrderHistory(ctx: any, params: any) {
  try {
    const { orderId } = params
    
    if (!orderId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    let message = `üìú *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞ \\#${escapeMarkdownV2(orderId)}*\\n\\n`
    message += `–°–æ–∑–¥–∞–Ω: ${formatDate(order.createdAt)}\\n`
    message += `–û–±–Ω–æ–≤–ª–µ–Ω: ${formatDate(order.updatedAt)}\\n`
    message += `–°—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(order.status)}\\n`
    
    if (order.notes) {
      message += `\\n*–ó–∞–º–µ—Ç–∫–∏:*\\n${escapeMarkdownV2(order.notes)}`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting order history:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞')
  }
}

export async function handleBulkStatusUpdate(ctx: any, params: any) {
  try {
    const { orderIds, status } = params
    
    if (!orderIds || !Array.isArray(orderIds) || orderIds.length === 0 || !status) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –º–∞—Å—Å–∏–≤ ID –∑–∞–∫–∞–∑–æ–≤ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å')
      return
    }
    
    const upperStatus = status.toUpperCase()
    
    const result = await prisma.order.updateMany({
      where: { id: { in: orderIds } },
      data: { 
        status: upperStatus as OrderStatus,
        updatedAt: new Date()
      }
    })
    
    await ctx.reply(
      `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${result.count}\\n` +
      `–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: *${escapeMarkdownV2(upperStatus)}*`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error bulk updating orders:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤')
  }
}

export async function handleExportOrders(ctx: any, params: any) {
  try {
    const { format = 'csv', filter } = params
    
    let where: any = {}
    if (filter) {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞–∫ –≤ handleViewOrders
    }
    
    const orders = await prisma.order.findMany({
      where,
      include: {
        items: {
          include: {
            sku: {
              include: {
                product: true
              }
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    })
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º CSV
    let csv = 'ID,–î–∞—Ç–∞,–ö–ª–∏–µ–Ω—Ç,Email,–¢–µ–ª–µ—Ñ–æ–Ω,–°—É–º–º–∞,–°—Ç–∞—Ç—É—Å,–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä\n'
    for (const order of orders) {
      csv += `${order.id},${order.createdAt.toISOString()},${order.shippingName},${order.shippingEmail},${order.shippingPhone},${order.total},${order.status},${order.trackingNumber || ''}\n`
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    await ctx.replyWithDocument(
      Buffer.from(csv, 'utf-8'),
      {
        filename: `orders_export_${new Date().toISOString().split('T')[0]}.csv`,
        caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ (${orders.length} —à—Ç.)`
      }
    )
  } catch (error) {
    console.error('Error exporting orders:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–∫–∞–∑–æ–≤')
  }
}

export async function handleCancelOrder(ctx: any, params: any) {
  try {
    const { orderId, reason } = params
    
    if (!orderId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }
    
    if (['DELIVERED', 'CANCELLED', 'REFUNDED'].includes(order.status)) {
      await ctx.reply('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–æ–º')
      return
    }
    
    await prisma.order.update({
      where: { id: orderId },
      data: { 
        status: 'CANCELLED',
        notes: `${order.notes || ''}\n–û—Ç–º–µ–Ω–µ–Ω: ${reason || '–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã'}`,
        updatedAt: new Date()
      }
    })
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
    const orderItems = await prisma.orderItem.findMany({
      where: { orderId }
    })
    
    for (const item of orderItems) {
      await prisma.productSku.update({
        where: { id: item.skuId },
        data: { 
          stock: { increment: item.quantity }
        }
      })
    }
    
    await ctx.reply(
      `‚úÖ –ó–∞–∫–∞–∑ \\#${escapeMarkdownV2(orderId)} –æ—Ç–º–µ–Ω–µ–Ω\\n` +
      `${reason ? `–ü—Ä–∏—á–∏–Ω–∞: ${escapeMarkdownV2(reason)}` : ''}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error cancelling order:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞')
  }
}