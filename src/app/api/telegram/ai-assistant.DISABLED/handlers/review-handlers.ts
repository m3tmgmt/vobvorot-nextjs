import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate } from '../utils'

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê–ú–ò ===
// –í–ê–ñ–ù–û: –í —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –æ—Ç–∑—ã–≤—ã —Å–≤—è–∑–∞–Ω—ã —Å userId, –∞ –Ω–µ orderId!
// –ü–æ–ª—è customerName, customerEmail, moderationStatus –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å—Ö–µ–º–µ

export async function handleViewReviews(ctx: any, params: any) {
  try {
    const { productId, rating } = params
    
    let where: any = {}
    if (productId) {
      where.productId = productId
    }
    if (rating) {
      where.rating = parseInt(rating)
    }
    
    const reviews = await prisma.review.findMany({
      where,
      include: {
        product: true,
        user: true
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    })
    
    if (reviews.length === 0) {
      await ctx.reply('üì≠ –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç')
      return
    }
    
    let message = `‚≠ê *–û—Ç–∑—ã–≤—ã ${productId ? '–Ω–∞ —Ç–æ–≤–∞—Ä' : ''}:*\n\n`
    
    for (const review of reviews) {
      const stars = '‚≠ê'.repeat(review.rating)
      message += `${stars} *–û—Ü–µ–Ω–∫–∞: ${review.rating}/5*\n`
      message += `üì¶ –¢–æ–≤–∞—Ä: ${escapeMarkdownV2(review.product?.name || '–£–¥–∞–ª–µ–Ω')}\n`
      message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${escapeMarkdownV2(review.user?.name || review.user?.email || 'N/A')}\n`
      message += `üìÖ ${formatDate(review.createdAt)}\n`
      if (review.comment) {
        message += `üí¨ "${escapeMarkdownV2(review.comment)}"\n`
      }
      message += `\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error viewing reviews:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç–∑—ã–≤–æ–≤')
  }
}

export async function handleAddReview(ctx: any, params: any) {
  try {
    const { orderId, productId, rating, comment, title } = params
    
    if (!orderId || !productId || !rating) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, ID —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ü–µ–Ω–∫—É (1-5)')
      return
    }
    
    if (rating < 1 || rating > 5) {
      await ctx.reply('‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –∏ —Ç–æ–≤–∞—Ä
    // –í —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –æ—Ç–∑—ã–≤—ã —Å–≤—è–∑–∞–Ω—ã —Å userId, –Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∑–∞–∫–∞–∑–∞
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: { user: true }
    })
    
    const product = await prisma.product.findUnique({
      where: { id: productId }
    })
    
    if (!order || !product) {
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –∏–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    if (!order.userId) {
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
    const existingReview = await prisma.review.findUnique({
      where: {
        userId_productId: {
          userId: order.userId,
          productId
        }
      }
    })
    
    if (existingReview) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä')
      return
    }
    
    const review = await prisma.review.create({
      data: {
        userId: order.userId,
        productId,
        rating: parseInt(rating),
        title: title || null,
        comment: comment || null
      }
    })
    
    await ctx.reply(
      `‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
      `‚≠ê –û—Ü–µ–Ω–∫–∞: ${rating}/5\n` +
      `üì¶ –¢–æ–≤–∞—Ä: ${escapeMarkdownV2(product.name)}\n` +
      `üë§ –û—Ç: ${escapeMarkdownV2(order.shippingName)}\n` +
      `üÜî ID –æ—Ç–∑—ã–≤–∞: \`${escapeMarkdownV2(review.id)}\``,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error adding review:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞')
  }
}

export async function handleDeleteReview(ctx: any, params: any) {
  try {
    const { reviewId } = params
    
    if (!reviewId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ç–∑—ã–≤–∞')
      return
    }
    
    const review = await prisma.review.findUnique({
      where: { id: reviewId },
      include: { product: true }
    })
    
    if (!review) {
      await ctx.reply('‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    await prisma.review.delete({
      where: { id: reviewId }
    })
    
    await ctx.reply(
      `‚úÖ –û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω!\n` +
      `üì¶ –¢–æ–≤–∞—Ä: ${escapeMarkdownV2(review.product?.name || '–£–¥–∞–ª–µ–Ω')}\n` +
      `‚≠ê –û—Ü–µ–Ω–∫–∞ –±—ã–ª–∞: ${review.rating}/5`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error deleting review:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞')
  }
}

export async function handleReviewStatistics(ctx: any, params: any) {
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
    const totalReviews = await prisma.review.count()
    
    if (totalReviews === 0) {
      await ctx.reply('üìä –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç')
      return
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ü–µ–Ω–∫–∞–º
    const ratingStats = await prisma.review.groupBy({
      by: ['rating'],
      _count: { rating: true },
      orderBy: { rating: 'desc' }
    })
    
    // –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
    const avgRating = await prisma.review.aggregate({
      _avg: { rating: true }
    })
    
    // –¢–æ–≤–∞—Ä—ã —Å –ª—É—á—à–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏
    const topRatedProducts = await prisma.review.groupBy({
      by: ['productId'],
      _avg: { rating: true },
      _count: { id: true },
      having: { id: { _count: { gte: 2 } } },
      orderBy: { _avg: { rating: 'desc' } },
      take: 5
    })
    
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:*\n\n`
    message += `üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${totalReviews}\n`
    message += `‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${avgRating._avg.rating?.toFixed(1) || '0'}/5\n\n`
    
    message += `üìà *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:*\n`
    for (const stat of ratingStats) {
      const stars = '‚≠ê'.repeat(stat.rating)
      const percentage = ((stat._count.rating / totalReviews) * 100).toFixed(1)
      message += `${stars} ${stat.rating}: ${stat._count.rating} (${percentage}%)\n`
    }
    
    if (topRatedProducts.length > 0) {
      message += `\nüèÜ *–¢–û–ü —Ç–æ–≤–∞—Ä—ã –ø–æ –æ—Ç–∑—ã–≤–∞–º:*\n`
      
      for (const item of topRatedProducts) {
        const product = await prisma.product.findUnique({
          where: { id: item.productId }
        })
        
        if (product) {
          message += `‚≠ê ${item._avg.rating?.toFixed(1)}/5 - ${escapeMarkdownV2(product.name)} (${item._count.id} –æ—Ç–∑—ã–≤–æ–≤)\n`
        }
      }
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting review statistics:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤')
  }
}

export async function handleModerateReview(ctx: any, params: any) {
  try {
    const { reviewId, action } = params
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –Ω–µ—Ç –ø–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –Ω–æ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å title –¥–ª—è –ø–æ–º–µ—Ç–∫–∏
    if (!reviewId || !action) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ç–∑—ã–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–µ (approve/reject)')
      return
    }
    
    const review = await prisma.review.findUnique({
      where: { id: reviewId },
      include: { product: true, user: true }
    })
    
    if (!review) {
      await ctx.reply('‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    let updateData: any = {}
    let statusText = ''
    
    switch (action.toLowerCase()) {
      case 'approve':
        updateData.title = '[APPROVED] ' + (review.title || '')
        statusText = '–æ–¥–æ–±—Ä–µ–Ω'
        break
      case 'reject':
        updateData.title = '[REJECTED] ' + (review.title || '')
        statusText = '–æ—Ç–∫–ª–æ–Ω–µ–Ω'
        break
      default:
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: approve –∏–ª–∏ reject')
        return
    }
    
    const updatedReview = await prisma.review.update({
      where: { id: reviewId },
      data: updateData
    })
    
    await ctx.reply(
      `‚úÖ –û—Ç–∑—ã–≤ ${statusText}!\n\n` +
      `üì¶ –¢–æ–≤–∞—Ä: ${escapeMarkdownV2(review.product?.name || '–£–¥–∞–ª–µ–Ω')}\n` +
      `‚≠ê –û—Ü–µ–Ω–∫–∞: ${review.rating}/5\n` +
      `üë§ –û—Ç: ${escapeMarkdownV2(review.user?.name || review.user?.email || 'N/A')}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error moderating review:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞')
  }
}

export async function handleExportReviews(ctx: any, params: any) {
  try {
    const { format = 'csv' } = params
    
    const reviews = await prisma.review.findMany({
      include: {
        product: true,
        user: true
      },
      orderBy: { createdAt: 'desc' }
    })
    
    if (reviews.length === 0) {
      await ctx.reply('üì≠ –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
      return
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º CSV
    let csv = 'ID,–¢–æ–≤–∞—Ä,–û—Ü–µ–Ω–∫–∞,–ó–∞–≥–æ–ª–æ–≤–æ–∫,–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π,–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,–î–∞—Ç–∞\n'
    
    for (const review of reviews) {
      csv += `"${review.id}","${review.product?.name || '–£–¥–∞–ª–µ–Ω'}",${review.rating},"${review.title || ''}","${review.comment || ''}","${review.user?.name || review.user?.email || 'N/A'}","${review.createdAt.toISOString().split('T')[0]}"\n`
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    await ctx.replyWithDocument(
      Buffer.from(csv, 'utf-8'),
      {
        filename: `reviews_export_${new Date().toISOString().split('T')[0]}.csv`,
        caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤ (${reviews.length} —à—Ç.)`
      }
    )
  } catch (error) {
    console.error('Error exporting reviews:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç–∑—ã–≤–æ–≤')
  }
}