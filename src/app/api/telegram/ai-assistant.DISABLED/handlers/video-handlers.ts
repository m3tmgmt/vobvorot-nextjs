import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2 } from '../utils'

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ï–û ===
// –í–ê–ñ–ù–û: –í —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã Video! 
// –í–∏–¥–µ–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–æ–ª–µ videoUrl —Ç–∞–±–ª–∏—Ü—ã Product

export async function handleUploadMainVideo(ctx: any, params: any) {
  try {
    await ctx.reply(
      `‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\\n\\n` +
      `–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∫ —Ç–æ–≤–∞—Ä–∞–º.\\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∫ —Ç–æ–≤–∞—Ä—É.`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error in handleUploadMainVideo:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã')
  }
}

export async function handleViewMainVideos(ctx: any, params: any) {
  try {
    await ctx.reply(
      `‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\\n\\n` +
      `–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.\\n` +
      `–í–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤.`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error in handleViewMainVideos:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã')
  }
}

export async function handleDeleteMainVideo(ctx: any, params: any) {
  try {
    await ctx.reply(
      `‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\\n\\n` +
      `–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error in handleDeleteMainVideo:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã')
  }
}

export async function handleUpdateVideoCaption(ctx: any, params: any) {
  try {
    await ctx.reply(
      `‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\\n\\n` +
      `–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ –Ω–µ –∏–º–µ—é—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π.\\n` +
      `–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error in handleUpdateVideoCaption:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã')
  }
}

export async function handleToggleVideoStatus(ctx: any, params: any) {
  try {
    await ctx.reply(
      `‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\\n\\n` +
      `–°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞.\\n` +
      `–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –µ–≥–æ –≤–∏–¥–µ–æ.`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error in handleToggleVideoStatus:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã')
  }
}

export async function handleUploadProductVideo(ctx: any, params: any) {
  try {
    const { productId, videoUrl } = params
    
    if (!productId || !videoUrl) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏ URL –≤–∏–¥–µ–æ')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
    const product = await prisma.product.findUnique({
      where: { id: productId }
    })
    
    if (!product) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤–∏–¥–µ–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    const updatedProduct = await prisma.product.update({
      where: { id: productId },
      data: { videoUrl }
    })
    
    await ctx.reply(
      `‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–æ–≤–∞—Ä—É\\!\\n\\n` +
      `üì¶ –¢–æ–≤–∞—Ä: ${escapeMarkdownV2(updatedProduct.name)}\\n` +
      `üé¨ –í–∏–¥–µ–æ: ${escapeMarkdownV2(videoUrl)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error uploading product video:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ –∫ —Ç–æ–≤–∞—Ä—É')
  }
}

export async function handleViewProductVideos(ctx: any, params: any) {
  try {
    const { productId } = params
    
    if (!productId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞')
      return
    }
    
    const product = await prisma.product.findUnique({
      where: { id: productId }
    })
    
    if (!product) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    if (!product.videoUrl) {
      await ctx.reply(`üì≠ –£ —Ç–æ–≤–∞—Ä–∞ "${product.name}" –Ω–µ—Ç –≤–∏–¥–µ–æ`)
      return
    }
    
    let message = `üé¨ *–í–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ "${escapeMarkdownV2(product.name)}":*\\n\\n`
    message += `üîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ](${product.videoUrl})\\n`
    message += `üì¶ ID —Ç–æ–≤–∞—Ä–∞: \`${escapeMarkdownV2(product.id)}\`\\n`
    if (product.description) {
      message += `üìù ${escapeMarkdownV2(product.description.substring(0, 200))}${product.description.length > 200 ? '...' : ''}`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2', disable_web_page_preview: true })
  } catch (error) {
    console.error('Error viewing product videos:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞')
  }
}

export async function handleDeleteProductVideo(ctx: any, params: any) {
  try {
    const { productId } = params
    
    if (!productId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞')
      return
    }
    
    const product = await prisma.product.findUnique({
      where: { id: productId }
    })
    
    if (!product) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    if (!product.videoUrl) {
      await ctx.reply('‚ùå –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      return
    }
    
    // –£–¥–∞–ª—è–µ–º URL –≤–∏–¥–µ–æ –∏–∑ —Ç–æ–≤–∞—Ä–∞
    await prisma.product.update({
      where: { id: productId },
      data: { videoUrl: null }
    })
    
    await ctx.reply(
      `‚úÖ –í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ\\!\\n\\n` +
      `üì¶ –¢–æ–≤–∞—Ä: ${escapeMarkdownV2(product.name)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error deleting product video:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞')
  }
}

export async function handleBulkVideoUpload(ctx: any, params: any) {
  try {
    const { videos } = params
    
    if (!videos || !Array.isArray(videos) || videos.length === 0) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –º–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏')
      return
    }
    
    let successCount = 0
    let errorCount = 0
    
    for (const videoData of videos) {
      try {
        if (videoData.productId && videoData.url) {
          await prisma.product.update({
            where: { id: videoData.productId },
            data: { videoUrl: videoData.url }
          })
          successCount++
        } else {
          errorCount++
        }
      } catch (error) {
        console.error('Error uploading video:', error)
        errorCount++
      }
    }
    
    await ctx.reply(
      `üìä –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!\\n\\n` +
      `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${successCount} –≤–∏–¥–µ–æ\\n` +
      `‚ùå –û—à–∏–±–æ–∫: ${errorCount}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error bulk uploading videos:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ')
  }
}

export async function handleVideoStatistics(ctx: any, params: any) {
  try {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å –≤–∏–¥–µ–æ
    const totalProducts = await prisma.product.count()
    const productsWithVideos = await prisma.product.count({
      where: {
        videoUrl: { not: null }
      }
    })
    
    const activeProductsWithVideos = await prisma.product.count({
      where: {
        videoUrl: { not: null },
        isActive: true
      }
    })
    
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ:*\\n\\n`
    message += `üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}\\n`
    message += `üé¨ –¢–æ–≤–∞—Ä–æ–≤ —Å –≤–∏–¥–µ–æ: ${productsWithVideos}\\n`
    message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∏–¥–µ–æ: ${activeProductsWithVideos}\\n\\n`
    
    message += `üìà *–ü–æ–∫—Ä—ã—Ç–∏–µ:*\\n`
    const coveragePercent = totalProducts > 0 ? ((productsWithVideos / totalProducts) * 100).toFixed(1) : 0
    message += `üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∏–¥–µ–æ: ${coveragePercent}%`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting video statistics:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–¥–µ–æ')
  }
}