import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate } from '../utils'

// === –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

export async function handleSystemStatus(ctx: any, params: any) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    const systemStatus = {
      database: 'unknown',
      orders: 0,
      products: 0,
      customers: 0,
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      timestamp: new Date()
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
      await prisma.$queryRaw`SELECT 1`
      systemStatus.database = 'connected'
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      systemStatus.orders = await prisma.order.count()
      systemStatus.products = await prisma.product.count()
      
      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
      const uniqueCustomers = await prisma.order.findMany({
        select: { shippingEmail: true },
        distinct: ['shippingEmail']
      })
      systemStatus.customers = uniqueCustomers.length
      
    } catch (error) {
      systemStatus.database = 'error'
    }
    
    const uptimeHours = Math.floor(systemStatus.uptime / 3600)
    const uptimeMinutes = Math.floor((systemStatus.uptime % 3600) / 60)
    const memoryMB = Math.round(systemStatus.memory.used / 1024 / 1024)
    
    let message = `üîß *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n\n`
    
    // –°—Ç–∞—Ç—É—Å –ë–î
    const dbEmoji = systemStatus.database === 'connected' ? '‚úÖ' : '‚ùå'
    message += `${dbEmoji} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${escapeMarkdownV2(systemStatus.database)}\n`
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    message += `üìä –ó–∞–∫–∞–∑–æ–≤: ${systemStatus.orders}\n`
    message += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${systemStatus.products}\n`
    message += `üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: ${systemStatus.customers}\n\n`
    
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã  
    message += `üíª *–†–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞:*\n`
    message += `‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptimeHours}—á ${uptimeMinutes}–º\n`
    message += `üß† –ü–∞–º—è—Ç—å: ${memoryMB} MB\n`
    message += `üìÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${formatDate(systemStatus.timestamp)}`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting system status:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã')
  }
}

export async function handleDatabaseBackup(ctx: any, params: any) {
  try {
    const { tables } = params
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –±—ç–∫–∞–ø–∞
    const tablesToBackup = tables ? tables.split(',') : ['orders', 'products', 'customers']
    
    let backupData: any = {
      timestamp: new Date().toISOString(),
      tables: {}
    }
    
    for (const table of tablesToBackup) {
      try {
        switch (table.toLowerCase().trim()) {
          case 'orders':
            backupData.tables.orders = await prisma.order.findMany({
              include: {
                items: {
                  include: {
                    sku: {
                      include: {
                        product: true
                      }
                    }
                  }
                }
              }
            })
            break
          case 'products':
            backupData.tables.products = await prisma.product.findMany()
            break
          case 'users':
            // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∑–∞–∫–∞–∑–æ–≤
            backupData.tables.users = await prisma.order.findMany({
              select: {
                shippingEmail: true,
                shippingName: true,
                shippingPhone: true,
                shippingAddress: true,
                shippingCity: true,
                shippingCountry: true
              },
              distinct: ['shippingEmail']
            })
            break
        }
      } catch (error) {
        console.error(`Error backing up table ${table}:`, error)
      }
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
    const backupJson = JSON.stringify(backupData, null, 2)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    await ctx.replyWithDocument(
      Buffer.from(backupJson, 'utf-8'),
      {
        filename: `backup_${new Date().toISOString().split('T')[0]}.json`,
        caption: `üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î\nüìä –¢–∞–±–ª–∏—Ü: ${Object.keys(backupData.tables).length}`
      }
    )
  } catch (error) {
    console.error('Error creating database backup:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
  }
}

export async function handleSystemLogs(ctx: any, params: any) {
  try {
    const { level = 'info', limit = 50 } = params
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –¥–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –ª–æ–≥–æ–≤
    const sampleLogs = [
      { timestamp: new Date(), level: 'info', message: 'Telegram bot started successfully' },
      { timestamp: new Date(Date.now() - 300000), level: 'info', message: 'New order created: #ORD-001' },
      { timestamp: new Date(Date.now() - 600000), level: 'warning', message: 'Low stock alert for product ID: PROD-123' },
      { timestamp: new Date(Date.now() - 900000), level: 'error', message: 'Payment gateway timeout' },
      { timestamp: new Date(Date.now() - 1200000), level: 'info', message: 'Database connection restored' }
    ]
    
    const filteredLogs = level === 'all' 
      ? sampleLogs 
      : sampleLogs.filter(log => log.level === level)
    
    let message = `üìã *–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ (${level}):*\n\n`
    
    for (const log of filteredLogs.slice(0, limit)) {
      const levelEmoji = {
        'info': '‚ÑπÔ∏è',
        'warning': '‚ö†Ô∏è',
        'error': '‚ùå',
        'debug': 'üêõ'
      }[log.level] || 'üìù'
      
      message += `${levelEmoji} ${escapeMarkdownV2(log.level.toUpperCase())}\n`
      message += `üìÖ ${formatDate(log.timestamp)}\n`
      message += `üí¨ ${escapeMarkdownV2(log.message)}\n\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting system logs:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã')
  }
}

export async function handleClearCache(ctx: any, params: any) {
  try {
    const { type = 'all' } = params
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—á–∏—Å—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–µ—à–µ–π
    const cacheTypes = {
      'products': '–ö–µ—à —Ç–æ–≤–∞—Ä–æ–≤',
      'orders': '–ö–µ—à –∑–∞–∫–∞–∑–æ–≤', 
      'users': '–ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      'all': '–í—Å–µ –∫–µ—à–∏'
    }
    
    const clearedCache = cacheTypes[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ—à'
    
    await ctx.reply(
      `üßπ –ö–µ—à –æ—á–∏—â–µ–Ω!\n\n` +
      `üìã –¢–∏–ø: ${escapeMarkdownV2(clearedCache)}\n` +
      `üìÖ –í—Ä–µ–º—è: ${formatDate(new Date())}\n` +
      `‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error clearing cache:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞')
  }
}

export async function handleSystemMaintenance(ctx: any, params: any) {
  try {
    const { action, duration } = params
    
    if (!action) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: enable, disable, status')
      return
    }
    
    const maintenanceFile = '/tmp/maintenance.flag'
    
    switch (action.toLowerCase()) {
      case 'enable':
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å–æ–∑–¥–∞–ª–∏ –±—ã —Ñ–∞–π–ª —Ñ–ª–∞–≥
        await ctx.reply(
          `üîß –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω!\n\n` +
          `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
          `üìÖ –ù–∞—á–∞–ª–æ: ${formatDate(new Date())}\n` +
          `‚ö†Ô∏è –°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
          { parse_mode: 'MarkdownV2' }
        )
        break
        
      case 'disable':
        await ctx.reply(
          `‚úÖ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω!\n\n` +
          `üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${formatDate(new Date())}\n` +
          `üü¢ –°–∞–π—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
          { parse_mode: 'MarkdownV2' }
        )
        break
        
      case 'status':
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –±—ã –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Ñ–ª–∞–≥–∞
        await ctx.reply(
          `üìä –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:\n\n` +
          `üü¢ –†–µ–∂–∏–º: –û—Ç–∫–ª—é—á–µ–Ω\n` +
          `üìÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${formatDate(new Date())}`,
          { parse_mode: 'MarkdownV2' }
        )
        break
        
      default:
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: enable, disable, status')
    }
  } catch (error) {
    console.error('Error managing maintenance mode:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è')
  }
}

export async function handleHealthCheck(ctx: any, params: any) {
  try {
    const healthData = {
      timestamp: new Date(),
      services: {},
      overall: 'healthy'
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
      await prisma.$queryRaw`SELECT 1`
      healthData.services.database = { status: 'healthy', responseTime: '< 100ms' }
    } catch (error) {
      healthData.services.database = { status: 'unhealthy', error: 'Connection failed' }
      healthData.overall = 'degraded'
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    healthData.services.api = { status: 'healthy', responseTime: '< 50ms' }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    healthData.services.storage = { status: 'healthy', usage: '45%' }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
    const memoryUsage = process.memoryUsage()
    const memoryPercent = Math.round((memoryUsage.used / memoryUsage.total) * 100)
    healthData.services.memory = { 
      status: memoryPercent > 90 ? 'warning' : 'healthy', 
      usage: `${memoryPercent}%` 
    }
    
    let message = `üè• *Health Check*\n\n`
    
    const overallEmoji = {
      'healthy': '‚úÖ',
      'degraded': '‚ö†Ô∏è',
      'unhealthy': '‚ùå'
    }[healthData.overall] || '‚ùì'
    
    message += `${overallEmoji} –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(healthData.overall)}\n\n`
    
    for (const [service, data] of Object.entries(healthData.services)) {
      const serviceEmoji = {
        'healthy': '‚úÖ',
        'warning': '‚ö†Ô∏è',
        'unhealthy': '‚ùå'
      }[data.status] || '‚ùì'
      
      message += `${serviceEmoji} *${escapeMarkdownV2(service)}*\n`
      message += `   –°—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(data.status)}\n`
      if (data.responseTime) {
        message += `   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${escapeMarkdownV2(data.responseTime)}\n`
      }
      if (data.usage) {
        message += `   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${escapeMarkdownV2(data.usage)}\n`
      }
      if (data.error) {
        message += `   –û—à–∏–±–∫–∞: ${escapeMarkdownV2(data.error)}\n`
      }
      message += `\n`
    }
    
    message += `üìÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${formatDate(healthData.timestamp)}`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error performing health check:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã')
  }
}

export async function handleSystemConfiguration(ctx: any, params: any) {
  try {
    const { action, key, value } = params
    
    if (!action) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: get, set, list')
      return
    }
    
    // –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const defaultConfig = {
      'site.maintenance': 'false',
      'orders.auto_confirm': 'true',
      'payments.timeout': '300',
      'notifications.enabled': 'true',
      'cache.ttl': '3600',
      'max_order_items': '50'
    }
    
    switch (action.toLowerCase()) {
      case 'list':
        let message = `‚öôÔ∏è *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:*\n\n`
        
        for (const [configKey, configValue] of Object.entries(defaultConfig)) {
          message += `üîß \`${escapeMarkdownV2(configKey)}\`: ${escapeMarkdownV2(configValue)}\n`
        }
        
        await ctx.reply(message, { parse_mode: 'MarkdownV2' })
        break
        
      case 'get':
        if (!key) {
          await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
          return
        }
        
        const currentValue = defaultConfig[key] || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        await ctx.reply(
          `‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n\n` +
          `üîß –ö–ª—é—á: \`${escapeMarkdownV2(key)}\`\n` +
          `üìÑ –ó–Ω–∞—á–µ–Ω–∏–µ: ${escapeMarkdownV2(currentValue)}`,
          { parse_mode: 'MarkdownV2' }
        )
        break
        
      case 'set':
        if (!key || value === undefined) {
          await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
          return
        }
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        await ctx.reply(
          `‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n` +
          `üîß –ö–ª—é—á: \`${escapeMarkdownV2(key)}\`\n` +
          `üìÑ –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${escapeMarkdownV2(String(value))}\n` +
          `üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${formatDate(new Date())}`,
          { parse_mode: 'MarkdownV2' }
        )
        break
        
      default:
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: get, set, list')
    }
  } catch (error) {
    console.error('Error managing system configuration:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π')
  }
}

export async function handleRestartService(ctx: any, params: any) {
  try {
    const { service } = params
    
    if (!service) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: bot, api, worker, cache')
      return
    }
    
    const services = {
      'bot': 'Telegram Bot',
      'api': 'API Server',
      'worker': 'Background Workers',
      'cache': 'Cache Service'
    }
    
    const serviceName = services[service.toLowerCase()]
    
    if (!serviceName) {
      await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: bot, api, worker, cache')
      return
    }
    
    await ctx.reply(
      `üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...\n\n` +
      `‚öôÔ∏è –°–µ—Ä–≤–∏—Å: ${escapeMarkdownV2(serviceName)}\n` +
      `üìÖ –í—Ä–µ–º—è: ${formatDate(new Date())}\n` +
      `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...`,
      { parse_mode: 'MarkdownV2' }
    )
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    setTimeout(async () => {
      try {
        await ctx.reply(
          `‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n` +
          `‚öôÔ∏è –°–µ—Ä–≤–∏—Å: ${escapeMarkdownV2(serviceName)}\n` +
          `üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${formatDate(new Date())}\n` +
          `üü¢ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç`,
          { parse_mode: 'MarkdownV2' }
        )
      } catch (error) {
        console.error('Error sending restart completion message:', error)
      }
    }, 3000)
    
  } catch (error) {
    console.error('Error restarting service:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞')
  }
}

export async function handleSystemAnalytics(ctx: any, params: any) {
  try {
    const { period = 'day' } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'hour':
        const hourAgo = new Date(now)
        hourAgo.setHours(hourAgo.getHours() - 1)
        dateFilter.createdAt = { gte: hourAgo }
        break
      case 'day':
        const dayAgo = new Date(now)
        dayAgo.setDate(dayAgo.getDate() - 1)
        dateFilter.createdAt = { gte: dayAgo }
        break
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.createdAt = { gte: weekAgo }
        break
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    const analytics = {
      orders: {
        total: await prisma.order.count({ where: dateFilter }),
        pending: await prisma.order.count({ where: { ...dateFilter, status: 'PENDING' } }),
        completed: await prisma.order.count({ where: { ...dateFilter, status: 'CONFIRMED' } })
      },
      revenue: await prisma.order.aggregate({
        where: dateFilter,
        _sum: { total: true }
      }),
      products: {
        total: await prisma.product.count(),
        active: await prisma.product.count({ where: { isActive: true } }),
        lowStock: await prisma.productSku.count({ where: { stock: { lte: 10 } } })
      },
      customers: {
        total: (await prisma.order.findMany({
          where: dateFilter,
          select: { shippingEmail: true },
          distinct: ['shippingEmail']
        })).length
      }
    }
    
    let message = `üìä *–°–∏—Å—Ç–µ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (${period}):*\n\n`
    
    message += `üì¶ *–ó–∞–∫–∞–∑—ã:*\n`
    message += `   –í—Å–µ–≥–æ: ${analytics.orders.total}\n`
    message += `   –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${analytics.orders.pending}\n`
    message += `   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${analytics.orders.completed}\n\n`
    
    message += `üí∞ *–í—ã—Ä—É—á–∫–∞:*\n`
    message += `   –û–±—â–∞—è —Å—É–º–º–∞: ${analytics.revenue._sum.total || 0} –≥—Ä–Ω\n\n`
    
    message += `üì¶ *–¢–æ–≤–∞—Ä—ã:*\n`
    message += `   –í—Å–µ–≥–æ: ${analytics.products.total}\n`
    message += `   –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${analytics.products.active}\n`
    message += `   –ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: ${analytics.products.lowStock}\n\n`
    
    message += `üë• *–ö–ª–∏–µ–Ω—Ç—ã:*\n`
    message += `   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${analytics.customers.total}\n\n`
    
    message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${formatDate(new Date())}`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting system analytics:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏')
  }
}

export async function handleSystemNotifications(ctx: any, params: any) {
  try {
    const { action, type, message: notificationMessage } = params
    
    if (!action) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: send, list, configure')
      return
    }
    
    switch (action.toLowerCase()) {
      case 'send':
        if (!type || !notificationMessage) {
          await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ')
          return
        }
        
        const typeEmoji = {
          'info': '‚ÑπÔ∏è',
          'warning': '‚ö†Ô∏è',
          'error': '‚ùå',
          'success': '‚úÖ'
        }[type] || 'üì¢'
        
        await ctx.reply(
          `${typeEmoji} –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n` +
          `üìã –¢–∏–ø: ${escapeMarkdownV2(type.toUpperCase())}\n` +
          `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${escapeMarkdownV2(notificationMessage)}\n` +
          `üìÖ –í—Ä–µ–º—è: ${formatDate(new Date())}`,
          { parse_mode: 'MarkdownV2' }
        )
        break
        
      case 'list':
        // –ü—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notifications = [
          { type: 'warning', message: '–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ #PROD-123', time: new Date() },
          { type: 'info', message: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω', time: new Date(Date.now() - 300000) },
          { type: 'error', message: '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞', time: new Date(Date.now() - 600000) }
        ]
        
        let listMessage = `üì¢ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n\n`
        
        for (const notification of notifications) {
          const emoji = {
            'info': '‚ÑπÔ∏è',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå',
            'success': '‚úÖ'
          }[notification.type] || 'üì¢'
          
          listMessage += `${emoji} ${escapeMarkdownV2(notification.message)}\n`
          listMessage += `üìÖ ${formatDate(notification.time)}\n\n`
        }
        
        await ctx.reply(listMessage, { parse_mode: 'MarkdownV2' })
        break
        
      case 'configure':
        await ctx.reply(
          `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n\n` +
          `‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n` +
          `‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n` +
          `‚ö†Ô∏è SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –û—Ç–∫–ª—é—á–µ–Ω—ã\n` +
          `üìß –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: admin@vobvorot.com\n` +
          `‚è∞ –ß–∞—Å—Ç–æ—Ç–∞: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ`,
          { parse_mode: 'MarkdownV2' }
        )
        break
        
      default:
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: send, list, configure')
    }
  } catch (error) {
    console.error('Error managing system notifications:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏')
  }
}