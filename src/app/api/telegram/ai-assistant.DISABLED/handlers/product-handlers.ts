import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatPrice } from '../utils'
import { ProductStatus } from '@prisma/client'

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò ===

export async function handleAddProduct(ctx: any, params: any) {
  try {
    const { name, description, price, categoryId, stock = 0, weight = 0, brand } = params
    
    if (!name || !price || !categoryId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É –∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const category = await prisma.category.findUnique({
      where: { id: categoryId }
    })
    
    if (!category) {
      await ctx.reply('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä —Å ProductSku
    const product = await prisma.product.create({
      data: {
        name,
        slug: name.toLowerCase().replace(/[^a-z0-9]+/g, '-'),
        description: description || '',
        brand: brand || '',
        categoryId,
        isActive: true,
        skus: {
          create: [{
            sku: `${name.toLowerCase().replace(/[^a-z0-9]+/g, '-')}-default`,
            price,
            stock,
            weight: weight || null,
            isActive: true
          }]
        }
      },
      include: {
        skus: true,
        category: true
      }
    })
    
    await ctx.reply(
      `‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω\\!\\n\\n` +
      `üÜî ID: \`${escapeMarkdownV2(product.id)}\`\\n` +
      `üì¶ ${escapeMarkdownV2(product.name)}\\n` +
      `üí∞ ${formatPrice(product.skus[0].price)}\\n` +
      `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.skus[0].stock} —à—Ç\\.\\n` +
      `üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${escapeMarkdownV2(product.category.name)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error adding product:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')
  }
}

export async function handleEditProduct(ctx: any, params: any) {
  try {
    const { productId, field, value } = params
    
    if (!productId || !field || value === undefined) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –ø–æ–ª–µ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
      return
    }
    
    const updateData: any = {}
    updateData[field] = value
    
    const product = await prisma.product.update({
      where: { id: productId },
      data: updateData
    })
    
    await ctx.reply(
      `‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω\\!\\n` +
      `üì¶ ${escapeMarkdownV2(product.name)}\\n` +
      `üìù ${escapeMarkdownV2(field)}: ${escapeMarkdownV2(String(value))}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error editing product:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')
  }
}

export async function handleUpdateProductPrice(ctx: any, params: any) {
  try {
    const { productId, price, skuId } = params
    
    if (!productId || !price) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É')
      return
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —Å SKU
    const product = await prisma.product.findUnique({
      where: { id: productId },
      include: { skus: true }
    })
    
    if (!product) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π SKU –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π
    const targetSkuId = skuId || product.skus[0]?.id
    
    if (!targetSkuId) {
      await ctx.reply('‚ùå –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç SKU')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ ProductSku
    await prisma.productSku.update({
      where: { id: targetSkuId },
      data: { price }
    })
    
    await ctx.reply(
      `‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\\!\\n` +
      `üì¶ ${escapeMarkdownV2(product.name)}\\n` +
      `üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${formatPrice(price)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error updating price:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã')
  }
}

export async function handleUpdateProductStock(ctx: any, params: any) {
  try {
    const { productId, stock, skuId } = params
    
    if (!productId || stock === undefined) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
      return
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —Å SKU
    const product = await prisma.product.findUnique({
      where: { id: productId },
      include: { skus: true }
    })
    
    if (!product) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π SKU –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π
    const targetSkuId = skuId || product.skus[0]?.id
    
    if (!targetSkuId) {
      await ctx.reply('‚ùå –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç SKU')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º stock –≤ ProductSku
    await prisma.productSku.update({
      where: { id: targetSkuId },
      data: { stock }
    })
    
    await ctx.reply(
      `‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\\!\\n` +
      `üì¶ ${escapeMarkdownV2(product.name)}\\n` +
      `üìä –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stock} —à—Ç\\.`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error updating stock:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞')
  }
}

export async function handleUpdateProductStatus(ctx: any, params: any) {
  try {
    const { productId, status } = params
    
    if (!productId || !status) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å (active/inactive)')
      return
    }
    
    const lowerStatus = status.toLowerCase()
    const validStatuses = ['active', 'inactive']
    
    if (!validStatuses.includes(lowerStatus)) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${validStatuses.join(', ')}`)
      return
    }
    
    const isActive = lowerStatus === 'active'
    
    const product = await prisma.product.update({
      where: { id: productId },
      data: { isActive }
    })
    
    await ctx.reply(
      `‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω\\!\\n` +
      `üì¶ ${escapeMarkdownV2(product.name)}\\n` +
      `üìç –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error updating status:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞')
  }
}

export async function handleAddProductPhotos(ctx: any, params: any) {
  try {
    const { productId } = params
    
    if (!productId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ')
      return
    }
    
    await ctx.reply(
      `üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID: ${escapeMarkdownV2(productId)}\\n` +
      `–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É`,
      { parse_mode: 'MarkdownV2' }
    )
    
    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å productId –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ç–æ
  } catch (error) {
    console.error('Error in add product photos:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ')
  }
}

export async function handleDeleteProductPhoto(ctx: any, params: any) {
  try {
    const { productId, photoId } = params
    
    if (!productId || !photoId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏ ID —Ñ–æ—Ç–æ')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    const product = await prisma.product.findUnique({
      where: { id: productId }
    })
    
    if (!product) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ ProductImage table
    const deletedImage = await prisma.productImage.delete({
      where: { 
        id: photoId,
        productId: productId
      }
    })
    
    await ctx.reply('‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ')
  } catch (error) {
    console.error('Error deleting photo:', error)
    if (error instanceof Error && error.message.includes('Record to delete does not exist')) {
      await ctx.reply('‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ')
    }
  }
}

export async function handleAddProductVideos(ctx: any, params: any) {
  try {
    const { productId } = params
    
    if (!productId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ')
      return
    }
    
    await ctx.reply(
      `üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID: ${escapeMarkdownV2(productId)}`,
      { parse_mode: 'MarkdownV2' }
    )
    
    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å productId –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤–∏–¥–µ–æ
  } catch (error) {
    console.error('Error in add product videos:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ')
  }
}

export async function handleDeleteProductVideo(ctx: any, params: any) {
  try {
    const { productId, videoId } = params
    
    if (!productId || !videoId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –∏ ID –≤–∏–¥–µ–æ')
      return
    }
    
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ Cloudinary –∏ –ë–î
    
    await ctx.reply('‚úÖ –í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ')
  } catch (error) {
    console.error('Error deleting video:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ')
  }
}

export async function handleSearchProduct(ctx: any, params: any) {
  try {
    const { query } = params
    
    if (!query) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
      return
    }
    
    const products = await prisma.product.findMany({
      where: {
        AND: [
          { isActive: true },
          {
            OR: [
              { name: { contains: query, mode: 'insensitive' } },
              { description: { contains: query, mode: 'insensitive' } },
              { brand: { contains: query, mode: 'insensitive' } },
              { category: { name: { contains: query, mode: 'insensitive' } } }
            ]
          }
        ]
      },
      include: {
        skus: {
          select: {
            id: true,
            price: true,
            stock: true
          }
        },
        category: true
      },
      take: 10,
      orderBy: { createdAt: 'desc' }
    })
    
    if (products.length === 0) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }
    
    let message = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\\n\\n`
    
    for (const product of products) {
      const firstSku = product.skus[0]
      const statusEmoji = product.isActive ? '‚úÖ' : '‚è∏'
      
      message += `${statusEmoji} *${escapeMarkdownV2(product.name)}*\\n`
      message += `üÜî ID: \`${escapeMarkdownV2(product.id)}\`\\n`
      message += `üí∞ ${firstSku ? formatPrice(firstSku.price) : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\\n`
      message += `üìä –û—Å—Ç–∞—Ç–æ–∫: ${firstSku ? firstSku.stock : 0} —à—Ç\\.\\n`
      message += `üè∑ ${escapeMarkdownV2(product.category.name)}\\n\\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error searching products:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤')
  }
}

export async function handleViewProducts(ctx: any, params: any) {
  try {
    const { category, status } = params
    
    let where: any = { isActive: true }
    if (category) {
      where.category = { name: { contains: category, mode: 'insensitive' } }
    }
    
    const products = await prisma.product.findMany({
      where,
      include: {
        skus: { select: { price: true, stock: true } },
        category: true
      },
      take: 20,
      orderBy: { createdAt: 'desc' }
    })
    
    if (products.length === 0) {
      await ctx.reply('üì≠ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return
    }
    
    let message = `üì¶ *–¢–æ–≤–∞—Ä—ã ${category ? `–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}` : ''}:*\\n\\n`
    
    for (const product of products) {
      const firstSku = product.skus[0]
      const statusEmoji = product.isActive ? '‚úÖ' : '‚è∏'
      
      message += `${statusEmoji} *${escapeMarkdownV2(product.name)}*\\n`
      message += `üí∞ ${firstSku ? formatPrice(firstSku.price) : '–ù/–î'} | üìä ${firstSku ? firstSku.stock : 0} —à—Ç\\.\\n\\n`
    }
    
    message += `\\n_–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}_`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error viewing products:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–≤–∞—Ä–æ–≤')
  }
}

export async function handleViewProductsByCategory(ctx: any, params: any) {
  try {
    const { categoryId } = params
    
    if (!categoryId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
      return
    }
    
    const products = await prisma.product.findMany({
      where: { category: categoryId },
      orderBy: { createdAt: 'desc' }
    })
    
    if (products.length === 0) {
      await ctx.reply('üì≠ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤')
      return
    }
    
    let message = `üè∑ *–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${escapeMarkdownV2(categoryId)}:*\\n\\n`
    
    for (const product of products) {
      message += `‚Ä¢ ${escapeMarkdownV2(product.name)} \\- ${formatPrice(product.price)}\\n`
    }
    
    message += `\\n_–í—Å–µ–≥–æ: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤_`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error viewing category products:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
  }
}

export async function handleDeleteProduct(ctx: any, params: any) {
  try {
    const { productId } = params
    
    if (!productId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º
    const activeOrders = await prisma.orderItem.findMany({
      where: {
        productId,
        order: {
          status: {
            in: ['PENDING', 'PROCESSING', 'PAID', 'SHIPPED']
          }
        }
      }
    })
    
    if (activeOrders.length > 0) {
      await ctx.reply('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏')
      return
    }
    
    const product = await prisma.product.delete({
      where: { id: productId }
    })
    
    await ctx.reply(
      `‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω\\!\\n` +
      `üì¶ ${escapeMarkdownV2(product.name)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error deleting product:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')
  }
}

export async function handleBulkEditProducts(ctx: any, params: any) {
  try {
    const { productIds, field, value } = params
    
    if (!productIds || !Array.isArray(productIds) || productIds.length === 0 || !field || value === undefined) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –º–∞—Å—Å–∏–≤ ID —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–ª–µ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ')
      return
    }
    
    const updateData: any = {}
    updateData[field] = value
    
    const result = await prisma.product.updateMany({
      where: { id: { in: productIds } },
      data: updateData
    })
    
    await ctx.reply(
      `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.count}\\n` +
      `üìù ${escapeMarkdownV2(field)}: ${escapeMarkdownV2(String(value))}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error bulk editing products:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏')
  }
}

export async function handleExportProducts(ctx: any, params: any) {
  try {
    const { format = 'csv' } = params
    
    const products = await prisma.product.findMany({
      orderBy: { createdAt: 'desc' }
    })
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º CSV
    let csv = 'ID,–ù–∞–∑–≤–∞–Ω–∏–µ,–¶–µ–Ω–∞,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–°—Ç–∞—Ç—É—Å,–ë—Ä–µ–Ω–¥\n'
    for (const product of products) {
      csv += `${product.id},"${product.name}",${product.price},${product.quantity},"${product.category}",${product.status},"${product.brand || ''}"\n`
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    await ctx.replyWithDocument(
      Buffer.from(csv, 'utf-8'),
      {
        filename: `products_export_${new Date().toISOString().split('T')[0]}.csv`,
        caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ (${products.length} —à—Ç.)`
      }
    )
  } catch (error) {
    console.error('Error exporting products:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤')
  }
}

export async function handleImportProducts(ctx: any, params: any) {
  try {
    const { fileUrl } = params
    
    if (!fileUrl) {
      await ctx.reply('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏')
      return
    }
    
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç –∏–∑ CSV
    await ctx.reply('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
  } catch (error) {
    console.error('Error importing products:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤')
  }
}

export async function handleProductDetails(ctx: any, params: any) {
  try {
    const { productId } = params
    
    if (!productId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞')
      return
    }
    
    const product = await prisma.product.findUnique({
      where: { id: productId }
    })
    
    if (!product) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    let message = `üì¶ *–î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞*\\n\\n`
    message += `üÜî ID: \`${escapeMarkdownV2(product.id)}\`\\n`
    message += `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${escapeMarkdownV2(product.name)}\\n`
    message += `üí∞ –¶–µ–Ω–∞: ${formatPrice(product.price)}\\n`
    message += `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.quantity} —à—Ç\\.\\n`
    message += `üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${escapeMarkdownV2(product.category)}\\n`
    message += `üìç –°—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(product.status)}\\n`
    
    if (product.brand) {
      message += `üè≠ –ë—Ä–µ–Ω–¥: ${escapeMarkdownV2(product.brand)}\\n`
    }
    
    if (product.weight) {
      message += `‚öñÔ∏è –í–µ—Å: ${product.weight} –≥\\n`
    }
    
    if (product.description) {
      message += `\\nüìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*\\n${escapeMarkdownV2(product.description)}\\n`
    }
    
    if (product.images.length > 0) {
      message += `\\nüñº –§–æ—Ç–æ: ${product.images.length} —à—Ç\\.`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting product details:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞')
  }
}

export async function handleLowStockProducts(ctx: any, params: any) {
  try {
    const { threshold = 10 } = params
    
    const products = await prisma.product.findMany({
      where: {
        quantity: { lte: threshold },
        status: 'ACTIVE'
      },
      orderBy: { quantity: 'asc' }
    })
    
    if (products.length === 0) {
      await ctx.reply(`‚úÖ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–æ–º –º–µ–Ω—å—à–µ ${threshold} —à—Ç.`)
      return
    }
    
    let message = `‚ö†Ô∏è *–¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º \\(‚â§${threshold}\\):*\\n\\n`
    
    for (const product of products) {
      message += `üì¶ ${escapeMarkdownV2(product.name)}\\n`
      message += `   üìä –û—Å—Ç–∞—Ç–æ–∫: ${product.quantity} —à—Ç\\.\\n\\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting low stock products:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º')
  }
}

export async function handleOutOfStockProducts(ctx: any, params: any) {
  try {
    const products = await prisma.product.findMany({
      where: {
        OR: [
          { quantity: 0 },
          { status: 'OUT_OF_STOCK' }
        ]
      }
    })
    
    if (products.length === 0) {
      await ctx.reply('‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏')
      return
    }
    
    let message = `‚ùå *–¢–æ–≤–∞—Ä—ã –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏:*\\n\\n`
    
    for (const product of products) {
      message += `‚Ä¢ ${escapeMarkdownV2(product.name)} \\(ID: ${escapeMarkdownV2(product.id)}\\)\\n`
    }
    
    message += `\\n_–í—Å–µ–≥–æ: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤_`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting out of stock products:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏')
  }
}

export async function handleDuplicateProduct(ctx: any, params: any) {
  try {
    const { productId } = params
    
    if (!productId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }
    
    const original = await prisma.product.findUnique({
      where: { id: productId }
    })
    
    if (!original) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    const duplicate = await prisma.product.create({
      data: {
        name: `${original.name} (–∫–æ–ø–∏—è)`,
        description: original.description,
        price: original.price,
        quantity: original.quantity,
        weight: original.weight,
        brand: original.brand,
        status: original.status,
        category: original.category,
        images: original.images
      }
    })
    
    await ctx.reply(
      `‚úÖ –¢–æ–≤–∞—Ä –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω\\!\\n\\n` +
      `üÜî –ù–æ–≤—ã–π ID: \`${escapeMarkdownV2(duplicate.id)}\`\\n` +
      `üì¶ ${escapeMarkdownV2(duplicate.name)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error duplicating product:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')
  }
}