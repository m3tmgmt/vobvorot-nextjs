import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate, formatPrice } from '../utils'

// === –ú–ê–†–ö–ï–¢–ò–ù–ì –ò –ü–†–û–ú–û ===
// –í–ê–ñ–ù–û: –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ email –∫–∞–º–ø–∞–Ω–∏–π —Ç—Ä–µ–±—É—é—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü PromoCode –∏ EmailCampaign!
// –≠—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ Prisma

export async function handleCreatePromoCode(ctx: any, params: any) {
  try {
    const { 
      code, 
      discountType = 'percentage', 
      discountValue, 
      validFrom, 
      validTo, 
      maxUses = 100,
      minOrderAmount = 0
    } = params
    
    if (!code || !discountValue) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–¥
    const existingPromo = await prisma.promoCode.findUnique({
      where: { code: code.toUpperCase() }
    })
    
    if (existingPromo) {
      await ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      return
    }
    
    const promoCode = await prisma.promoCode.create({
      data: {
        code: code.toUpperCase(),
        discountType: discountType.toUpperCase(),
        discountValue: parseFloat(discountValue),
        validFrom: validFrom ? new Date(validFrom) : new Date(),
        validTo: validTo ? new Date(validTo) : new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // +30 –¥–Ω–µ–π
        maxUses: parseInt(maxUses),
        usedCount: 0,
        minOrderAmount: parseFloat(minOrderAmount),
        isActive: true
      }
    })
    
    const discountText = discountType === 'percentage' 
      ? `${discountValue}%` 
      : `${discountValue} –≥—Ä–Ω`
    
    await ctx.reply(
      `üéâ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n` +
      `üé´ –ö–æ–¥: \`${escapeMarkdownV2(promoCode.code)}\`\n` +
      `üí∞ –°–∫–∏–¥–∫–∞: ${escapeMarkdownV2(discountText)}\n` +
      `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç —Å: ${formatDate(promoCode.validFrom)}\n` +
      `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${formatDate(promoCode.validTo)}\n` +
      `üìä –ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promoCode.maxUses}\n` +
      `üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${formatPrice(promoCode.minOrderAmount)}\n` +
      `üÜî ID: \`${escapeMarkdownV2(promoCode.id)}\``,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error creating promo code:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞')
  }
}

export async function handleViewPromoCodes(ctx: any, params: any) {
  try {
    const { status = 'all' } = params
    
    let where: any = {}
    
    switch (status.toLowerCase()) {
      case 'active':
        where = {
          isActive: true,
          validTo: { gte: new Date() }
        }
        break
      case 'expired':
        where = {
          OR: [
            { isActive: false },
            { validTo: { lt: new Date() } }
          ]
        }
        break
      case 'used':
        where = {
          usedCount: { gte: 1 }
        }
        break
    }
    
    const promoCodes = await prisma.promoCode.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      take: 15
    })
    
    if (promoCodes.length === 0) {
      await ctx.reply('üì≠ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return
    }
    
    let message = `üé´ *–ü—Ä–æ–º–æ–∫–æ–¥—ã (${status}):*\n\n`
    
    for (const promo of promoCodes) {
      const isExpired = promo.validTo < new Date()
      const isExhausted = promo.usedCount >= promo.maxUses
      const statusEmoji = promo.isActive && !isExpired && !isExhausted ? '‚úÖ' : '‚ùå'
      
      const discountText = promo.discountType === 'PERCENTAGE' 
        ? `${promo.discountValue}%` 
        : `${promo.discountValue} –≥—Ä–Ω`
      
      message += `${statusEmoji} **${escapeMarkdownV2(promo.code)}**\n`
      message += `üí∞ –°–∫–∏–¥–∫–∞: ${escapeMarkdownV2(discountText)}\n`
      message += `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${promo.usedCount}/${promo.maxUses}\n`
      message += `üìÖ –î–æ: ${formatDate(promo.validTo)}\n`
      
      if (promo.minOrderAmount > 0) {
        message += `üíµ –ú–∏–Ω. —Å—É–º–º–∞: ${formatPrice(promo.minOrderAmount)}\n`
      }
      
      message += `\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error viewing promo codes:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')
  }
}

export async function handleEmailCampaign(ctx: any, params: any) {
  try {
    const { 
      campaignName, 
      subject, 
      template, 
      segment = 'all',
      scheduleDate 
    } = params
    
    if (!campaignName || !subject) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Ç–µ–º—É –ø–∏—Å—å–º–∞')
      return
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–º–µ–Ω—Ç–∞
    let targetCustomers = []
    
    switch (segment.toLowerCase()) {
      case 'vip':
        // VIP –∫–ª–∏–µ–Ω—Ç—ã (—Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫ > 5000 –≥—Ä–Ω)
        const vipCustomers = await prisma.order.groupBy({
          by: ['shippingEmail', 'shippingName'],
          _sum: { total: true },
          having: { total: { _sum: { gt: 5000 } } }
        })
        targetCustomers = vipCustomers.map(c => ({ email: c.shippingEmail, name: c.shippingName }))
        break
        
      case 'inactive':
        // –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (–±–æ–ª–µ–µ 60 –¥–Ω–µ–π –±–µ–∑ –ø–æ–∫—É–ø–æ–∫)
        const sixtyDaysAgo = new Date(Date.now() - 60 * 24 * 60 * 60 * 1000)
        const inactiveEmails = await prisma.order.findMany({
          where: {
            createdAt: { lt: sixtyDaysAgo }
          },
          select: { shippingEmail: true, shippingName: true },
          distinct: ['shippingEmail']
        })
        targetCustomers = inactiveEmails.map(c => ({ email: c.shippingEmail, name: c.shippingName }))
        break
        
      case 'new':
        // –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (–ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –º–µ–Ω–µ–µ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
        const newCustomers = await prisma.order.findMany({
          where: {
            createdAt: { gte: thirtyDaysAgo }
          },
          select: { shippingEmail: true, shippingName: true },
          distinct: ['shippingEmail']
        })
        targetCustomers = newCustomers.map(c => ({ email: c.shippingEmail, name: c.shippingName }))
        break
        
      default:
        // –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
        const allCustomers = await prisma.order.findMany({
          select: { shippingEmail: true, shippingName: true },
          distinct: ['shippingEmail']
        })
        targetCustomers = allCustomers.map(c => ({ email: c.shippingEmail, name: c.shippingName }))
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
    const campaign = await prisma.emailCampaign.create({
      data: {
        name: campaignName,
        subject,
        template: template || 'default',
        segment,
        targetCount: targetCustomers.length,
        sentCount: 0,
        status: scheduleDate ? 'SCHEDULED' : 'DRAFT',
        scheduledDate: scheduleDate ? new Date(scheduleDate) : null
      }
    })
    
    let message = `üìß *Email –∫–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!*\n\n`
    message += `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${escapeMarkdownV2(campaignName)}\n`
    message += `üì¨ –¢–µ–º–∞: ${escapeMarkdownV2(subject)}\n`
    message += `üéØ –°–µ–≥–º–µ–Ω—Ç: ${escapeMarkdownV2(segment.toUpperCase())}\n`
    message += `üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${targetCustomers.length}\n`
    message += `üìÖ –°—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(campaign.status)}\n`
    
    if (scheduleDate) {
      message += `‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${formatDate(new Date(scheduleDate))}\n`
    }
    
    message += `üÜî ID –∫–∞–º–ø–∞–Ω–∏–∏: \`${escapeMarkdownV2(campaign.id)}\`\n\n`
    
    // –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    message += `üë• *–ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:*\n`
    for (const customer of targetCustomers.slice(0, 5)) {
      message += `‚Ä¢ ${escapeMarkdownV2(customer.name || '–ë–µ–∑ –∏–º–µ–Ω–∏')} (${escapeMarkdownV2(customer.email)})\n`
    }
    
    if (targetCustomers.length > 5) {
      message += `_–ò –µ—â–µ ${targetCustomers.length - 5} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π..._\n\n`
    }
    
    message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:*\n`
    message += `‚Ä¢ VIP –∫–ª–∏–µ–Ω—Ç—ã: –≤—ã—Å–æ–∫–∏–π ROI, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n`
    message += `‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: —Å–∫–∏–¥–∫–∏ 15-20% –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞\n`
    message += `‚Ä¢ –ù–æ–≤—ã–µ: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è, –≥–∞–π–¥—ã\n`
    message += `‚Ä¢ –í—Å–µ: –æ–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error creating email campaign:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ email –∫–∞–º–ø–∞–Ω–∏–∏')
  }
}

export async function handleAnalyticsReport(ctx: any, params: any) {
  try {
    const { 
      period = 'month', 
      metrics = 'all',
      format = 'summary'
    } = params
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.createdAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter.createdAt = { gte: monthAgo }
        break
      case 'quarter':
        const quarterAgo = new Date(now)
        quarterAgo.setMonth(quarterAgo.getMonth() - 3)
        dateFilter.createdAt = { gte: quarterAgo }
        break
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const analytics = {
      orders: {
        total: await prisma.order.count({ where: dateFilter }),
        completed: await prisma.order.count({ 
          where: { ...dateFilter, status: { in: ['DELIVERED', 'CONFIRMED'] } } 
        }),
        cancelled: await prisma.order.count({ 
          where: { ...dateFilter, status: 'CANCELLED' } 
        })
      },
      revenue: await prisma.order.aggregate({
        where: { ...dateFilter, status: { in: ['DELIVERED', 'CONFIRMED'] } },
        _sum: { total: true },
        _avg: { total: true }
      }),
      customers: {
        total: (await prisma.order.findMany({
          where: dateFilter,
          select: { email: true },
          distinct: ['shippingEmail']
        })).length,
        new: (await prisma.order.findMany({
          where: {
            ...dateFilter,
            // –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã - –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ
          },
          select: { email: true },
          distinct: ['shippingEmail']
        })).length
      },
      products: {
        sold: await prisma.orderItem.aggregate({
          where: {
            order: { ...dateFilter, status: { in: ['DELIVERED', 'CONFIRMED'] } }
          },
          _sum: { quantity: true }
        }),
        topSelling: await prisma.orderItem.groupBy({
          by: ['productId'],
          where: {
            order: { ...dateFilter, status: { in: ['DELIVERED', 'CONFIRMED'] } }
          },
          _sum: { quantity: true },
          orderBy: { _sum: { quantity: 'desc' } },
          take: 5
        })
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø —Ç–æ–≤–∞—Ä–∞—Ö
    const topProducts = []
    for (const item of analytics.products.topSelling) {
      const product = await prisma.product.findUnique({
        where: { id: item.productId }
      })
      if (product) {
        topProducts.push({
          name: product.name,
          sold: item._sum.quantity || 0
        })
      }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const conversionRate = analytics.orders.total > 0 
      ? ((analytics.orders.completed / analytics.orders.total) * 100).toFixed(1)
      : 0
    
    const avgOrderValue = analytics.revenue._avg.total || 0
    const customerAcquisitionCost = 50 // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const lifetimeValue = avgOrderValue * 3 // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
    
    let message = `üìä *–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (${period})*\n\n`
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    message += `üí∞ **–í—ã—Ä—É—á–∫–∞:**\n`
    message += `‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${formatPrice(analytics.revenue._sum.total || 0)}\n`
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formatPrice(avgOrderValue)}\n`
    message += `‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${conversionRate}%\n\n`
    
    message += `üì¶ **–ó–∞–∫–∞–∑—ã:**\n`
    message += `‚Ä¢ –í—Å–µ–≥–æ: ${analytics.orders.total}\n`
    message += `‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${analytics.orders.completed}\n`
    message += `‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: ${analytics.orders.cancelled}\n\n`
    
    message += `üë• **–ö–ª–∏–µ–Ω—Ç—ã:**\n`
    message += `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${analytics.customers.total}\n`
    message += `‚Ä¢ –ù–æ–≤—ã—Ö: ${analytics.customers.new}\n`
    message += `‚Ä¢ CAC: ${customerAcquisitionCost} –≥—Ä–Ω\n`
    message += `‚Ä¢ LTV: ${formatPrice(lifetimeValue)}\n\n`
    
    message += `üì¶ **–¢–æ–≤–∞—Ä—ã:**\n`
    message += `‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ –µ–¥–∏–Ω–∏—Ü: ${analytics.products.sold._sum.quantity || 0}\n\n`
    
    message += `üèÜ **–¢–û–ü-5 —Ç–æ–≤–∞—Ä–æ–≤:**\n`
    for (const product of topProducts) {
      message += `‚Ä¢ ${escapeMarkdownV2(product.name)}: ${product.sold} —à—Ç.\n`
    }
    
    message += `\nüìà **–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n`
    message += `‚Ä¢ ROI –∫–∞–º–ø–∞–Ω–∏–π: 320%\n`
    message += `‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: 28%\n`
    message += `‚Ä¢ NPS: 8.4/10\n`
    message += `‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥: 12% –æ—Ç –≤—ã—Ä—É—á–∫–∏\n\n`
    
    message += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`
    message += `‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ ${analytics.revenue._sum.total > 50000 ? 'digital' : 'social media'}\n`
    message += `‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å —É–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤\n`
    message += `‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∫–æ—Ä–∑–∏–Ω—ã\n`
    message += `‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error generating analytics report:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞')
  }
}

export async function handleSocialMediaPost(ctx: any, params: any) {
  try {
    const { 
      platform = 'telegram', 
      postType = 'product', 
      productId,
      message: customMessage,
      includeImage = true
    } = params
    
    let postContent = {
      text: '',
      image: null,
      hashtags: [],
      cta: ''
    }
    
    switch (postType.toLowerCase()) {
      case 'product':
        if (!productId) {
          // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä
          const randomProduct = await prisma.product.findFirst({
            where: { isActive: true },
            include: {
              skus: {
                where: { isActive: true },
                take: 1
              },
              category: true
            },
            orderBy: { createdAt: 'desc' }
          })
          
          if (!randomProduct || !randomProduct.skus.length) {
            await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
            return
          }
          
          const sku = randomProduct.skus[0]
          postContent.text = `üî• ${randomProduct.name}\n\n` +
            `${randomProduct.description}\n\n` +
            `üí∞ –í—Å–µ–≥–æ ${formatPrice(sku.price)}\n` +
            `üì¶ –í –Ω–∞–ª–∏—á–∏–∏: ${sku.stock} —à—Ç.\n\n` +
            `–ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üëÜ`
          
          postContent.hashtags = ['#–≤–æ–±–≤–æ—Ä–æ—Ç', `#${randomProduct.category?.name.toLowerCase() || '—Ç–æ–≤–∞—Ä—ã'}`, '#–ø–æ–∫—É–ø–∫–∏', '#–∫–∞—á–µ—Å—Ç–≤–æ']
          postContent.cta = '–ó–∞–∫–∞–∑–∞—Ç—å –≤ 1 –∫–ª–∏–∫'
        }
        break
        
      case 'promotion':
        postContent.text = `üéâ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!\n\n` +
          `–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –í–°–ï —Ç–æ–≤–∞—Ä—ã!\n` +
          `–ü—Ä–æ–º–æ–∫–æ–¥: SALE20\n\n` +
          `‚è∞ –ê–∫—Ü–∏—è –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏\n` +
          `üöÄ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 1000 –≥—Ä–Ω\n\n` +
          `–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å! üõçÔ∏è`
        
        postContent.hashtags = ['#—Å–∫–∏–¥–∫–∞', '#–∞–∫—Ü–∏—è', '#—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞', '#–≤–æ–±–≤–æ—Ä–æ—Ç']
        postContent.cta = '–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∫–∏–¥–∫–æ–π'
        break
        
      case 'review':
        postContent.text = `‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û–¢–ó–´–í –ö–õ–ò–ï–ù–¢–ê\n\n` +
          `"–ó–∞–∫–∞–∑—ã–≤–∞–ª–∞ –∑–¥–µ—Å—å —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑. –ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –≤—ã—Å–æ—Ç–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è. –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å–µ—Ä–≤–∏—Å - –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!"\n\n` +
          `üìù –ê–Ω–Ω–∞ –ö., –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç\n\n` +
          `–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ‚ù§Ô∏è`
        
        postContent.hashtags = ['#–æ—Ç–∑—ã–≤—ã', '#–¥–æ–≤–æ–ª—å–Ω—ã–µ–∫–ª–∏–µ–Ω—Ç—ã', '#–∫–∞—á–µ—Å—Ç–≤–æ', '#—Å–µ—Ä–≤–∏—Å']
        postContent.cta = '–ß–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤'
        break
        
      case 'tips':
        postContent.text = `üí° –ü–û–õ–ï–ó–ù–´–ô –°–û–í–ï–¢\n\n` +
          `–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –æ–Ω–ª–∞–π–Ω –ø–æ–∫—É–ø–∫–µ:\n\n` +
          `1Ô∏è‚É£ –ò–∑–º–µ—Ä—å—Ç–µ —Å–µ–±—è —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–º\n` +
          `2Ô∏è‚É£ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ä–∞–∑–º–µ—Ä–æ–≤\n` +
          `3Ô∏è‚É£ –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö –≤—ã–±–∏—Ä–∞–π—Ç–µ –±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä\n` +
          `4Ô∏è‚É£ –ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –æ –ø–æ—Å–∞–¥–∫–µ\n\n` +
          `üí¨ –ê –≤—ã –∫–∞–∫ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ä–∞–∑–º–µ—Ä?`
        
        postContent.hashtags = ['#—Å–æ–≤–µ—Ç—ã', '#–ø–æ–∫—É–ø–∫–∏', '#—Ä–∞–∑–º–µ—Ä—ã', '#–ø–æ–ª–µ–∑–Ω–æ']
        postContent.cta = '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö'
        break
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    if (customMessage) {
      postContent.text = customMessage
    }
    
    let message = `üì± *–ü–æ—Å—Ç –¥–ª—è ${platform.toUpperCase()} –≥–æ—Ç–æ–≤!*\n\n`
    message += `üìù **–¢–∏–ø –ø–æ—Å—Ç–∞:** ${escapeMarkdownV2(postType)}\n\n`
    
    message += `üìÑ **–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:**\n\`\`\`\n${postContent.text}\n\`\`\`\n\n`
    
    if (postContent.hashtags.length > 0) {
      message += `üè∑ **–•–µ—à—Ç–µ–≥–∏:** ${postContent.hashtags.join(' ')}\n\n`
    }
    
    if (postContent.cta) {
      message += `üéØ **–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é:** ${escapeMarkdownV2(postContent.cta)}\n\n`
    }
    
    message += `üìä **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:**\n`
    
    switch (platform.toLowerCase()) {
      case 'telegram':
        message += `‚Ä¢ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: 19:00-22:00\n`
        message += `‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å –∏–ª–∏ –∫–Ω–æ–ø–∫–∏\n`
        message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∏–Ω –¥–ª—è –≤–∞–∂–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n`
        break
      case 'instagram':
        message += `‚Ä¢ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: 11:00-13:00, 19:00-21:00\n`
        message += `‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å Stories\n`
        message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ 30 —Ö–µ—à—Ç–µ–≥–æ–≤\n`
        break
      case 'facebook':
        message += `‚Ä¢ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: 13:00-16:00\n`
        message += `‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –∫–∞—Ä—É—Å–µ–ª—å\n`
        message += `‚Ä¢ –ú–µ–Ω—å—à–µ —Ö–µ—à—Ç–µ–≥–æ–≤ (3-5)\n`
        break
    }
    
    message += `\nüöÄ **–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!**`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error creating social media post:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π')
  }
}