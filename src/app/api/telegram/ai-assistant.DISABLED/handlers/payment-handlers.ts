import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate, formatPrice } from '../utils'
import { westernbid } from '@/lib/westernbid'

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê–ú–ò ===
// –í–ê–ñ–ù–û: –ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ WesternBid!
// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ Order

export async function handleProcessPayment(ctx: any, params: any) {
  try {
    const { orderId, amount, method, transactionId } = params
    
    if (!orderId || !amount || !method) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, —Å—É–º–º—É –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –∑–∞–∫–∞–∑–µ
    const updatedOrder = await prisma.order.update({
      where: { id: orderId },
      data: { 
        status: 'CONFIRMED',
        paymentStatus: 'COMPLETED',
        paymentMethod: method.toUpperCase(),
        transactionId: transactionId || `TXN_${Date.now()}`,
        paidAt: new Date(),
        total: parseFloat(amount) // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      }
    })
    
    await ctx.reply(
      `‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
      `üí≥ –°–ø–æ—Å–æ–±: ${escapeMarkdownV2(method.toUpperCase())}\n` +
      `üí∞ –°—É–º–º–∞: ${formatPrice(parseFloat(amount))}\n` +
      `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(updatedOrder.orderNumber)}\n` +
      `üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: \`${escapeMarkdownV2(updatedOrder.transactionId!)}\`\n` +
      `üìÖ –î–∞—Ç–∞: ${formatDate(updatedOrder.paidAt!)}\n` +
      `üë§ –ö–ª–∏–µ–Ω—Ç: ${escapeMarkdownV2(order.shippingName)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error processing payment:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞')
  }
}

export async function handleRefundPayment(ctx: any, params: any) {
  try {
    const { orderId, amount, reason } = params
    
    if (!orderId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    if (order.paymentStatus !== 'COMPLETED') {
      await ctx.reply('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω')
      return
    }
    
    const refundAmount = amount ? parseFloat(amount) : order.total
    
    if (refundAmount > order.total) {
      await ctx.reply('‚ùå –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å—É–º–º—É –∑–∞–∫–∞–∑–∞')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π
    const updatedOrder = await prisma.order.update({
      where: { id: orderId },
      data: {
        status: 'REFUNDED',
        refundedAt: new Date(),
        refundAmount: refundAmount,
        refundReason: reason || '–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É',
        refundStatus: 'COMPLETED'
      }
    })
    
    await ctx.reply(
      `üí∏ –í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n` +
      `üí∞ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${formatPrice(refundAmount)}\n` +
      `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(updatedOrder.orderNumber)}\n` +
      `üìã –ü—Ä–∏—á–∏–Ω–∞: ${escapeMarkdownV2(reason || '–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É')}\n` +
      `üë§ –ö–ª–∏–µ–Ω—Ç: ${escapeMarkdownV2(order.shippingName)}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error processing refund:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞')
  }
}

export async function handleViewPayments(ctx: any, params: any) {
  try {
    const { status, method, customerEmail } = params
    
    let where: any = {}
    if (status) {
      where.paymentStatus = status.toUpperCase()
    }
    if (method) {
      where.paymentMethod = method.toUpperCase()
    }
    if (customerEmail) {
      where.shippingEmail = customerEmail
    }
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    where.paidAt = { not: null }
    
    const orders = await prisma.order.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      take: 15
    })
    
    if (orders.length === 0) {
      await ctx.reply('üì≠ –ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return
    }
    
    let message = `üí≥ *–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π:*\n\n`
    
    for (const order of orders) {
      const statusEmoji = {
        'PENDING': '‚è≥',
        'COMPLETED': '‚úÖ',
        'FAILED': '‚ùå',
        'REFUNDED': 'üí∏',
        'CANCELLED': 'üö´'
      }[order.paymentStatus] || '‚ùì'
      
      message += `${statusEmoji} *${escapeMarkdownV2(order.paymentMethod || 'WesternBid')}*\n`
      message += `üí∞ ${formatPrice(order.total)}\n`
      message += `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(order.orderNumber)}\n`
      message += `üë§ ${escapeMarkdownV2(order.shippingName)}\n`
      if (order.transactionId) {
        message += `üÜî –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: \`${escapeMarkdownV2(order.transactionId)}\`\n`
      }
      message += `üìÖ ${formatDate(order.paidAt!)}\n\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error viewing payments:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–ª–∞—Ç–µ–∂–µ–π')
  }
}

export async function handlePaymentStatistics(ctx: any, params: any) {
  try {
    const { period = 'month' } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.paidAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter.paidAt = { gte: monthAgo }
        break
      case 'year':
        const yearAgo = new Date(now)
        yearAgo.setFullYear(yearAgo.getFullYear() - 1)
        dateFilter.paidAt = { gte: yearAgo }
        break
    }
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    const totalStats = await prisma.order.aggregate({
      where: {
        ...dateFilter,
        paymentStatus: 'COMPLETED'
      },
      _count: { id: true },
      _sum: { total: true }
    })
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = await prisma.order.groupBy({
      by: ['paymentStatus'],
      where: {
        ...dateFilter,
        paidAt: { not: null }
      },
      _count: { paymentStatus: true },
      _sum: { total: true }
    })
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã  
    const methodStats = await prisma.order.groupBy({
      by: ['paymentMethod'],
      where: {
        ...dateFilter,
        paymentStatus: 'COMPLETED'
      },
      _count: { paymentMethod: true },
      _sum: { total: true }
    })
    
    // –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
    const avgPayment = totalStats._count.id > 0 
      ? (totalStats._sum.total || 0) / totalStats._count.id 
      : 0
    
    let message = `üí≥ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (${period}):*\n\n`
    message += `üìä –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${totalStats._count.id}\n`
    message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${formatPrice(totalStats._sum.total || 0)}\n`
    message += `üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formatPrice(avgPayment)}\n\n`
    
    message += `üìà *–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n`
    for (const stat of statusStats) {
      const emoji = {
        'PENDING': '‚è≥',
        'COMPLETED': '‚úÖ',
        'FAILED': '‚ùå',
        'REFUNDED': 'üí∏',
        'CANCELLED': 'üö´'
      }[stat.paymentStatus] || '‚ùì'
      
      const percentage = totalStats._count.id > 0 
        ? ((stat._count.paymentStatus / totalStats._count.id) * 100).toFixed(1) 
        : 0
      message += `${emoji} ${stat.paymentStatus}: ${stat._count.paymentStatus} (${percentage}%) - ${formatPrice(stat._sum.total || 0)}\n`
    }
    
    message += `\nüí≥ *–ü–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:*\n`
    for (const stat of methodStats) {
      const method = stat.paymentMethod || 'WesternBid'
      message += `‚Ä¢ ${escapeMarkdownV2(method)}: ${stat._count.paymentMethod} —à—Ç. - ${formatPrice(stat._sum.total || 0)}\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting payment statistics:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π')
  }
}

export async function handleFailedPayments(ctx: any, params: any) {
  try {
    const { period = 'week' } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'day':
        const dayAgo = new Date(now)
        dayAgo.setDate(dayAgo.getDate() - 1)
        dateFilter.createdAt = { gte: dayAgo }
        break
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.createdAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter.createdAt = { gte: monthAgo }
        break
    }
    
    const failedOrders = await prisma.order.findMany({
      where: {
        ...dateFilter,
        paymentStatus: 'FAILED'
      },
      orderBy: { createdAt: 'desc' }
    })
    
    if (failedOrders.length === 0) {
      await ctx.reply(`‚úÖ –ù–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ ${period}`)
      return
    }
    
    const totalFailedAmount = failedOrders.reduce((sum, order) => sum + order.total, 0)
    
    let message = `‚ùå *–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (${period}):*\n\n`
    message += `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${failedOrders.length}\n`
    message += `üí∏ –ü–æ—Ç–µ—Ä—è–Ω–Ω–∞—è —Å—É–º–º–∞: ${formatPrice(totalFailedAmount)}\n\n`
    
    for (const order of failedOrders.slice(0, 10)) {
      message += `‚ùå ${formatPrice(order.total)} - ${escapeMarkdownV2(order.paymentMethod || 'WesternBid')}\n`
      message += `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(order.orderNumber)}\n`
      message += `üë§ ${escapeMarkdownV2(order.shippingName)}\n`
      message += `üìÖ ${formatDate(order.createdAt)}\n`
      if (order.failureReason) {
        message += `‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: ${escapeMarkdownV2(order.failureReason)}\n`
      }
      message += `\n`
    }
    
    if (failedOrders.length > 10) {
      message += `_–ò –µ—â–µ ${failedOrders.length - 10} –ø–ª–∞—Ç–µ–∂–µ–π..._\n\n`
    }
    
    message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`
    message += `‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–ø–ª–∞—Ç—ã\n`
    message += `‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WesternBid\n`
    message += `‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting failed payments:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π')
  }
}

export async function handleUpdatePaymentStatus(ctx: any, params: any) {
  try {
    const { orderId, status, notes } = params
    
    if (!orderId || !status) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å')
      return
    }
    
    const validStatuses = ['PENDING', 'COMPLETED', 'FAILED', 'REFUNDED', 'CANCELLED']
    
    if (!validStatuses.includes(status.toUpperCase())) {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${validStatuses.join(', ')}`)
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    let updateData: any = {
      paymentStatus: status.toUpperCase()
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
    switch (status.toUpperCase()) {
      case 'COMPLETED':
        updateData.status = 'CONFIRMED'
        updateData.paidAt = new Date()
        break
      case 'FAILED':
        updateData.status = 'CANCELLED'
        updateData.failureReason = notes || '–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª'
        break
      case 'REFUNDED':
        updateData.status = 'REFUNDED'
        updateData.refundedAt = new Date()
        updateData.refundReason = notes || '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤'
        break
    }
    
    if (notes) {
      updateData.notes = notes
    }
    
    const updatedOrder = await prisma.order.update({
      where: { id: orderId },
      data: updateData
    })
    
    const statusEmoji = {
      'PENDING': '‚è≥',
      'COMPLETED': '‚úÖ',
      'FAILED': '‚ùå',
      'REFUNDED': 'üí∏',
      'CANCELLED': 'üö´'
    }[status.toUpperCase()] || '‚ùì'
    
    await ctx.reply(
      `${statusEmoji} –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n` +
      `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(updatedOrder.orderNumber)}\n` +
      `üí≥ –°–ø–æ—Å–æ–±: ${escapeMarkdownV2(updatedOrder.paymentMethod || 'WesternBid')}\n` +
      `üí∞ –°—É–º–º–∞: ${formatPrice(updatedOrder.total)}\n` +
      `üìç –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${escapeMarkdownV2(status.toUpperCase())}\n` +
      `üë§ –ö–ª–∏–µ–Ω—Ç: ${escapeMarkdownV2(updatedOrder.shippingName)}\n` +
      `${notes ? `üìù –ó–∞–º–µ—Ç–∫–∏: ${escapeMarkdownV2(notes)}\n` : ''}`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error updating payment status:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞')
  }
}

export async function handleExportPayments(ctx: any, params: any) {
  try {
    const { format = 'csv', status, method } = params
    
    let where: any = {
      paidAt: { not: null }
    }
    if (status) {
      where.paymentStatus = status.toUpperCase()
    }
    if (method) {
      where.paymentMethod = method.toUpperCase()
    }
    
    const orders = await prisma.order.findMany({
      where,
      orderBy: { createdAt: 'desc' }
    })
    
    if (orders.length === 0) {
      await ctx.reply('üì≠ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
      return
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º CSV
    let csv = 'ID,–ó–∞–∫–∞–∑,–ö–ª–∏–µ–Ω—Ç,Email,–°–ø–æ—Å–æ–±,–°—Ç–∞—Ç—É—Å,–°—É–º–º–∞,–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è,–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è,–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã\n'
    
    for (const order of orders) {
      csv += `"${order.id}","${order.orderNumber}","${order.shippingName}","${order.shippingEmail}","${order.paymentMethod || 'WesternBid'}","${order.paymentStatus}",${order.total},"${order.transactionId || ''}","${order.createdAt.toISOString().split('T')[0]}","${order.paidAt ? order.paidAt.toISOString().split('T')[0] : ''}"\n`
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    await ctx.replyWithDocument(
      Buffer.from(csv, 'utf-8'),
      {
        filename: `payments_export_${new Date().toISOString().split('T')[0]}.csv`,
        caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π (${orders.length} —à—Ç.)`
      }
    )
  } catch (error) {
    console.error('Error exporting payments:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–ª–∞—Ç–µ–∂–µ–π')
  }
}

export async function handleRecurringPayments(ctx: any, params: any) {
  try {
    await ctx.reply(
      `‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n` +
      `–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ WesternBid –Ω–∞–ø—Ä—è–º—É—é.`,
      { parse_mode: 'MarkdownV2' }
    )
  } catch (error) {
    console.error('Error setting up recurring payment:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞')
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ WesternBid
export async function handleCreateWesternBidPayment(ctx: any, params: any) {
  try {
    const { orderId, returnUrl, cancelUrl } = params
    
    if (!orderId) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞')
      return
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    })
    
    if (!order) {
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }
    
    if (order.paymentStatus === 'COMPLETED') {
      await ctx.reply('‚úÖ –ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω')
      return
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ WesternBid
    const paymentRequest = {
      orderId: order.orderNumber,
      amount: order.total,
      currency: order.currency || 'USD',
      description: `–ó–∞–∫–∞–∑ #${order.orderNumber}`,
      customerEmail: order.shippingEmail,
      customerName: order.shippingName,
      customerPhone: order.shippingPhone || undefined,
      returnUrl: returnUrl || `${process.env.NEXT_PUBLIC_SITE_URL}/payment/success`,
      cancelUrl: cancelUrl || `${process.env.NEXT_PUBLIC_SITE_URL}/payment/cancel`,
      metadata: {
        orderId: order.id,
        telegramBotOrder: true
      }
    }
    
    const paymentResponse = await westernbid.createPayment(paymentRequest)
    
    if (paymentResponse.success && paymentResponse.paymentUrl) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º payment ID –∏ session ID
      await prisma.order.update({
        where: { id: order.id },
        data: {
          paymentId: paymentResponse.paymentId,
          sessionId: paymentResponse.sessionId
        }
      })
      
      await ctx.reply(
        `üí≥ *–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n` +
        `üì¶ –ó–∞–∫–∞–∑: #${escapeMarkdownV2(order.orderNumber)}\n` +
        `üí∞ –°—É–º–º–∞: ${formatPrice(order.total)}\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${escapeMarkdownV2(order.shippingName)}\n\n` +
        `üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ](${paymentResponse.paymentUrl})`,
        { parse_mode: 'MarkdownV2' }
      )
    } else {
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${paymentResponse.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      )
    }
  } catch (error) {
    console.error('Error creating WesternBid payment:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏')
  }
}