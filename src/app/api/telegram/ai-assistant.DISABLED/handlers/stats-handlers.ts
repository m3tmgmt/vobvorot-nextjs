import { prisma } from '@/lib/prisma'
import { escapeMarkdownV2, formatDate, formatPrice } from '../utils'

// === –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

export async function handleGeneralStats(ctx: any, params: any) {
  try {
    const { period = 'all' } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'today':
        dateFilter.createdAt = {
          gte: new Date(now.setHours(0, 0, 0, 0))
        }
        break
      case 'yesterday':
        const yesterday = new Date(now)
        yesterday.setDate(yesterday.getDate() - 1)
        dateFilter.createdAt = {
          gte: new Date(yesterday.setHours(0, 0, 0, 0)),
          lt: new Date(now.setHours(0, 0, 0, 0))
        }
        break
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.createdAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter.createdAt = { gte: monthAgo }
        break
    }
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const [orders, products, customers] = await Promise.all([
      prisma.order.findMany({
        where: dateFilter,
        select: {
          total: true,
          status: true,
          createdAt: true,
          shippingEmail: true
        }
      }),
      prisma.product.count(),
      prisma.order.findMany({
        where: dateFilter,
        select: { shippingEmail: true },
        distinct: ['shippingEmail']
      })
    ])
    
    const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0)
    const totalOrders = orders.length
    const uniqueCustomers = customers.length
    const averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = orders.reduce((acc, order) => {
      acc[order.status] = (acc[order.status] || 0) + 1
      return acc
    }, {} as Record<string, number>)
    
    let message = `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ \\(${period}\\):*\\n\\n`
    
    message += `üí∞ *–î–æ—Ö–æ–¥:*\\n`
    message += `   –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${formatPrice(totalRevenue)}\\n`
    message += `   –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formatPrice(averageOrderValue)}\\n\\n`
    
    message += `üìã *–ó–∞–∫–∞–∑—ã:*\\n`
    message += `   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}\\n`
    
    const statusEmojis = {
      PENDING: '‚è≥',
      CONFIRMED: '‚úÖ',
      PROCESSING: 'üîÑ',
      SHIPPED: 'üì¶',
      DELIVERED: '‚úÖ',
      CANCELLED: '‚ùå',
      REFUNDED: 'üí∏'
    }
    
    for (const [status, count] of Object.entries(statusStats)) {
      const emoji = statusEmojis[status as keyof typeof statusEmojis] || '‚ùì'
      message += `   ${emoji} ${status}: ${count}\\n`
    }
    
    message += `\\nüë• *–ö–ª–∏–µ–Ω—Ç—ã:*\\n`
    message += `   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${uniqueCustomers}\\n\\n`
    
    message += `üì¶ *–¢–æ–≤–∞—Ä—ã:*\\n`
    message += `   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products}`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting general stats:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
  }
}

export async function handleSalesReport(ctx: any, params: any) {
  try {
    const { period = 'month', groupBy = 'day' } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.createdAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter.createdAt = { gte: monthAgo }
        break
      case 'quarter':
        const quarterAgo = new Date(now)
        quarterAgo.setMonth(quarterAgo.getMonth() - 3)
        dateFilter.createdAt = { gte: quarterAgo }
        break
      case 'year':
        const yearAgo = new Date(now)
        yearAgo.setFullYear(yearAgo.getFullYear() - 1)
        dateFilter.createdAt = { gte: yearAgo }
        break
    }
    
    const orders = await prisma.order.findMany({
      where: {
        ...dateFilter,
        status: { in: ['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'] }
      },
      select: {
        total: true,
        createdAt: true
      },
      orderBy: { createdAt: 'asc' }
    })
    
    if (orders.length === 0) {
      await ctx.reply(`‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ ${period}`)
      return
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º/–Ω–µ–¥–µ–ª—è–º/–º–µ—Å—è—Ü–∞–º
    const salesByPeriod = new Map<string, { revenue: number, orders: number }>()
    
    for (const order of orders) {
      let key: string
      
      if (groupBy === 'day') {
        key = order.createdAt.toISOString().split('T')[0]
      } else if (groupBy === 'week') {
        const weekStart = new Date(order.createdAt)
        weekStart.setDate(weekStart.getDate() - weekStart.getDay())
        key = weekStart.toISOString().split('T')[0]
      } else {
        key = `${order.createdAt.getFullYear()}-${String(order.createdAt.getMonth() + 1).padStart(2, '0')}`
      }
      
      const existing = salesByPeriod.get(key) || { revenue: 0, orders: 0 }
      salesByPeriod.set(key, {
        revenue: existing.revenue + order.total,
        orders: existing.orders + 1
      })
    }
    
    const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0)
    const totalOrders = orders.length
    const averageOrderValue = totalRevenue / totalOrders
    
    let message = `üìà *–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º \\(${period}\\):*\\n\\n`
    
    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\\n`
    message += `   –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${formatPrice(totalRevenue)}\\n`
    message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}\\n`
    message += `   –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formatPrice(averageOrderValue)}\\n\\n`
    
    message += `üìä *–ü–æ ${groupBy === 'day' ? '–¥–Ω—è–º' : groupBy === 'week' ? '–Ω–µ–¥–µ–ª—è–º' : '–º–µ—Å—è—Ü–∞–º'}:*\\n`
    
    const sortedPeriods = Array.from(salesByPeriod.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .slice(-10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–µ—Ä–∏–æ–¥–æ–≤
    
    for (const [period, data] of sortedPeriods) {
      message += `   üìÖ ${period}: ${formatPrice(data.revenue)} \\(${data.orders} –∑–∞–∫–∞–∑–æ–≤\\)\\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error generating sales report:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º')
  }
}

export async function handleTopProducts(ctx: any, params: any) {
  try {
    const { period = 'month', metric = 'revenue', limit = 10 } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter['order.createdAt'] = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter['order.createdAt'] = { gte: monthAgo }
        break
      case 'quarter':
        const quarterAgo = new Date(now)
        quarterAgo.setMonth(quarterAgo.getMonth() - 3)
        dateFilter['order.createdAt'] = { gte: quarterAgo }
        break
    }
    
    const orderItems = await prisma.orderItem.findMany({
      where: dateFilter,
      include: {
        sku: {
          include: {
            product: true
          }
        },
        order: {
          select: {
            createdAt: true,
            status: true
          }
        }
      }
    })
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const paidItems = orderItems.filter(item => 
      ['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'].includes(item.order.status)
    )
    
    if (paidItems.length === 0) {
      await ctx.reply(`‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ ${period}`)
      return
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    const productStats = new Map<string, {
      name: string,
      revenue: number,
      quantity: number,
      orders: number
    }>()
    
    for (const item of paidItems) {
      const productId = item.sku.productId
      const existing = productStats.get(productId) || {
        name: item.sku.product.name,
        revenue: 0,
        quantity: 0,
        orders: 0
      }
      
      productStats.set(productId, {
        name: item.sku.product.name,
        revenue: existing.revenue + (item.price * item.quantity),
        quantity: existing.quantity + item.quantity,
        orders: existing.orders + 1
      })
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ
    const sortedProducts = Array.from(productStats.values())
      .sort((a, b) => {
        if (metric === 'quantity') return b.quantity - a.quantity
        if (metric === 'orders') return b.orders - a.orders
        return b.revenue - a.revenue
      })
      .slice(0, limit)
    
    const metricName = {
      revenue: '–¥–æ—Ö–æ–¥—É',
      quantity: '–∫–æ–ª–∏—á–µ—Å—Ç–≤—É',
      orders: '–∑–∞–∫–∞–∑–∞–º'
    }[metric] || '–¥–æ—Ö–æ–¥—É'
    
    let message = `üèÜ *–¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ${metricName} \\(${period}\\):*\\n\\n`
    
    let rank = 1
    for (const product of sortedProducts) {
      const medal = rank <= 3 ? ['ü•á', 'ü•à', 'ü•â'][rank - 1] : `${rank}Ô∏è‚É£`
      
      message += `${medal} *${escapeMarkdownV2(product.name)}*\\n`
      message += `   üí∞ –î–æ—Ö–æ–¥: ${formatPrice(product.revenue)}\\n`
      message += `   üì¶ –ü—Ä–æ–¥–∞–Ω–æ: ${product.quantity} —à—Ç\\.\\n`
      message += `   üìã –ó–∞–∫–∞–∑–æ–≤: ${product.orders}\\n\\n`
      
      rank++
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error getting top products:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤')
  }
}

export async function handleRevenueAnalysis(ctx: any, params: any) {
  try {
    const { comparison = true } = params
    
    const now = new Date()
    
    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const currentMonth = await prisma.order.findMany({
      where: {
        createdAt: {
          gte: new Date(now.getFullYear(), now.getMonth(), 1)
        },
        status: { in: ['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'] }
      },
      select: { total: true, createdAt: true }
    })
    
    // –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
    const previousMonth = await prisma.order.findMany({
      where: {
        createdAt: {
          gte: new Date(now.getFullYear(), now.getMonth() - 1, 1),
          lt: new Date(now.getFullYear(), now.getMonth(), 1)
        },
        status: { in: ['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'] }
      },
      select: { total: true, createdAt: true }
    })
    
    const currentRevenue = currentMonth.reduce((sum, order) => sum + order.total, 0)
    const previousRevenue = previousMonth.reduce((sum, order) => sum + order.total, 0)
    
    const currentOrders = currentMonth.length
    const previousOrders = previousMonth.length
    
    const currentAOV = currentOrders > 0 ? currentRevenue / currentOrders : 0
    const previousAOV = previousOrders > 0 ? previousRevenue / previousOrders : 0
    
    let message = `üìà *–ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–∞:*\\n\\n`
    
    message += `üìÖ *–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:*\\n`
    message += `   üí∞ –î–æ—Ö–æ–¥: ${formatPrice(currentRevenue)}\\n`
    message += `   üìã –ó–∞–∫–∞–∑–æ–≤: ${currentOrders}\\n`
    message += `   üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formatPrice(currentAOV)}\\n\\n`
    
    if (comparison && previousOrders > 0) {
      const revenueGrowth = ((currentRevenue - previousRevenue) / previousRevenue * 100)
      const ordersGrowth = ((currentOrders - previousOrders) / previousOrders * 100)
      const aovGrowth = ((currentAOV - previousAOV) / previousAOV * 100)
      
      message += `üìÖ *–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:*\\n`
      message += `   üí∞ –î–æ—Ö–æ–¥: ${formatPrice(previousRevenue)}\\n`
      message += `   üìã –ó–∞–∫–∞–∑–æ–≤: ${previousOrders}\\n`
      message += `   üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formatPrice(previousAOV)}\\n\\n`
      
      message += `üìà *–ò–∑–º–µ–Ω–µ–Ω–∏—è:*\\n`
      
      const revenueEmoji = revenueGrowth >= 0 ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è'
      const ordersEmoji = ordersGrowth >= 0 ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è'
      const aovEmoji = aovGrowth >= 0 ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è'
      
      message += `   ${revenueEmoji} –î–æ—Ö–æ–¥: ${revenueGrowth >= 0 ? '+' : ''}${revenueGrowth.toFixed(1)}%\\n`
      message += `   ${ordersEmoji} –ó–∞–∫–∞–∑—ã: ${ordersGrowth >= 0 ? '+' : ''}${ordersGrowth.toFixed(1)}%\\n`
      message += `   ${aovEmoji} –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${aovGrowth >= 0 ? '+' : ''}${aovGrowth.toFixed(1)}%\\n\\n`
    }
    
    // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
    const daysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate()
    const daysPassed = now.getDate()
    const dailyAverage = currentRevenue / daysPassed
    const projectedRevenue = dailyAverage * daysInMonth
    
    message += `üîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:*\\n`
    message += `   –ü—Ä–æ—à–ª–æ –¥–Ω–µ–π: ${daysPassed} –∏–∑ ${daysInMonth}\\n`
    message += `   –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: ${formatPrice(dailyAverage)}\\n`
    message += `   –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: ${formatPrice(projectedRevenue)}`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error analyzing revenue:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ—Ö–æ–¥–∞')
  }
}

export async function handleInventoryReport(ctx: any, params: any) {
  try {
    const { sortBy = 'quantity', showOutOfStock = true } = params
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ ProductSku
    const [totalProducts, activeProducts, lowStockSkus, outOfStockSkus, totalValue] = await Promise.all([
      prisma.product.count(),
      prisma.product.count({ where: { isActive: true } }),
      prisma.productSku.count({ where: { stock: { lte: 10 }, isActive: true } }),
      prisma.productSku.count({ where: { stock: 0, isActive: true } }),
      prisma.productSku.aggregate({
        _sum: {
          price: true
        },
        where: { isActive: true }
      })
    ])
    
    let message = `üì¶ *–û—Ç—á–µ—Ç –ø–æ —Å–∫–ª–∞–¥—É:*\\n\\n`
    
    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\\n`
    message += `   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}\\n`
    message += `   –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeProducts}\\n`
    message += `   SKU —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º \\(‚â§ 10\\): ${lowStockSkus}\\n`
    message += `   SKU –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: ${outOfStockSkus}\\n`
    message += `   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatPrice(totalValue._sum.price || 0)}\\n\\n`
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —á–µ—Ä–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    const categoryStats = await prisma.category.findMany({
      where: { isActive: true },
      include: {
        products: {
          where: { isActive: true },
          include: {
            skus: {
              where: { isActive: true },
              select: {
                stock: true,
                price: true
              }
            }
          }
        },
        _count: {
          select: { products: true }
        }
      },
      orderBy: {
        products: { _count: 'desc' }
      },
      take: 5
    })
    
    if (categoryStats.length > 0) {
      message += `üè∑ *–¢–û–ü 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\\n`
      for (const cat of categoryStats) {
        const totalStock = cat.products.reduce((sum, product) => 
          sum + product.skus.reduce((skuSum, sku) => skuSum + sku.stock, 0), 0
        )
        message += `   ‚Ä¢ ${escapeMarkdownV2(cat.name)}: ${cat._count.products} —Ç–æ–≤–∞—Ä–æ–≤ \\(${totalStock} —à—Ç\\)\\n`
      }
      message += '\\n'
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SKU —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
    if (lowStockSkus > 0) {
      const lowStockProducts = await prisma.productSku.findMany({
        where: {
          stock: { lte: 10 },
          isActive: true
        },
        include: {
          product: {
            select: {
              name: true
            }
          }
        },
        orderBy: { stock: 'asc' },
        take: 10
      })
      
      message += `‚ö†Ô∏è *SKU —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º:*\\n`
      for (const sku of lowStockProducts) {
        const skuName = sku.size || sku.color ? `${sku.product.name} \\(${[sku.size, sku.color].filter(Boolean).join(', ')}\\)` : sku.product.name
        message += `   ‚Ä¢ ${escapeMarkdownV2(skuName)}: ${sku.stock} —à—Ç\\.\\n`
      }
      message += '\\n'
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SKU –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏
    if (showOutOfStock && outOfStockSkus > 0) {
      const outOfStockProducts = await prisma.productSku.findMany({
        where: { stock: 0, isActive: true },
        include: {
          product: {
            select: {
              name: true
            }
          }
        },
        take: 5
      })
      
      message += `‚ùå *SKU –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ \\(–ø–µ—Ä–≤—ã–µ 5\\):*\\n`
      for (const sku of outOfStockProducts) {
        const skuName = sku.size || sku.color ? `${sku.product.name} \\(${[sku.size, sku.color].filter(Boolean).join(', ')}\\)` : sku.product.name
        message += `   ‚Ä¢ ${escapeMarkdownV2(skuName)}\\n`
      }
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error generating inventory report:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–∫–ª–∞–¥—É')
  }
}

export async function handleConversionAnalysis(ctx: any, params: any) {
  try {
    const { period = 'month' } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.createdAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter.createdAt = { gte: monthAgo }
        break
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    const orders = await prisma.order.findMany({
      where: dateFilter,
      select: {
        status: true,
        total: true,
        createdAt: true,
        shippingEmail: true
      }
    })
    
    if (orders.length === 0) {
      await ctx.reply(`‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${period}`)
      return
    }
    
    const totalOrders = orders.length
    const paidOrders = orders.filter(o => ['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'].includes(o.status)).length
    const cancelledOrders = orders.filter(o => o.status === 'CANCELLED').length
    const refundedOrders = orders.filter(o => o.status === 'REFUNDED').length
    
    const conversionRate = (paidOrders / totalOrders * 100)
    const cancellationRate = (cancelledOrders / totalOrders * 100)
    const refundRate = (refundedOrders / totalOrders * 100)
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = orders.reduce((acc, order) => {
      acc[order.status] = (acc[order.status] || 0) + 1
      return acc
    }, {} as Record<string, number>)
    
    let message = `üìä *–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ \\(${period}\\):*\\n\\n`
    
    message += `üìà *–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*\\n`
    message += `   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}\\n`
    message += `   –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –æ–ø–ª–∞—Ç—É: ${conversionRate.toFixed(1)}%\\n`
    message += `   –£—Ä–æ–≤–µ–Ω—å –æ—Ç–º–µ–Ω: ${cancellationRate.toFixed(1)}%\\n`
    message += `   –£—Ä–æ–≤–µ–Ω—å –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: ${refundRate.toFixed(1)}%\\n\\n`
    
    message += `üìä *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\\n`
    
    const statusEmojis = {
      PENDING: '‚è≥',
      CONFIRMED: '‚úÖ',
      PROCESSING: 'üîÑ',
      SHIPPED: 'üì¶',
      DELIVERED: '‚úÖ',
      CANCELLED: '‚ùå',
      REFUNDED: 'üí∏'
    }
    
    for (const [status, count] of Object.entries(statusStats)) {
      const emoji = statusEmojis[status as keyof typeof statusEmojis] || '‚ùì'
      const percentage = (count / totalOrders * 100).toFixed(1)
      message += `   ${emoji} ${status}: ${count} \\(${percentage}%\\)\\n`
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    message += `\\nüéÅ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\\n`
    
    if (conversionRate < 70) {
      message += `   ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è \\(${conversionRate.toFixed(1)}%\\)\\n`
      message += `   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã\\n`
    }
    
    if (cancellationRate > 15) {
      message += `   ‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç–º–µ–Ω \\(${cancellationRate.toFixed(1)}%\\)\\n`
      message += `   ‚Ä¢ –£–ª—É—á—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤\\n`
    }
    
    if (refundRate > 10) {
      message += `   ‚ö†Ô∏è –í—ã—Å–æ–∫–∏–µ –≤–æ–∑–≤—Ä–∞—Ç—ã \\(${refundRate.toFixed(1)}%\\)\\n`
      message += `   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞\\n`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error analyzing conversion:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏')
  }
}

export async function handlePeakHoursAnalysis(ctx: any, params: any) {
  try {
    const { period = 'month' } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.createdAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter.createdAt = { gte: monthAgo }
        break
    }
    
    const orders = await prisma.order.findMany({
      where: {
        ...dateFilter,
        status: { in: ['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'] }
      },
      select: { createdAt: true, total: true }
    })
    
    if (orders.length === 0) {
      await ctx.reply(`‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${period}`)
      return
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
    const hourlyStats = new Array(24).fill(0).map(() => ({ orders: 0, revenue: 0 }))
    
    for (const order of orders) {
      const hour = order.createdAt.getHours()
      hourlyStats[hour].orders++
      hourlyStats[hour].revenue += order.total
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
    const topHours = hourlyStats
      .map((stats, hour) => ({ hour, ...stats }))
      .sort((a, b) => b.orders - a.orders)
      .slice(0, 5)
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const weekdayStats = new Array(7).fill(0).map(() => ({ orders: 0, revenue: 0 }))
    const weekdayNames = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
    
    for (const order of orders) {
      const weekday = order.createdAt.getDay()
      weekdayStats[weekday].orders++
      weekdayStats[weekday].revenue += order.total
    }
    
    const topWeekdays = weekdayStats
      .map((stats, day) => ({ day, name: weekdayNames[day], ...stats }))
      .sort((a, b) => b.orders - a.orders)
      .slice(0, 3)
    
    let message = `üï∞ *–ê–Ω–∞–ª–∏–∑ –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤ \\(${period}\\):*\\n\\n`
    
    message += `üåÖ *–¢–û–ü 5 —á–∞—Å–æ–≤ –ø–æ –∑–∞–∫–∞–∑–∞–º:*\\n`
    
    for (let i = 0; i < topHours.length; i++) {
      const { hour, orders, revenue } = topHours[i]
      const rank = i + 1
      const medal = rank <= 3 ? ['ü•á', 'ü•à', 'ü•â'][rank - 1] : `${rank}Ô∏è‚É£`
      
      message += `${medal} ${hour}:00\\-${hour + 1}:00: ${orders} –∑–∞–∫–∞–∑–æ–≤ \\(${formatPrice(revenue)}\\)\\n`
    }
    
    message += `\\nüìÖ *–¢–û–ü 3 –¥–Ω—è –Ω–µ–¥–µ–ª–∏:*\\n`
    
    for (let i = 0; i < topWeekdays.length; i++) {
      const { name, orders, revenue } = topWeekdays[i]
      const rank = i + 1
      const medal = ['ü•á', 'ü•à', 'ü•â'][rank - 1]
      
      message += `${medal} ${name}: ${orders} –∑–∞–∫–∞–∑–æ–≤ \\(${formatPrice(revenue)}\\)\\n`
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    message += `\\nüé• *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\\n`
    message += `   ‚Ä¢ –ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è: ${topHours[0].hour}:00\\-${topHours[0].hour + 1}:00\\n`
    message += `   ‚Ä¢ –õ—É—á—à–∏–π –¥–µ–Ω—å: ${topWeekdays[0].name}\\n`
    message += `   ‚Ä¢ –†–∞–∑–º–µ—â–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error analyzing peak hours:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤')
  }
}

export async function handleGeographicAnalysis(ctx: any, params: any) {
  try {
    const { period = 'month', metric = 'orders' } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.createdAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter.createdAt = { gte: monthAgo }
        break
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    const countryStats = await prisma.order.groupBy({
      by: ['shippingCountry'],
      where: {
        ...dateFilter,
        status: { in: ['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'] },
        shippingCountry: { not: null }
      },
      _count: { id: true },
      _sum: { total: true },
      orderBy: { _count: { id: 'desc' } },
      take: 10
    })
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
    const cityStats = await prisma.order.groupBy({
      by: ['shippingCity'],
      where: {
        ...dateFilter,
        status: { in: ['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'] },
        shippingCity: { not: null }
      },
      _count: { id: true },
      _sum: { total: true },
      orderBy: { _count: { id: 'desc' } },
      take: 10
    })
    
    if (countryStats.length === 0 && cityStats.length === 0) {
      await ctx.reply(`‚ùå –ù–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${period}`)
      return
    }
    
    let message = `üåç *–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ \\(${period}\\):*\\n\\n`
    
    if (countryStats.length > 0) {
      message += `üèÅ *–¢–û–ü —Å—Ç—Ä–∞–Ω –ø–æ –∑–∞–∫–∞–∑–∞–º:*\\n`
      
      let rank = 1
      for (const country of countryStats) {
        const medal = rank <= 3 ? ['ü•á', 'ü•à', 'ü•â'][rank - 1] : `${rank}Ô∏è‚É£`
        
        message += `${medal} ${escapeMarkdownV2(country.shippingCountry || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: ${country._count.id} –∑–∞–∫–∞–∑–æ–≤\\n`
        message += `   üí∞ –î–æ—Ö–æ–¥: ${formatPrice(country._sum.total || 0)}\\n`
        message += `   üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formatPrice((country._sum.total || 0) / country._count.id)}\\n\\n`
        
        rank++
      }
    }
    
    if (cityStats.length > 0) {
      message += `üè¢ *–¢–û–ü –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∑–∞–∫–∞–∑–∞–º:*\\n`
      
      let rank = 1
      for (const city of cityStats.slice(0, 5)) {
        const medal = rank <= 3 ? ['ü•á', 'ü•à', 'ü•â'][rank - 1] : `${rank}Ô∏è‚É£`
        
        message += `${medal} ${escapeMarkdownV2(city.shippingCity || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: ${city._count.id} –∑–∞–∫–∞–∑–æ–≤\\n`
        message += `   üí∞ ${formatPrice(city._sum.total || 0)}\\n\\n`
        
        rank++
      }
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalCountries = countryStats.length
    const totalCities = cityStats.length
    const totalOrders = countryStats.reduce((sum, country) => sum + country._count.id, 0)
    const totalRevenue = countryStats.reduce((sum, country) => sum + (country._sum.total || 0), 0)
    
    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\\n`
    message += `   –°—Ç—Ä–∞–Ω: ${totalCountries}\\n`
    message += `   –ì–æ—Ä–æ–¥–æ–≤: ${totalCities}\\n`
    message += `   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}\\n`
    message += `   –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${formatPrice(totalRevenue)}`
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error analyzing geographic data:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ')
  }
}

export async function handleExportAnalytics(ctx: any, params: any) {
  try {
    const { reportType = 'summary', period = 'month', format = 'csv' } = params
    
    let dateFilter: any = {}
    const now = new Date()
    
    switch (period) {
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter.createdAt = { gte: weekAgo }
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter.createdAt = { gte: monthAgo }
        break
      case 'quarter':
        const quarterAgo = new Date(now)
        quarterAgo.setMonth(quarterAgo.getMonth() - 3)
        dateFilter.createdAt = { gte: quarterAgo }
        break
    }
    
    let data: any[] = []
    let filename = 'analytics_export'
    let headers = ''
    
    if (reportType === 'orders') {
      // –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
      data = await prisma.order.findMany({
        where: dateFilter,
        include: {
          items: {
            include: {
              product: true
            }
          }
        },
        orderBy: { createdAt: 'desc' }
      })
      
      filename = 'orders_analytics'
      headers = 'ID,–î–∞—Ç–∞,–ö–ª–∏–µ–Ω—Ç,Email,–°—É–º–º–∞,–°—Ç–∞—Ç—É—Å,–¢–æ–≤–∞—Ä–æ–≤,–ì–æ—Ä–æ–¥,–°—Ç—Ä–∞–Ω–∞\n'
      
    } else if (reportType === 'products') {
      // –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
      const orderItems = await prisma.orderItem.findMany({
        where: {
          order: dateFilter
        },
        include: {
          sku: {
            include: {
              product: true
            }
          },
          order: {
            select: {
              createdAt: true,
              status: true
            }
          }
        }
      })
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º
      const productStats = new Map<string, any>()
      
      for (const item of orderItems) {
        if (!['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'].includes(item.order.status)) continue
        
        const productId = item.sku.productId
        const existing = productStats.get(productId) || {
          name: item.sku.product.name,
          category: item.sku.product.categoryId,
          revenue: 0,
          quantity: 0,
          orders: 0
        }
        
        productStats.set(productId, {
          ...existing,
          revenue: existing.revenue + (item.price * item.quantity),
          quantity: existing.quantity + item.quantity,
          orders: existing.orders + 1
        })
      }
      
      data = Array.from(productStats.values())
      filename = 'products_analytics'
      headers = '–ù–∞–∑–≤–∞–Ω–∏–µ,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–î–æ—Ö–æ–¥,–ü—Ä–æ–¥–∞–Ω–æ,–ó–∞–∫–∞–∑–æ–≤,–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞\n'
      
    } else {
      // –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
      const orders = await prisma.order.findMany({
        where: dateFilter,
        select: {
          createdAt: true,
          total: true,
          status: true,
          shippingCountry: true,
          shippingCity: true
        }
      })
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –¥–Ω—è–º
      const dailyStats = new Map<string, any>()
      
      for (const order of orders) {
        const date = order.createdAt.toISOString().split('T')[0]
        const existing = dailyStats.get(date) || {
          date,
          orders: 0,
          revenue: 0,
          paid_orders: 0,
          cancelled_orders: 0
        }
        
        dailyStats.set(date, {
          ...existing,
          orders: existing.orders + 1,
          revenue: existing.revenue + order.total,
          paid_orders: existing.paid_orders + (['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'].includes(order.status) ? 1 : 0),
          cancelled_orders: existing.cancelled_orders + (order.status === 'CANCELLED' ? 1 : 0)
        })
      }
      
      data = Array.from(dailyStats.values()).sort((a, b) => a.date.localeCompare(b.date))
      filename = 'daily_summary'
      headers = '–î–∞—Ç–∞,–ó–∞–∫–∞–∑–æ–≤,–î–æ—Ö–æ–¥,–û–ø–ª–∞—á–µ–Ω–æ,–û—Ç–º–µ–Ω–µ–Ω–æ,–ö–æ–Ω–≤–µ—Ä—Å–∏—è\n'
    }
    
    if (data.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
      return
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º CSV
    let csv = headers
    
    for (const item of data) {
      if (reportType === 'orders') {
        const itemsCount = item.items?.length || 0
        csv += `"${item.id}","${item.createdAt.toISOString().split('T')[0]}","${item.shippingName}","${item.shippingEmail}","${item.total}","${item.status}","${itemsCount}","${item.shippingCity || ''}","${item.shippingCountry || ''}"\n`
      } else if (reportType === 'products') {
        const avgPrice = item.quantity > 0 ? (item.revenue / item.quantity).toFixed(2) : '0'
        csv += `"${item.name}","${item.category}","${item.revenue}","${item.quantity}","${item.orders}","${avgPrice}"\n`
      } else {
        const conversion = item.orders > 0 ? (item.paid_orders / item.orders * 100).toFixed(1) : '0'
        csv += `"${item.date}","${item.orders}","${item.revenue}","${item.paid_orders}","${item.cancelled_orders}","${conversion}%"\n`
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    await ctx.replyWithDocument(
      Buffer.from(csv, 'utf-8'),
      {
        filename: `${filename}_${period}_${new Date().toISOString().split('T')[0]}.csv`,
        caption: `üìÑ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ${reportType} –∑–∞ ${period} (${data.length} –∑–∞–ø–∏—Å–µ–π)`
      }
    )
  } catch (error) {
    console.error('Error exporting analytics:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏')
  }
}

export async function handleComparePerformance(ctx: any, params: any) {
  try {
    const { metric = 'revenue', period1 = 'month', period2 = 'previous_month' } = params
    
    const now = new Date()
    
    // –ü–µ—Ä–≤—ã–π –ø–µ—Ä–∏–æ–¥
    let dateFilter1: any = {}
    let periodName1 = period1
    
    switch (period1) {
      case 'week':
        const weekAgo = new Date(now)
        weekAgo.setDate(weekAgo.getDate() - 7)
        dateFilter1.createdAt = { gte: weekAgo }
        periodName1 = '–ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è'
        break
      case 'month':
        const monthAgo = new Date(now)
        monthAgo.setMonth(monthAgo.getMonth() - 1)
        dateFilter1.createdAt = { gte: monthAgo }
        periodName1 = '–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü'
        break
    }
    
    // –í—Ç–æ—Ä–æ–π –ø–µ—Ä–∏–æ–¥
    let dateFilter2: any = {}
    let periodName2 = period2
    
    if (period2 === 'previous_month') {
      const twoMonthsAgo = new Date(now)
      twoMonthsAgo.setMonth(twoMonthsAgo.getMonth() - 2)
      const oneMonthAgo = new Date(now)
      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)
      
      dateFilter2.createdAt = { gte: twoMonthsAgo, lt: oneMonthAgo }
      periodName2 = '–ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü'
      
    } else if (period2 === 'previous_week') {
      const twoWeeksAgo = new Date(now)
      twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14)
      const oneWeekAgo = new Date(now)
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7)
      
      dateFilter2.createdAt = { gte: twoWeeksAgo, lt: oneWeekAgo }
      periodName2 = '–ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è'
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    const [period1Data, period2Data] = await Promise.all([
      prisma.order.findMany({
        where: {
          ...dateFilter1,
          status: { in: ['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'] }
        },
        select: { total: true, shippingEmail: true }
      }),
      prisma.order.findMany({
        where: {
          ...dateFilter2,
          status: { in: ['CONFIRMED', 'PROCESSING', 'SHIPPED', 'DELIVERED'] }
        },
        select: { total: true, shippingEmail: true }
      })
    ])
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const stats1 = {
      orders: period1Data.length,
      revenue: period1Data.reduce((sum, order) => sum + order.total, 0),
      customers: new Set(period1Data.map(order => order.shippingEmail)).size
    }
    
    const stats2 = {
      orders: period2Data.length,
      revenue: period2Data.reduce((sum, order) => sum + order.total, 0),
      customers: new Set(period2Data.map(order => order.shippingEmail)).size
    }
    
    stats1.aov = stats1.orders > 0 ? stats1.revenue / stats1.orders : 0
    stats2.aov = stats2.orders > 0 ? stats2.revenue / stats2.orders : 0
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const revenueChange = stats2.revenue > 0 ? ((stats1.revenue - stats2.revenue) / stats2.revenue * 100) : 0
    const ordersChange = stats2.orders > 0 ? ((stats1.orders - stats2.orders) / stats2.orders * 100) : 0
    const customersChange = stats2.customers > 0 ? ((stats1.customers - stats2.customers) / stats2.customers * 100) : 0
    const aovChange = stats2.aov > 0 ? ((stats1.aov - stats2.aov) / stats2.aov * 100) : 0
    
    let message = `üîÑ *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å–∞:*\\n\\n`
    
    message += `üìÖ *${escapeMarkdownV2(periodName1)} vs ${escapeMarkdownV2(periodName2)}:*\\n\\n`
    
    const revenueEmoji = revenueChange >= 0 ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è'
    const ordersEmoji = ordersChange >= 0 ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è'
    const customersEmoji = customersChange >= 0 ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è'
    const aovEmoji = aovChange >= 0 ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è'
    
    message += `üí∞ *–î–æ—Ö–æ–¥:*\\n`
    message += `   –¢–µ–∫—É—â–∏–π: ${formatPrice(stats1.revenue)}\\n`
    message += `   –ü—Ä–µ–¥—ã–¥—É—â–∏–π: ${formatPrice(stats2.revenue)}\\n`
    message += `   ${revenueEmoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${revenueChange >= 0 ? '+' : ''}${revenueChange.toFixed(1)}%\\n\\n`
    
    message += `üìã *–ó–∞–∫–∞–∑—ã:*\\n`
    message += `   –¢–µ–∫—É—â–∏–µ: ${stats1.orders}\\n`
    message += `   –ü—Ä–µ–¥—ã–¥—É—â–∏–µ: ${stats2.orders}\\n`
    message += `   ${ordersEmoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${ordersChange >= 0 ? '+' : ''}${ordersChange.toFixed(1)}%\\n\\n`
    
    message += `üë• *–ö–ª–∏–µ–Ω—Ç—ã:*\\n`
    message += `   –¢–µ–∫—É—â–∏–µ: ${stats1.customers}\\n`
    message += `   –ü—Ä–µ–¥—ã–¥—É—â–∏–µ: ${stats2.customers}\\n`
    message += `   ${customersEmoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${customersChange >= 0 ? '+' : ''}${customersChange.toFixed(1)}%\\n\\n`
    
    message += `üíµ *–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:*\\n`
    message += `   –¢–µ–∫—É—â–∏–π: ${formatPrice(stats1.aov)}\\n`
    message += `   –ü—Ä–µ–¥—ã–¥—É—â–∏–π: ${formatPrice(stats2.aov)}\\n`
    message += `   ${aovEmoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${aovChange >= 0 ? '+' : ''}${aovChange.toFixed(1)}%\\n\\n`
    
    // –í—ã–≤–æ–¥—ã
    message += `üìà *–í—ã–≤–æ–¥—ã:*\\n`
    
    if (revenueChange > 10) {
      message += `   ‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–∞ \\(${revenueChange.toFixed(1)}%\\)\\n`
    } else if (revenueChange < -10) {
      message += `   ‚ö†Ô∏è –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ \\(${revenueChange.toFixed(1)}%\\)\\n`
    }
    
    if (aovChange > 5) {
      message += `   ‚úÖ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —Ä–∞—Å—Ç–µ—Ç \\(${aovChange.toFixed(1)}%\\)\\n`
    } else if (aovChange < -5) {
      message += `   ‚ö†Ô∏è –°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ \\(${aovChange.toFixed(1)}%\\)\\n`
    }
    
    if (customersChange > 0) {
      message += `   ‚úÖ –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ \\(+${customersChange.toFixed(1)}%\\)`
    }
    
    await ctx.reply(message, { parse_mode: 'MarkdownV2' })
  } catch (error) {
    console.error('Error comparing performance:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å–∞')
  }
}