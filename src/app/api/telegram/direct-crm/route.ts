import { NextRequest, NextResponse } from 'next/server'
import { Bot, Context, InlineKeyboard } from 'grammy'
import { PrismaClient } from '@prisma/client'
import { logger } from '@/lib/logger'

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
type MyContext = Context

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '7700098378:AAGZ1zZOxiwXbJeknO9SvyN25KvfWQkQNrI'
const ADMIN_IDS = ['316593422', '1837334996']
const OWNER_EMAIL = 'thelordpetrus@gmail.com'
const TELEGRAM_BOT_USERNAME = 'VobvorotAdminBot'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prisma
const prisma = new PrismaClient()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot<MyContext>(BOT_TOKEN)

function isAdmin(userId: string): boolean {
  return ADMIN_IDS.includes(userId)
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return new InlineKeyboard()
    .text('üì¶ –ó–∞–∫–∞–∑—ã', 'menu:orders')
    .text('üõçÔ∏è –¢–æ–≤–∞—Ä—ã', 'menu:products')
    .row()
    .text('üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'menu:categories')
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'menu:stats')
    .row()
    .text('üí¨ –û—Ç–∑—ã–≤—ã', 'menu:reviews')
    .text('üë• –ö–ª–∏–µ–Ω—Ç—ã', 'menu:customers')
}

// –ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
function getOrdersMenu() {
  return new InlineKeyboard()
    .text('üìã –í—Å–µ –∑–∞–∫–∞–∑—ã', 'orders:all')
    .text('‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ', 'orders:pending')
    .row()
    .text('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', 'orders:completed')
    .text('‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ', 'orders:cancelled')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
function getProductsMenu() {
  return new InlineKeyboard()
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'products:add')
    .text('üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', 'products:list')
    .row()
    .text('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'products:edit')
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'products:delete')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function getCategoriesMenu() {
  return new InlineKeyboard()
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'categories:add')
    .text('üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', 'categories:list')
    .row()
    .text('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'categories:edit')
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'categories:delete')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  console.log('üéØ /start command from:', ctx.from?.id)
  
  if (!isAdmin(ctx.from?.id.toString() || '')) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }

  await ctx.reply(
    'üöÄ *VobVorot Store Management*\\n\\n' +
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º!\\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:',
    { 
      parse_mode: 'Markdown',
      reply_markup: getMainMenu()
    }
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.callbackQuery('menu:main', async (ctx) => {
  await ctx.editMessageText(
    'üöÄ *VobVorot Store Management*\\n\\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:',
    { 
      parse_mode: 'Markdown',
      reply_markup: getMainMenu()
    }
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
bot.callbackQuery('menu:orders', async (ctx) => {
  await ctx.editMessageText(
    'üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏*\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    { 
      parse_mode: 'Markdown',
      reply_markup: getOrdersMenu()
    }
  )
})

// –í—Å–µ –∑–∞–∫–∞–∑—ã
bot.callbackQuery('orders:all', async (ctx) => {
  await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–∫–∞–∑—ã...' })
  
  try {
    const orders = await prisma.order.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        user: true,
        items: {
          include: {
            product: true
          }
        }
      }
    })
    
    if (orders.length === 0) {
      await ctx.editMessageText(
        'üì¶ *–í—Å–µ –∑–∞–∫–∞–∑—ã*\\n\\n‚ùå –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç',
        { 
          parse_mode: 'Markdown',
          reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:orders')
        }
      )
      return
    }
    
    let message = 'üì¶ *–í—Å–µ –∑–∞–∫–∞–∑—ã*\\n\\n'
    
    for (const order of orders) {
      const total = order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0)
      const date = new Date(order.createdAt).toLocaleDateString('ru-RU')
      
      message += `üÜî *–ó–∞–∫–∞–∑ #${order.orderNumber}*\\n`
      message += `üìÖ –î–∞—Ç–∞: ${date}\\n`
      message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.user?.name || order.email}\\n`
      message += `üí∞ –°—É–º–º–∞: $${total.toFixed(2)}\\n`
      message += `üìä –°—Ç–∞—Ç—É—Å: ${order.status}\\n`
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\\n`
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'orders:all')
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:orders')
    })
    
  } catch (error) {
    console.error('‚ùå Error loading orders:', error)
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤',
      { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:orders') }
    )
  }
})

// –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã
bot.callbackQuery('orders:pending', async (ctx) => {
  await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã...' })
  
  try {
    const orders = await prisma.order.findMany({
      where: { status: 'pending' },
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        user: true,
        items: {
          include: {
            product: true
          }
        }
      }
    })
    
    if (orders.length === 0) {
      await ctx.editMessageText(
        '‚è≥ *–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã*\\n\\n‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤',
        { 
          parse_mode: 'Markdown',
          reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:orders')
        }
      )
      return
    }
    
    let message = '‚è≥ *–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã*\\n\\n'
    
    for (const order of orders) {
      const total = order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0)
      const date = new Date(order.createdAt).toLocaleDateString('ru-RU')
      
      message += `üÜî *–ó–∞–∫–∞–∑ #${order.orderNumber}*\\n`
      message += `üìÖ –î–∞—Ç–∞: ${date}\\n`
      message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.user?.name || order.email}\\n`
      message += `üí∞ –°—É–º–º–∞: $${total.toFixed(2)}\\n`
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\\n`
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'orders:pending')
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:orders')
    })
    
  } catch (error) {
    console.error('‚ùå Error loading pending orders:', error)
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤',
      { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:orders') }
    )
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
bot.callbackQuery('menu:products', async (ctx) => {
  await ctx.editMessageText(
    'üõçÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    { 
      parse_mode: 'Markdown',
      reply_markup: getProductsMenu()
    }
  )
})

// –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
bot.callbackQuery('products:list', async (ctx) => {
  await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã...' })
  
  try {
    const products = await prisma.product.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        category: true
      }
    })
    
    if (products.length === 0) {
      await ctx.editMessageText(
        'üõçÔ∏è *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤*\\n\\n‚ùå –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç',
        { 
          parse_mode: 'Markdown',
          reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:products')
        }
      )
      return
    }
    
    let message = 'üõçÔ∏è *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤*\\n\\n'
    
    for (const product of products) {
      message += `üì¶ *${product.name}*\\n`
      message += `üí∞ –¶–µ–Ω–∞: $${product.price}\\n`
      message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.inStock ? '–î–∞' : '–ù–µ—Ç'}\\n`
      message += `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\\n`
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\\n`
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'products:list')
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:products')
    })
    
  } catch (error) {
    console.error('‚ùå Error loading products:', error)
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤',
      { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:products') }
    )
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
bot.callbackQuery('menu:categories', async (ctx) => {
  await ctx.editMessageText(
    'üè∑Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏*\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    { 
      parse_mode: 'Markdown',
      reply_markup: getCategoriesMenu()
    }
  )
})

// –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
bot.callbackQuery('categories:list', async (ctx) => {
  await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...' })
  
  try {
    const categories = await prisma.category.findMany({
      orderBy: { name: 'asc' },
      include: {
        _count: {
          select: { products: true }
        }
      }
    })
    
    if (categories.length === 0) {
      await ctx.editMessageText(
        'üè∑Ô∏è *–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π*\\n\\n‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç',
        { 
          parse_mode: 'Markdown',
          reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:categories')
        }
      )
      return
    }
    
    let message = 'üè∑Ô∏è *–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π*\\n\\n'
    
    for (const category of categories) {
      message += `üìÅ *${category.name}*\\n`
      message += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${category._count.products}\\n`
      message += `üîó URL: ${category.slug}\\n`
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\\n`
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'categories:list')
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:categories')
    })
    
  } catch (error) {
    console.error('‚ùå Error loading categories:', error)
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:categories') }
    )
  }
})

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.callbackQuery('menu:stats', async (ctx) => {
  await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...' })
  
  try {
    const [
      totalOrders,
      totalProducts,
      totalUsers,
      totalCategories,
      totalRevenue
    ] = await Promise.all([
      prisma.order.count(),
      prisma.product.count(),
      prisma.user.count(),
      prisma.category.count(),
      prisma.order.findMany({
        include: { items: true }
      }).then(orders => 
        orders.reduce((sum, order) => 
          sum + order.items.reduce((orderSum, item) => 
            orderSum + (item.price * item.quantity), 0
          ), 0
        )
      )
    ])
    
    const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*\\n\\n` +
      `üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}\\n` +
      `üõçÔ∏è –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}\\n` +
      `üè∑Ô∏è –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${totalCategories}\\n` +
      `üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${totalUsers}\\n` +
      `üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: $${totalRevenue.toFixed(2)}\\n`
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'menu:stats')
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
    })
    
  } catch (error) {
    console.error('‚ùå Error loading stats:', error)
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main') }
    )
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
bot.callbackQuery('menu:reviews', async (ctx) => {
  await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–∑—ã–≤—ã...' })
  
  try {
    const reviews = await prisma.review.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        user: true,
        product: true
      }
    })
    
    if (reviews.length === 0) {
      await ctx.editMessageText(
        'üí¨ *–û—Ç–∑—ã–≤—ã*\\n\\n‚ùå –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç',
        { 
          parse_mode: 'Markdown',
          reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
        }
      )
      return
    }
    
    let message = 'üí¨ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã*\\n\\n'
    
    for (const review of reviews) {
      const date = new Date(review.createdAt).toLocaleDateString('ru-RU')
      message += `‚≠ê ${review.rating}/5 - *${review.product.name}*\\n`
      message += `üë§ ${review.user?.name || '–ê–Ω–æ–Ω–∏–º'}\\n`
      message += `üìÖ ${date}\\n`
      message += `üí≠ ${review.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\\n`
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\\n`
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'menu:reviews')
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
    })
    
  } catch (error) {
    console.error('‚ùå Error loading reviews:', error)
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤',
      { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main') }
    )
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
bot.callbackQuery('menu:customers', async (ctx) => {
  await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∫–ª–∏–µ–Ω—Ç–æ–≤...' })
  
  try {
    const customers = await prisma.user.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        _count: {
          select: { orders: true }
        }
      }
    })
    
    if (customers.length === 0) {
      await ctx.editMessageText(
        'üë• *–ö–ª–∏–µ–Ω—Ç—ã*\\n\\n‚ùå –ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç',
        { 
          parse_mode: 'Markdown',
          reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
        }
      )
      return
    }
    
    let message = 'üë• *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã*\\n\\n'
    
    for (const customer of customers) {
      const date = new Date(customer.createdAt).toLocaleDateString('ru-RU')
      message += `üë§ *${customer.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}*\\n`
      message += `üìß ${customer.email}\\n`
      message += `üì¶ –ó–∞–∫–∞–∑–æ–≤: ${customer._count.orders}\\n`
      message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${date}\\n`
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\\n`
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'menu:customers')
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
    })
    
  } catch (error) {
    console.error('‚ùå Error loading customers:', error)
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main') }
    )
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx
  console.error('‚ùå Bot error:', err.error)
})

// Webhook handler
export async function POST(request: NextRequest) {
  console.log('üöÄ [DIRECT-CRM] POST request received')
  
  try {
    const update = await request.json()
    console.log('üì® [DIRECT-CRM] Update:', JSON.stringify(update, null, 2))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞
    if (update.message?.from?.id || update.callback_query?.from?.id) {
      const userId = update.message?.from?.id || update.callback_query?.from?.id
      if (!isAdmin(userId.toString())) {
        console.log('‚ùå [DIRECT-CRM] Unauthorized user:', userId)
        return NextResponse.json({ ok: true })
      }
    }
    
    await bot.handleUpdate(update)
    
    return NextResponse.json({ ok: true })
    
  } catch (error) {
    console.error('üí• [DIRECT-CRM] Error:', error)
    logger.error('Direct CRM webhook error', error)
    
    return NextResponse.json(
      { error: 'Internal server error' }, 
      { status: 500 }
    )
  }
}

// GET endpoint –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const action = searchParams.get('action')
    
    if (action === 'set') {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      const webhookUrl = `${process.env.NEXTAUTH_URL || 'https://vobvorot.com'}/api/telegram/direct-crm`
      const secretToken = 'vobvorot_webhook_secret_2025'
      
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          url: webhookUrl,
          secret_token: secretToken,
          allowed_updates: ['message', 'callback_query', 'inline_query']
        })
      })
      
      const result = await response.json()
      console.log('üéØ [DIRECT-CRM] Webhook set result:', result)
      
      return NextResponse.json(result)
      
    } else if (action === 'info') {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`)
      const result = await response.json()
      
      return NextResponse.json(result)
      
    } else if (action === 'delete') {
      // –£–¥–∞–ª—è–µ–º webhook
      const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`)
      const result = await response.json()
      
      return NextResponse.json(result)
      
    } else {
      return NextResponse.json({ 
        status: 'Direct CRM webhook ready',
        bot_token: BOT_TOKEN.substring(0, 10) + '...',
        admin_ids: ADMIN_IDS,
        timestamp: new Date().toISOString()
      })
    }
    
  } catch (error) {
    logger.error('Direct CRM webhook error', error)
    return NextResponse.json(
      { error: 'Failed to manage webhook' }, 
      { status: 500 }
    )
  }
}