import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import { cloudinaryService } from '@/lib/cloudinary'

const prisma = new PrismaClient()

const BOT_TOKEN = '7700098378:AAEa-cUAEVbUdigyFK9m4PrkOhK-_1jfvQM'
const ADMIN_IDS = ['316593422', '1837334996']
const ADMIN_API_KEY = process.env.ADMIN_API_KEY

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ production –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
const userStates = new Map<string, any>()

export async function POST(request: NextRequest) {
  try {
    const update = await request.json()
    console.log('üì® Full webhook received:', JSON.stringify(update, null, 2))
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –º–µ–¥–∏–∞ –∏ callback queries
    if (update.message || update.callback_query) {
      await processUpdate(update)
    }
    
    return NextResponse.json({ ok: true })
    
  } catch (error) {
    console.error('‚ùå Webhook error:', error)
    return NextResponse.json({ ok: true })
  }
}

async function processUpdate(update: any) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
  if (update.callback_query) {
    return await handleCallbackQuery(update.callback_query)
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  if (update.message) {
    return await handleMessage(update.message)
  }
}

async function handleCallbackQuery(callbackQuery: any) {
  const chatId = callbackQuery.message.chat.id
  const userId = callbackQuery.from.id
  const data = callbackQuery.data
  
  if (!ADMIN_IDS.includes(userId.toString())) {
    await answerCallbackQuery(callbackQuery.id, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
    return
  }
  
  await answerCallbackQuery(callbackQuery.id)
  
  switch(data) {
    case 'orders':
      await sendOrdersMenu(chatId)
      break
    case 'products':
      await sendProductsMenu(chatId)
      break
    case 'stats':
      await sendStats(chatId)
      break
    case 'video':
      await sendVideoMenu(chatId)
      break
    case 'orders_new':
      await sendOrdersByStatus(chatId, 'PENDING')
      break
    case 'orders_processing':
      await sendOrdersByStatus(chatId, 'PROCESSING')
      break
    case 'orders_shipped':
      await sendOrdersByStatus(chatId, 'SHIPPED')
      break
    case 'orders_delivered':
      await sendOrdersByStatus(chatId, 'DELIVERED')
      break
    case 'products_list':
      await sendProductsList(chatId)
      break
    case 'add_product':
      await startAddProduct(chatId, userId)
      break
    case 'edit_product':
      await startEditProduct(chatId)
      break
    case 'upload_video':
      await startUploadVideo(chatId, userId)
      break
    case 'delete_video':
      await deleteHomeVideo(chatId)
      break
    case 'current_video':
      await getCurrentVideoInfo(chatId)
      break
    case 'back_main':
      await sendMainMenu(chatId)
      break
    case 'back_orders':
      await sendOrdersMenu(chatId)
      break
    case 'back_products':
      await sendProductsMenu(chatId)
      break
    case 'back_video':
      await sendVideoMenu(chatId)
      break
    case 'create_new_category':
      await startCreateCategory(chatId, userId)
      break
    default:
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (data.startsWith('select_category_')) {
        const categoryId = data.replace('select_category_', '')
        await handleCategorySelection(chatId, userId, categoryId)
      }
      break
  }
}

async function handleMessage(message: any) {
  const chatId = message.chat.id
  const userId = message.from.id
  const text = message.text
  const username = message.from.username || 'Unknown'
  
  if (!ADMIN_IDS.includes(userId.toString())) {
    await sendTelegramMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É')
    return
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userState = userStates.get(userId.toString())
  
  if (userState) {
    return await handleUserState(message, userState)
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  if (text) {
    console.log(`üë§ User ${username} (${userId}): ${text}`)
    
    switch(text) {
      case '/start':
        await sendWelcomeMessage(chatId, userId)
        break
      case '/menu':
        await sendMainMenu(chatId)
        break
      case '/orders':
        await sendOrdersMenu(chatId)
        break
      case '/products':
        await sendProductsMenu(chatId)
        break
      default:
        if (text.startsWith('/')) {
          await sendTelegramMessage(chatId, `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é`)
        } else {
          await sendMainMenu(chatId)
        }
    }
  }
}

async function sendWelcomeMessage(chatId: number, userId: number) {
  const welcomeMessage = `ü§ñ *VobvorotAdminBot* –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VobVorot Store

‚úÖ –í–∞—à ID: ${userId}
‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
‚úÖ –ù–æ–≤—ã–π –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω

üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üì¶ –ó–∞–∫–∞–∑—ã', callback_data: 'orders' },
        { text: 'üõçÔ∏è –¢–æ–≤–∞—Ä—ã', callback_data: 'products' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
        { text: 'üé¨ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π', callback_data: 'video' }
      ]
    ]
  }

  await sendTelegramMessage(chatId, welcomeMessage, true, keyboard)
}

async function sendMainMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üì¶ –ó–∞–∫–∞–∑—ã', callback_data: 'orders' },
        { text: 'üõçÔ∏è –¢–æ–≤–∞—Ä—ã', callback_data: 'products' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
        { text: 'üé¨ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π', callback_data: 'video' }
      ]
    ]
  }

  await sendTelegramMessage(chatId, 'üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*', true, keyboard)
}

async function sendOrdersMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üì• –ù–æ–≤—ã–µ', callback_data: 'orders_new' },
        { text: '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', callback_data: 'orders_processing' }
      ],
      [
        { text: 'üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ', callback_data: 'orders_shipped' },
        { text: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ', callback_data: 'orders_delivered' }
      ],
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  }

  await sendTelegramMessage(chatId, 'üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:*', true, keyboard)
}

async function sendProductsMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'products_list' }
      ],
      [
        { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'add_product' },
        { text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit_product' }
      ],
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  }

  await sendTelegramMessage(chatId, 'üõçÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:*', true, keyboard)
}

async function sendVideoMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ', callback_data: 'upload_video' },
        { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ', callback_data: 'delete_video' }
      ],
      [
        { text: '‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ', callback_data: 'current_video' }
      ],
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  }

  await sendTelegramMessage(chatId, 'üé¨ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:*', true, keyboard)
}

async function sendStats(chatId: number) {
  try {
    const ordersCount = await prisma.order.count()
    const productsCount = await prisma.product.count()
    const totalRevenue = await prisma.order.aggregate({
      _sum: { total: true },
      where: { paymentStatus: 'COMPLETED' }
    })

    const recentOrders = await prisma.order.count({
      where: {
        createdAt: {
          gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
        }
      }
    })

    const statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VobVorot Store*

üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersCount}
üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${productsCount}
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: $${totalRevenue._sum.total?.toFixed(2) || '0.00'}
üìà –ó–∞–∫–∞–∑–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: ${recentOrders}

üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`

    const keyboard = {
      inline_keyboard: [
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
      ]
    }

    await sendTelegramMessage(chatId, statsMessage, true, keyboard)
  } catch (error) {
    console.error('Error getting stats:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
  }
}

async function sendOrdersByStatus(chatId: number, status: string) {
  try {
    const orders = await prisma.order.findMany({
      where: { status: status as any },
      take: 5,
      orderBy: { createdAt: 'desc' },
      include: {
        items: {
          include: {
            sku: {
              include: {
                product: true
              }
            }
          }
        }
      }
    })

    let message = `üì¶ *–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}":*\n\n`
    
    if (orders.length === 0) {
      message += '–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    } else {
      for (const order of orders) {
        const itemsText = order.items.map(item => 
          `‚Ä¢ ${item.sku.product.name} x${item.quantity} - $${item.price}`
        ).join('\n')
        
        message += `üÜî ${order.orderNumber}\n`
        message += `üí∞ $${order.total}\n`
        message += `üìÖ ${order.createdAt.toLocaleDateString('ru-RU')}\n`
        message += `${itemsText}\n\n`
      }
    }

    const keyboard = {
      inline_keyboard: [
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º', callback_data: 'back_orders' }]
      ]
    }

    await sendTelegramMessage(chatId, message, true, keyboard)
  } catch (error) {
    console.error('Error getting orders:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤')
  }
}

async function sendProductsList(chatId: number) {
  try {
    const products = await prisma.product.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      include: {
        skus: true,
        _count: {
          select: { skus: true }
        }
      }
    })

    let message = 'üõçÔ∏è *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n\n'
    
    if (products.length === 0) {
      message += '–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'
    } else {
      for (const product of products) {
        const minPrice = Math.min(...product.skus.map(sku => Number(sku.price)))
        message += `üì¶ ${product.name}\n`
        message += `üí∞ –û—Ç $${minPrice}\n`
        message += `üî¢ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${product._count.skus}\n`
        message += `üé¨ –í–∏–¥–µ–æ: ${product.videoUrl ? '‚úÖ' : '‚ùå'}\n\n`
      }
    }

    const keyboard = {
      inline_keyboard: [
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', callback_data: 'back_products' }]
      ]
    }

    await sendTelegramMessage(chatId, message, true, keyboard)
  } catch (error) {
    console.error('Error getting products:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤')
  }
}


async function sendTelegramMessage(chatId: number, text: string, markdown = false, keyboard?: any) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        ...(markdown && { parse_mode: 'Markdown' }),
        ...(keyboard && { reply_markup: keyboard })
      })
    })
    
    const result = await response.json()
    if (!result.ok) {
      console.error('‚ùå Telegram API error:', result)
    } else {
      console.log('‚úÖ Message sent successfully')
    }
    return result
  } catch (error) {
    console.error('‚ùå Failed to send message:', error)
  }
}

async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  try {
    await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text || ''
      })
    })
  } catch (error) {
    console.error('‚ùå Failed to answer callback query:', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function handleUserState(message: any, userState: any) {
  const chatId = message.chat.id
  const userId = message.from.id
  const text = message.text
  const photo = message.photo
  const video = message.video
  
  switch(userState.action) {
    case 'add_product_name':
      return await handleAddProductName(chatId, userId, text)
    case 'add_product_description':
      return await handleAddProductDescription(chatId, userId, text)
    case 'add_product_price':
      return await handleAddProductPrice(chatId, userId, text)
    case 'add_product_category':
      return await handleAddProductCategory(chatId, userId, text)
    case 'add_product_photo':
      return await handleAddProductPhoto(chatId, userId, photo)
    case 'add_product_video':
      return await handleAddProductVideo(chatId, userId, video, text)
    case 'create_category_name':
      return await handleCreateCategoryName(chatId, userId, text)
    case 'upload_home_video':
      return await handleUploadHomeVideo(chatId, userId, video)
    default:
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
      userStates.delete(userId.toString())
      await sendMainMenu(chatId)
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function startAddProduct(chatId: number, userId: number) {
  userStates.set(userId.toString(), { action: 'add_product_name', productData: {} })
  await sendTelegramMessage(chatId, 'üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', true)
}

async function handleAddProductName(chatId: number, userId: number, text: string) {
  if (!text || text.startsWith('/')) {
    await sendTelegramMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    return
  }
  
  const userState = userStates.get(userId.toString())
  userState.productData.name = text
  userState.action = 'add_product_description'
  userStates.set(userId.toString(), userState)
  
  await sendTelegramMessage(chatId, 'üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
}

async function handleAddProductDescription(chatId: number, userId: number, text: string) {
  if (!text || text.startsWith('/')) {
    await sendTelegramMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    return
  }
  
  const userState = userStates.get(userId.toString())
  userState.productData.description = text
  userState.action = 'add_product_price'
  userStates.set(userId.toString(), userState)
  
  await sendTelegramMessage(chatId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ USD (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):')
}

async function handleAddProductPrice(chatId: number, userId: number, text: string) {
  const price = parseFloat(text)
  
  if (isNaN(price) || price <= 0) {
    await sendTelegramMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.99)')
    return
  }
  
  const userState = userStates.get(userId.toString())
  userState.productData.price = price
  userState.action = 'add_product_category'
  userStates.set(userId.toString(), userState)
  
  await sendCategorySelection(chatId)
}

async function sendCategorySelection(chatId: number) {
  try {
    const categories = await prisma.category.findMany({
      where: { isActive: true },
      orderBy: { name: 'asc' }
    })
    
    if (categories.length === 0) {
      await sendTelegramMessage(chatId, '‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
      return
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ 2 –≤ —Ä—è–¥—É)
    const categoryButtons = []
    for (let i = 0; i < categories.length; i += 2) {
      const row = []
      row.push({ text: categories[i].name, callback_data: `select_category_${categories[i].id}` })
      if (categories[i + 1]) {
        row.push({ text: categories[i + 1].name, callback_data: `select_category_${categories[i + 1].id}` })
      }
      categoryButtons.push(row)
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categoryButtons.push([{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'create_new_category' }])
    
    const keyboard = {
      inline_keyboard: categoryButtons
    }
    
    await sendTelegramMessage(chatId, 'üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', true, keyboard)
    
  } catch (error) {
    console.error('Error fetching categories:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
  }
}

async function handleAddProductCategory(chatId: number, userId: number, text: string) {
  // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏
  await sendTelegramMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é')
}

async function handleCategorySelection(chatId: number, userId: number, categoryId: string) {
  try {
    const userState = userStates.get(userId.toString())
    if (!userState || userState.action !== 'add_product_category') {
      await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const category = await prisma.category.findUnique({
      where: { id: categoryId }
    })
    
    if (!category) {
      await sendTelegramMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    userState.productData.categoryId = categoryId
    userState.action = 'add_product_photo'
    userStates.set(userId.toString(), userState)
    
    await sendTelegramMessage(chatId, `‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:`)
    
  } catch (error) {
    console.error('Error handling category selection:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
  }
}

async function startCreateCategory(chatId: number, userId: number) {
  const userState = userStates.get(userId.toString())
  if (!userState || userState.action !== 'add_product_category') {
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
    return
  }
  
  userState.action = 'create_category_name'
  userStates.set(userId.toString(), userState)
  
  await sendTelegramMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
}

async function handleCreateCategoryName(chatId: number, userId: number, text: string) {
  if (!text || text.startsWith('/')) {
    await sendTelegramMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    return
  }
  
  try {
    await sendTelegramMessage(chatId, '‚è≥ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é...')
    
    // –°–æ–∑–¥–∞–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const slug = text
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim()
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const newCategory = await prisma.category.create({
      data: {
        name: text,
        slug: slug + '-' + Date.now(),
        isActive: true
      }
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = userStates.get(userId.toString())
    userState.productData.categoryId = newCategory.id
    userState.action = 'add_product_photo'
    userStates.set(userId.toString(), userState)
    
    await sendTelegramMessage(chatId, `‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${newCategory.name}\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:`)
    
  } catch (error) {
    console.error('Error creating category:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
  }
}

async function handleAddProductPhoto(chatId: number, userId: number, photo: any) {
  if (!photo) {
    await sendTelegramMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞')
    return
  }
  
  await sendTelegramMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ...')
  
  try {
    const photoUrl = await uploadPhotoToCloudinary(photo)
    
    if (!photoUrl) {
      throw new Error('Failed to upload photo')
    }
    
    const userState = userStates.get(userId.toString())
    userState.productData.imageUrl = photoUrl
    userState.action = 'add_product_video'
    userStates.set(userId.toString(), userState)
    
    await sendTelegramMessage(chatId, 'üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":')
  } catch (error) {
    console.error('Error uploading photo:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
  }
}

async function handleAddProductVideo(chatId: number, userId: number, video: any, text: string) {
  const userState = userStates.get(userId.toString())
  
  if (text === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || text === 'skip') {
    userState.productData.videoUrl = null
  } else if (video) {
    await sendTelegramMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...')
    
    try {
      const videoUrl = await uploadVideoToCloudinary(video)
      if (videoUrl) {
        userState.productData.videoUrl = videoUrl
      }
    } catch (error) {
      console.error('Error uploading video:', error)
      await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≤–∏–¥–µ–æ...')
    }
  } else {
    await sendTelegramMessage(chatId, '‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"')
    return
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
  await createProductFromBot(chatId, userId, userState.productData)
  userStates.delete(userId.toString())
}

async function createProductFromBot(chatId: number, userId: number, productData: any) {
  try {
    await sendTelegramMessage(chatId, '‚è≥ –°–æ–∑–¥–∞—é —Ç–æ–≤–∞—Ä...')
    
    // –°–æ–∑–¥–∞–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const slug = productData.name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (!productData.categoryId) {
      await sendTelegramMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      return
    }
    
    const selectedCategory = await prisma.category.findUnique({
      where: { id: productData.categoryId }
    })
    
    if (!selectedCategory) {
      await sendTelegramMessage(chatId, '‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
      return
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
    const product = await prisma.product.create({
      data: {
        name: productData.name,
        slug: slug + '-' + Date.now(),
        description: productData.description,
        categoryId: selectedCategory.id,
        videoUrl: productData.videoUrl,
        isActive: true
      }
    })
    
    // –°–æ–∑–¥–∞–µ–º SKU
    await prisma.productSku.create({
      data: {
        sku: `SKU-${product.id.slice(-8).toUpperCase()}`,
        price: productData.price,
        stock: 100,
        productId: product.id,
        isActive: true
      }
    })
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (productData.imageUrl) {
      await prisma.productImage.create({
        data: {
          url: productData.imageUrl,
          alt: productData.name,
          isPrimary: true,
          productId: product.id
        }
      })
    }
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä', callback_data: 'add_product' },
          { text: 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'products_list' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', callback_data: 'back_products' }
        ]
      ]
    }
    
    await sendTelegramMessage(
      chatId,
      `‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\nüì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: ${productData.name}\nüí∞ –¶–µ–Ω–∞: $${productData.price}\nüÜî ID: ${product.id}\n\nüîó –°—Å—ã–ª–∫–∞: https://vobvorot.com/products/${product.slug}`,
      true,
      keyboard
    )
    
  } catch (error) {
    console.error('Error creating product:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
async function startUploadVideo(chatId: number, userId: number) {
  userStates.set(userId.toString(), { action: 'upload_home_video' })
  await sendTelegramMessage(chatId, 'üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:')
}

async function handleUploadHomeVideo(chatId: number, userId: number, video: any) {
  if (!video) {
    await sendTelegramMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª')
    return
  }
  
  await sendTelegramMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...')
  
  try {
    const videoUrl = await uploadVideoToCloudinary(video)
    
    if (videoUrl) {
      await updateHomeVideo(videoUrl)
      
      const keyboard = {
        inline_keyboard: [
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∏–¥–µ–æ', callback_data: 'back_video' }]
        ]
      }
      
      await sendTelegramMessage(chatId, '‚úÖ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', false, keyboard)
    } else {
      await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ')
    }
  } catch (error) {
    console.error('Error uploading video:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ')
  }
  
  userStates.delete(userId.toString())
}

async function deleteHomeVideo(chatId: number) {
  try {
    await updateHomeVideo('')
    
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∏–¥–µ–æ', callback_data: 'back_video' }]
      ]
    }
    
    await sendTelegramMessage(chatId, '‚úÖ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–¥–∞–ª–µ–Ω–æ', false, keyboard)
  } catch (error) {
    console.error('Error deleting video:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ')
  }
}

async function getCurrentVideoInfo(chatId: number) {
  try {
    const response = await fetch(`${process.env.NEXTAUTH_URL || 'https://vobvorot.com'}/api/admin/site/home-video`)
    const data = await response.json()
    
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∏–¥–µ–æ', callback_data: 'back_video' }]
      ]
    }
    
    if (data.videoUrl) {
      await sendTelegramMessage(
        chatId,
        `üé¨ *–¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ:*\n\n${data.videoUrl}\n\nüìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(data.updatedAt).toLocaleString('ru-RU')}`,
        true,
        keyboard
      )
    } else {
      await sendTelegramMessage(chatId, '‚ùå –í–∏–¥–µ–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', false, keyboard)
    }
  } catch (error) {
    console.error('Error getting video info:', error)
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ')
  }
}

async function startEditProduct(chatId: number) {
  await sendTelegramMessage(chatId, 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏')
}

// –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
async function uploadPhotoToCloudinary(photos: any[]): Promise<string | null> {
  try {
    const photo = photos[photos.length - 1] // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    const fileResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${photo.file_id}`)
    const fileData = await fileResponse.json()
    
    if (!fileData.ok) return null
    
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileData.result.file_path}`
    
    const result = await cloudinaryService.uploadFromUrl(fileUrl, {
      folder: 'vobvorot-products',
      resource_type: 'image'
    })
    
    return result.secure_url
  } catch (error) {
    console.error('Error uploading photo:', error)
    return null
  }
}

async function uploadVideoToCloudinary(video: any): Promise<string | null> {
  try {
    const fileResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${video.file_id}`)
    const fileData = await fileResponse.json()
    
    if (!fileData.ok) return null
    
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileData.result.file_path}`
    
    const result = await cloudinaryService.uploadFromUrl(fileUrl, {
      folder: 'vobvorot-videos',
      resource_type: 'video'
    })
    
    return result.secure_url
  } catch (error) {
    console.error('Error uploading video:', error)
    return null
  }
}

async function updateHomeVideo(videoUrl: string): Promise<void> {
  try {
    const response = await fetch(`${process.env.NEXTAUTH_URL || 'https://vobvorot.com'}/api/admin/site/home-video`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${ADMIN_API_KEY}`
      },
      body: JSON.stringify({ videoUrl })
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`)
    }
  } catch (error) {
    console.error('Error updating home video:', error)
    throw error
  }
}

// GET –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook
export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const action = searchParams.get('action')
  
  if (action === 'set') {
    const webhookUrl = 'https://vobvorot.com/api/telegram/webhook-full'
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: webhookUrl,
        allowed_updates: ['message', 'callback_query']
      })
    })
    
    return NextResponse.json(await response.json())
  }
  
  if (action === 'info') {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`)
    return NextResponse.json(await response.json())
  }
  
  if (action === 'delete') {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`)
    return NextResponse.json(await response.json())
  }
  
  return NextResponse.json({
    status: 'Full webhook endpoint with menus and database integration',
    actions: {
      set: '?action=set',
      info: '?action=info',
      delete: '?action=delete'
    }
  })
}