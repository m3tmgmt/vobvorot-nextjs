import { NextRequest, NextResponse } from 'next/server'

// Hardcoded values for testing
const BOT_TOKEN = '7700098378:AAGZ1zZOxiwXbJeknO9SvyN25KvfWQkQNrI'
const ADMIN_IDS = ['316593422', '1837334996']
const WEBHOOK_SECRET = 'vobvorot_webhook_secret_2025'

async function sendTelegramMessage(chatId: number, text: string) {
  const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    })
  })
  return response.json()
}

export async function POST(request: NextRequest) {
  console.log('='.repeat(50))
  console.log('üöÄ DIRECT WEBHOOK CALLED:', new Date().toISOString())
  
  try {
    // Check secret token
    const secretToken = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
    console.log('üîë Secret token received:', secretToken)
    console.log('üîë Expected token:', WEBHOOK_SECRET)
    
    if (secretToken !== WEBHOOK_SECRET) {
      console.log('‚ùå Secret token mismatch!')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    const update = await request.json()
    console.log('üì® Update:', JSON.stringify(update, null, 2))
    
    // Handle messages
    if (update.message) {
      const message = update.message
      const chatId = message.chat.id
      const userId = message.from.id
      const text = message.text || ''
      const username = message.from.username || 'unknown'
      
      console.log(`üë§ Message from ${username} (${userId}): ${text}`)
      
      // Check if user is admin
      const isAdmin = ADMIN_IDS.includes(userId.toString())
      console.log(`üîê Admin check for ${userId}: ${isAdmin}`)
      
      if (!isAdmin) {
        await sendTelegramMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É')
        return NextResponse.json({ ok: true })
      }
      
      // Handle commands
      if (text === '/start') {
        const response = `
ü§ñ <b>VobvorotAdminBot —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>

‚úÖ –ü—Ä—è–º–æ–π webhook –∞–∫—Ç–∏–≤–µ–Ω
‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
‚úÖ ID: ${userId}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/test - —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ:</b>
/home_videos - –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
/sign_videos - –≤–∏–¥–µ–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã sign

<i>–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}</i>
        `.trim()
        
        const result = await sendTelegramMessage(chatId, response)
        console.log('‚úÖ Start message sent:', result.ok)
        
      } else if (text === '/status') {
        const response = `
üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>

üü¢ Webhook: –∞–∫—Ç–∏–≤–µ–Ω
üü¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
üü¢ API: —Ä–∞–±–æ—Ç–∞–µ—Ç
üü¢ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: ${BOT_TOKEN.substring(0, 10)}...

<i>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleString('ru-RU')}</i>
        `.trim()
        
        await sendTelegramMessage(chatId, response)
        
      } else if (text === '/test') {
        await sendTelegramMessage(chatId, 'üß™ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.')
        
      } else if (text.startsWith('/')) {
        await sendTelegramMessage(chatId, `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`)
        
      } else {
        // Echo non-command messages
        await sendTelegramMessage(chatId, `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ${text}`)
      }
    }
    
    // Handle callback queries
    if (update.callback_query) {
      const callbackQuery = update.callback_query
      console.log('üîò Callback query:', callbackQuery.data)
      
      // Answer callback query to remove loading state
      await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          callback_query_id: callbackQuery.id,
          text: '–û–±—Ä–∞–±–æ—Ç–∫–∞...'
        })
      })
    }
    
    return NextResponse.json({ ok: true })
    
  } catch (error) {
    console.error('üí• CRITICAL ERROR:', error)
    console.error('Stack:', error instanceof Error ? error.stack : 'No stack')
    return NextResponse.json({ 
      ok: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    }, { status: 500 })
  }
}

export async function GET() {
  return NextResponse.json({
    status: 'Direct webhook ready',
    bot_token: BOT_TOKEN.substring(0, 10) + '...',
    admin_ids: ADMIN_IDS,
    timestamp: new Date().toISOString()
  })
}