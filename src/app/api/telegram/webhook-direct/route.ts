import { NextRequest, NextResponse } from 'next/server'

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const ADMIN_IDS = process.env.TELEGRAM_OWNER_CHAT_ID?.trim().split(',').map(id => id.trim()) || []

export async function POST(request: NextRequest) {
  try {
    console.log('üì® Webhook received')
    
    if (!BOT_TOKEN) {
      console.error('‚ùå No bot token')
      return NextResponse.json({ error: 'Bot not configured' }, { status: 500 })
    }

    // –ü–æ–ª—É—á–∞–µ–º update –æ—Ç Telegram
    const update = await request.json()
    console.log('üìã Update received:', JSON.stringify(update, null, 2))
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (update.message && update.message.text) {
      const chatId = update.message.chat.id
      const userId = update.message.from.id
      const text = update.message.text
      
      console.log(`üë§ User ${userId} sent: ${text}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const userIdStr = userId.toString()
      const isAdmin = ADMIN_IDS.includes(userIdStr)
      console.log(`üîê User ${userId} (${userIdStr}) admin check: ${isAdmin}`)
      console.log(`üìã Admin IDs: [${ADMIN_IDS.join(', ')}]`)
      
      if (!isAdmin) {
        console.log(`‚ùå Access denied for user ${userId}`)
        await sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É')
        return NextResponse.json({ ok: true })
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (text === '/start') {
        console.log(`‚úÖ Sending welcome to admin ${userId}`)
        const welcomeMessage = `üéâ VobvorotAdminBot —Ä–∞–±–æ—Ç–∞–µ—Ç!
    
‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: 7700098378...
‚úÖ Webhook: –∞–∫—Ç–∏–≤–µ–Ω  
‚úÖ –î–æ—Å—Ç—É–ø: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
‚úÖ –í–∞—à ID: ${userId}
‚úÖ –ê–¥–º–∏–Ω ID –≤ —Å–∏—Å—Ç–µ–º–µ: ${ADMIN_IDS.join(', ')}

üîß –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/test - —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π
/menu - –±—É–¥—É—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`
        
        await sendMessage(chatId, welcomeMessage)
      } else if (text === '/test') {
        console.log(`üß™ Test command from admin ${userId}`)
        await sendMessage(chatId, `üß™ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!
        
‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É
‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω  
‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`)
      } else if (text === '/menu') {
        await sendMessage(chatId, 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±—É–¥–µ—Ç –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      } else if (text.startsWith('/')) {
        await sendMessage(chatId, `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${text}
        
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/test - —Ç–µ—Å—Ç
/menu - –º–µ–Ω—é`)
      } else {
        await sendMessage(chatId, 'üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã')
      }
    }
    
    return NextResponse.json({ ok: true })
    
  } catch (error) {
    console.error('‚ùå Webhook error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

async function sendMessage(chatId: number, text: string) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
      })
    })
    
    const result = await response.json()
    console.log('üì§ Message sent:', result.ok)
    return result
  } catch (error) {
    console.error('‚ùå Failed to send message:', error)
  }
}