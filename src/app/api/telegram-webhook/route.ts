import { NextRequest, NextResponse } from 'next/server';
import { createTelegramCRM, CRMDatabase } from '@/lib/telegram-crm';

// Telegram webhook handler for CRM bot commands
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const telegramCRM = createTelegramCRM();
    const crmDB = new CRMDatabase();
    
    if (!telegramCRM) {
      return NextResponse.json({ error: 'Telegram CRM not configured' }, { status: 500 });
    }

    // Handle callback queries (button presses)
    if (body.callback_query) {
      const callbackData = body.callback_query.data;
      const chatId = body.callback_query.message.chat.id;
      
      // Parse callback data
      const [action, ...params] = callbackData.split('_');
      
      switch (action) {
        case 'accept':
          if (params[0] === 'order') {
            const orderId = params[1];
            await handleAcceptOrder(orderId, telegramCRM, crmDB);
          }
          break;
          
        case 'reject':
          if (params[0] === 'order') {
            const orderId = params[1];
            await handleRejectOrder(orderId, telegramCRM, crmDB);
          }
          break;
          
        case 'customer':
          const customerId = params[0];
          await handleShowCustomer(customerId, telegramCRM, crmDB);
          break;
          
        case 'detailed':
          if (params[0] === 'analytics') {
            await handleDetailedAnalytics(telegramCRM, crmDB);
          }
          break;
          
        case 'pending':
          if (params[0] === 'orders') {
            await handlePendingOrders(telegramCRM, crmDB);
          }
          break;
          
        default:
          await telegramCRM.sendMessage('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
      
      // Answer callback query to remove loading state
      await answerCallbackQuery(body.callback_query.id);
    }
    
    // Handle text messages (commands)
    if (body.message && body.message.text) {
      const text = body.message.text;
      const chatId = body.message.chat.id;
      
      // Only respond to owners
      const ownerChatIds = process.env.TELEGRAM_OWNER_CHAT_ID?.split(',').map(id => id.trim()) || [];
      if (!ownerChatIds.includes(chatId.toString())) {
        return NextResponse.json({ ok: true });
      }
      
      if (text.startsWith('/')) {
        await handleCommand(text, telegramCRM, crmDB);
      }
    }
    
    return NextResponse.json({ ok: true });
    
  } catch (error) {
    console.error('Telegram webhook error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// Handle bot commands
async function handleCommand(command: string, telegramCRM: any, crmDB: CRMDatabase) {
  const [cmd, ...args] = command.split(' ');
  
  switch (cmd) {
    case '/start':
      await telegramCRM.sendMessage(`
ü§ñ <b>VobVorot CRM Bot</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/analytics - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/orders - –ó–∞–∫–∞–∑—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
/customers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
/inventory - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∞—Å—ã
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –æ –∑–∞–ø–∞—Å–∞—Ö
      `, { parse_mode: 'HTML' });
      break;
      
    case '/analytics':
      const analytics = await crmDB.getDailyAnalytics(new Date());
      await telegramCRM.sendDailyReport(analytics);
      break;
      
    case '/orders':
      await handlePendingOrders(telegramCRM, crmDB);
      break;
      
    case '/customers':
      await telegramCRM.sendMessage('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏:\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /customer <email>');
      break;
      
    case '/customer':
      if (args.length > 0) {
        const email = args[0];
        const customer = await crmDB.getCustomer(email);
        if (customer) {
          await telegramCRM.showCustomerProfile(customer);
        } else {
          await telegramCRM.sendMessage('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      }
      break;
      
    case '/inventory':
      // This would check inventory levels
      await telegramCRM.sendMessage('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∞—Å–æ–≤...\n\n‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
      break;
      
    case '/help':
      await telegramCRM.sendMessage(`
üìã <b>–ö–æ–º–∞–Ω–¥—ã CRM –±–æ—Ç–∞:</b>

/analytics - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
/orders - –ó–∞–∫–∞–∑—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
/customers - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
/customer <email> - –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
/inventory - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–ª–∞–¥–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üí° <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–≤ 9:00)
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–∞–ø–∞—Å–∞—Ö
      `, { parse_mode: 'HTML' });
      break;
      
    default:
      await telegramCRM.sendMessage('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
  }
}

// Handle order actions
async function handleAcceptOrder(orderId: string, telegramCRM: any, crmDB: CRMDatabase) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await telegramCRM.sendMessage('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    // Update order status to confirmed
    const response = await fetch(`${baseUrl}/api/orders/${orderId}/status`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify({ status: 'confirmed' })
    })

    if (response.ok) {
      const result = await response.json()
      await telegramCRM.sendMessage(`‚úÖ –ó–∞–∫–∞–∑ #${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É`)
      
      // Notify customer if possible
      if (result.order?.customer?.telegramChatId) {
        try {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: result.order.customer.telegramChatId,
              text: `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!`
            })
          })
        } catch (error) {
          console.log('Could not notify customer:', error)
        }
      }
    } else {
      const error = await response.json()
      await telegramCRM.sendMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  } catch (error) {
    console.error('Error accepting order:', error)
    await telegramCRM.sendMessage(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ #${orderId}`)
  }
}

async function handleRejectOrder(orderId: string, telegramCRM: any, crmDB: CRMDatabase) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await telegramCRM.sendMessage('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    // Update order status to cancelled
    const response = await fetch(`${baseUrl}/api/orders/${orderId}/status`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify({ status: 'cancelled' })
    })

    if (response.ok) {
      const result = await response.json()
      await telegramCRM.sendMessage(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ –æ—Ç–º–µ–Ω–µ–Ω`)
      
      // Notify customer
      if (result.order?.customer?.telegramChatId) {
        try {
          await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: result.order.customer.telegramChatId,
              text: `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ #${orderId} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`
            })
          })
        } catch (error) {
          console.log('Could not notify customer:', error)
        }
      }
      
      // TODO: Initiate refund process if payment was completed
      if (result.order?.paymentStatus === 'completed') {
        await telegramCRM.sendMessage(`üí∞ –í–Ω–∏–º–∞–Ω–∏–µ: –î–ª—è –∑–∞–∫–∞–∑–∞ #${orderId} –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤`)
      }
    } else {
      const error = await response.json()
      await telegramCRM.sendMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  } catch (error) {
    console.error('Error rejecting order:', error)
    await telegramCRM.sendMessage(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ #${orderId}`)
  }
}

async function handleShowCustomer(customerId: string, telegramCRM: any, crmDB: CRMDatabase) {
  // Show customer details
  await telegramCRM.sendMessage(`üë§ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞...`);
}

async function handleDetailedAnalytics(telegramCRM: any, crmDB: CRMDatabase) {
  const weeklyAnalytics = await crmDB.getWeeklyAnalytics(
    new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
    new Date()
  );
  await telegramCRM.sendWeeklyReport(weeklyAnalytics);
}

async function handlePendingOrders(telegramCRM: any, crmDB: CRMDatabase) {
  await telegramCRM.sendMessage(`
üìã <b>–ó–ê–ö–ê–ó–´ –í –û–ë–†–ê–ë–û–¢–ö–ï</b>

–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤...
‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ
  `, { parse_mode: 'HTML' });
}

async function answerCallbackQuery(callbackQueryId: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  
  try {
    await fetch(`https://api.telegram.org/bot${botToken}/answerCallbackQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId
      })
    });
  } catch (error) {
    console.error('Failed to answer callback query:', error);
  }
}