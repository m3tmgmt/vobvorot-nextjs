import { Bot, Context, session } from 'grammy'
import { conversations, createConversation } from '@grammyjs/conversations'
import { Menu } from '@grammyjs/menu'
import { cloudinaryService } from './cloudinary'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const ADMIN_IDS = process.env.TELEGRAM_OWNER_CHAT_ID?.split(',') || []
const ADMIN_API_KEY = process.env.ADMIN_API_KEY

if (!BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN is required')
}

console.log('ü§ñ Initializing VobvorotAdminBot...')
console.log(`üìã Admin IDs: ${ADMIN_IDS.join(', ')}`)

// –¢–∏–ø—ã –¥–ª—è —Å–µ—Å—Å–∏–∏
interface SessionData {
  conversationStep?: string
  productData?: any
  messageId?: number
}

type MyContext = Context & {
  session: SessionData
  conversation: any
}

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
export const bot = new Bot<MyContext>(BOT_TOKEN)

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
bot.use(session({
  initial(): SessionData {
    return {}
  },
}))

// –ü–æ–¥–∫–ª—é—á–∞–µ–º conversations
bot.use(conversations())

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(ctx: MyContext): boolean {
  const userId = ctx.from?.id.toString()
  const isAdminUser = userId && ADMIN_IDS.includes(userId)
  console.log(`üîê Checking admin rights for user ${userId}: ${isAdminUser}`)
  return Boolean(isAdminUser)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º
async function notifyAdmins(message: string, options?: any) {
  for (const adminId of ADMIN_IDS) {
    try {
      await bot.api.sendMessage(adminId, message, options)
      console.log(`‚úÖ Notification sent to admin ${adminId}`)
    } catch (error) {
      console.error(`‚ùå Failed to send notification to admin ${adminId}:`, error)
    }
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = new Menu<MyContext>('main-menu')
  .text('üì¶ –ó–∞–∫–∞–∑—ã', async (ctx) => {
    await ctx.reply('üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:', { reply_markup: ordersMenu })
  }).row()
  .text('üõçÔ∏è –¢–æ–≤–∞—Ä—ã', async (ctx) => {
    await ctx.reply('üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:', { reply_markup: productsMenu })
  }).row()
  .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
    try {
      const stats = await getStats()
      await ctx.reply(stats)
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    }
  }).row()
  .text('üé¨ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π', async (ctx) => {
    await ctx.reply('üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', { reply_markup: videoMenu })
  }).row()
  .text('üí¨ –û—Ç–∑—ã–≤—ã', async (ctx) => {
    await ctx.reply('üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')
  })
  .text('üë• –ö–ª–∏–µ–Ω—Ç—ã', async (ctx) => {
    await ctx.reply('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')
  })

// –ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
const ordersMenu = new Menu<MyContext>('orders-menu')
  .text('üì• –ù–æ–≤—ã–µ', async (ctx) => {
    const orders = await getOrdersByStatus('PENDING')
    await ctx.reply(orders || '–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
  })
  .text('‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', async (ctx) => {
    const orders = await getOrdersByStatus('PROCESSING')
    await ctx.reply(orders || '–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ')
  }).row()
  .text('üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ', async (ctx) => {
    const orders = await getOrdersByStatus('SHIPPED')
    await ctx.reply(orders || '–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
  })
  .text('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ', async (ctx) => {
    const orders = await getOrdersByStatus('DELIVERED')
    await ctx.reply(orders || '–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
  }).row()
  .back('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

// –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
const productsMenu = new Menu<MyContext>('products-menu')
  .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', async (ctx) => {
    await ctx.conversation.enter('addProductConversation')
  }).row()
  .text('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', async (ctx) => {
    await ctx.reply('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')
  }).row()
  .text('üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', async (ctx) => {
    const products = await getProductsList()
    await ctx.reply(products)
  }).row()
  .back('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

// –ú–µ–Ω—é –≤–∏–¥–µ–æ
const videoMenu = new Menu<MyContext>('video-menu')
  .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ', async (ctx) => {
    await ctx.conversation.enter('uploadHomeVideoConversation')
  })
  .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ', async (ctx) => {
    await deleteHomeVideo()
    await ctx.reply('‚úÖ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–¥–∞–ª–µ–Ω–æ')
  }).row()
  .text('‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ', async (ctx) => {
    const videoInfo = await getCurrentHomeVideo()
    await ctx.reply(videoInfo)
  }).row()
  .back('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–µ–Ω—é
bot.use(mainMenu)
bot.use(ordersMenu)
bot.use(productsMenu)
bot.use(videoMenu)

// –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function addProductConversation(conversation: any, ctx: MyContext) {
  try {
    const productData: any = {}

    // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    const nameCtx = await conversation.wait()
    productData.name = nameCtx.message?.text
    if (!productData.name) {
      await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
      return
    }

    // –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await ctx.reply('üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    const descCtx = await conversation.wait()
    productData.description = descCtx.message?.text || ''

    // –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
    await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (USD):')
    const priceCtx = await conversation.wait()
    const price = parseFloat(priceCtx.message?.text || '0')
    if (price <= 0) {
      await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É')
      return
    }
    productData.price = price

    // –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
    await ctx.reply('üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:')
    const photoCtx = await conversation.wait()
    if (photoCtx.message?.photo) {
      const photoUrl = await uploadPhotoToCloudinary(photoCtx.message.photo)
      productData.imageUrl = photoUrl
    }

    // –í–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await ctx.reply('üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):')
    const videoCtx = await conversation.wait()
    if (videoCtx.message?.video) {
      const videoUrl = await uploadVideoToCloudinary(videoCtx.message.video)
      productData.videoUrl = videoUrl
    } else if (videoCtx.message?.text !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      productData.videoUrl = null
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
    await ctx.reply('‚è≥ –°–æ–∑–¥–∞—é —Ç–æ–≤–∞—Ä...')
    const result = await createProduct(productData)
    if (result.success) {
      await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä "${productData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n${result.message}`)
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${result.error}`)
    }

  } catch (error) {
    console.error('Error in addProductConversation:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')
  }
}

// –î–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function uploadHomeVideoConversation(conversation: any, ctx: MyContext) {
  try {
    await ctx.reply('üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:')
    const videoCtx = await conversation.wait()
    
    if (videoCtx.message?.video) {
      await ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...')
      const videoUrl = await uploadVideoToCloudinary(videoCtx.message.video)
      
      if (videoUrl) {
        await updateHomeVideo(videoUrl)
        await ctx.reply('‚úÖ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ')
      }
    } else {
      await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª')
    }
  } catch (error) {
    console.error('Error in uploadHomeVideoConversation:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ')
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏
bot.use(createConversation(addProductConversation))
bot.use(createConversation(uploadHomeVideoConversation))

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command('start', async (ctx) => {
  if (!isAdmin(ctx)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É')
    return
  }

  const welcomeMessage = `
ü§ñ *VobvorotAdminBot* –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VobVorot Store

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ üì¶ –ó–∞–∫–∞–∑—ã - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ üõçÔ∏è –¢–æ–≤–∞—Ä—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
‚Ä¢ üé¨ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π - –∫–æ–Ω—Ç–µ–Ω—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
‚Ä¢ üí¨ –û—Ç–∑—ã–≤—ã - –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤
‚Ä¢ üë• –ö–ª–∏–µ–Ω—Ç—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏

üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
  `

  await ctx.reply(welcomeMessage, { 
    reply_markup: mainMenu,
    parse_mode: 'Markdown'
  })
})

bot.command('menu', async (ctx) => {
  if (!isAdmin(ctx)) return
  await ctx.reply('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu })
})

bot.command('help', async (ctx) => {
  if (!isAdmin(ctx)) return
  const helpMessage = `
üÜò *–ü–æ–º–æ—â—å –ø–æ VobvorotAdminBot*

üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üì± *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
‚Ä¢ üõçÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ üé¨ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
  `
  await ctx.reply(helpMessage, { parse_mode: 'Markdown' })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  if (!isAdmin(ctx)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É')
    return
  }

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
  if (ctx.message.text && !ctx.message.text.startsWith('/')) {
    await ctx.reply('üè† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', { reply_markup: mainMenu })
  }
})

// === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ===

async function getStats(): Promise<string> {
  try {
    const ordersCount = await prisma.order.count()
    const productsCount = await prisma.product.count()
    const totalRevenue = await prisma.order.aggregate({
      _sum: { total: true },
      where: { paymentStatus: 'COMPLETED' }
    })

    const recentOrders = await prisma.order.count({
      where: {
        createdAt: {
          gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        }
      }
    })

    return `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VobVorot Store*

üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersCount}
üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${productsCount}
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: $${totalRevenue._sum.total?.toFixed(2) || '0.00'}
üìà –ó–∞–∫–∞–∑–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: ${recentOrders}

üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}
    `
  } catch (error) {
    console.error('Error getting stats:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
  }
}

async function getOrdersByStatus(status: string): Promise<string | null> {
  try {
    const orders = await prisma.order.findMany({
      where: { status: status as any },
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        items: {
          include: {
            sku: {
              include: {
                product: true
              }
            }
          }
        }
      }
    })

    if (orders.length === 0) {
      return null
    }

    let message = `üì¶ –ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}":\n\n`
    
    for (const order of orders) {
      const itemsText = order.items.map(item => 
        `‚Ä¢ ${item.sku.product.name} x${item.quantity} - $${item.price}`
      ).join('\n')
      
      message += `üÜî ${order.orderNumber}\n`
      message += `üí∞ $${order.total}\n`
      message += `üìÖ ${order.createdAt.toLocaleDateString('ru-RU')}\n`
      message += `${itemsText}\n\n`
    }

    return message
  } catch (error) {
    console.error('Error getting orders:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤'
  }
}

async function getProductsList(): Promise<string> {
  try {
    const products = await prisma.product.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        skus: true,
        _count: {
          select: { skus: true }
        }
      }
    })

    if (products.length === 0) {
      return 'üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'
    }

    let message = 'üõçÔ∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n'
    
    for (const product of products) {
      const minPrice = Math.min(...product.skus.map(sku => Number(sku.price)))
      message += `üì¶ ${product.name}\n`
      message += `üí∞ –û—Ç $${minPrice}\n`
      message += `üî¢ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${product._count.skus}\n`
      message += `üé¨ –í–∏–¥–µ–æ: ${product.videoUrl ? '‚úÖ' : '‚ùå'}\n\n`
    }

    return message
  } catch (error) {
    console.error('Error getting products:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤'
  }
}

async function createProduct(productData: any): Promise<{ success: boolean, message?: string, error?: string }> {
  try {
    // –°–æ–∑–¥–∞–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const slug = productData.name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim()

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–µ–º–æ
    const firstCategory = await prisma.category.findFirst()
    if (!firstCategory) {
      return { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π' }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
    const product = await prisma.product.create({
      data: {
        name: productData.name,
        slug: slug + '-' + Date.now(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
        description: productData.description,
        categoryId: firstCategory.id,
        videoUrl: productData.videoUrl,
        isActive: true
      }
    })

    // –°–æ–∑–¥–∞–µ–º SKU
    await prisma.productSku.create({
      data: {
        sku: `SKU-${product.id.slice(-8).toUpperCase()}`,
        price: productData.price,
        stock: 100, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        productId: product.id,
        isActive: true
      }
    })

    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (productData.imageUrl) {
      await prisma.productImage.create({
        data: {
          url: productData.imageUrl,
          alt: productData.name,
          isPrimary: true,
          productId: product.id
        }
      })
    }

    return {
      success: true,
      message: `–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —Å ID: ${product.id}\n–°—Å—ã–ª–∫–∞: https://vobvorot.com/products/${product.slug}`
    }

  } catch (error) {
    console.error('Error creating product:', error)
    return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' }
  }
}

async function uploadPhotoToCloudinary(photos: any[]): Promise<string | null> {
  try {
    const photo = photos[photos.length - 1] // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    const fileResponse = await bot.api.getFile(photo.file_id)
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileResponse.file_path}`
    
    const result = await cloudinaryService.uploadFromUrl(fileUrl, {
      folder: 'vobvorot-products',
      resource_type: 'image'
    })
    
    return result.secure_url
  } catch (error) {
    console.error('Error uploading photo:', error)
    return null
  }
}

async function uploadVideoToCloudinary(video: any): Promise<string | null> {
  try {
    const fileResponse = await bot.api.getFile(video.file_id)
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileResponse.file_path}`
    
    const result = await cloudinaryService.uploadFromUrl(fileUrl, {
      folder: 'vobvorot-videos',
      resource_type: 'video'
    })
    
    return result.secure_url
  } catch (error) {
    console.error('Error uploading video:', error)
    return null
  }
}

async function updateHomeVideo(videoUrl: string): Promise<void> {
  try {
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/home-video`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${ADMIN_API_KEY}`
      },
      body: JSON.stringify({ videoUrl })
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`)
    }
  } catch (error) {
    console.error('Error updating home video:', error)
    throw error
  }
}

async function deleteHomeVideo(): Promise<void> {
  try {
    await updateHomeVideo('')
  } catch (error) {
    console.error('Error deleting home video:', error)
  }
}

async function getCurrentHomeVideo(): Promise<string> {
  try {
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/home-video`)
    const data = await response.json()
    
    if (data.videoUrl) {
      return `üé¨ –¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ: ${data.videoUrl}\nüìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(data.updatedAt).toLocaleString('ru-RU')}`
    } else {
      return '‚ùå –í–∏–¥–µ–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
    }
  } catch (error) {
    console.error('Error getting home video:', error)
    return '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ'
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö
export { notifyAdmins }

console.log('‚úÖ VobvorotAdminBot initialized successfully')