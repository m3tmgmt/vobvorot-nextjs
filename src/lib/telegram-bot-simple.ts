import { Bot } from 'grammy'

console.log('üöÄ [INIT] Starting Simple VobvorotAdminBot initialization...')

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const ADMIN_IDS = process.env.TELEGRAM_OWNER_CHAT_ID?.trim().split(',').map(id => id.trim()) || []

console.log('üîç [INIT] Environment check:')
console.log(`üîë [INIT] Bot token exists: ${!!BOT_TOKEN}`)
console.log(`üîë [INIT] Bot token length: ${BOT_TOKEN?.length || 0}`)
console.log(`üìã [INIT] Admin IDs raw: "${process.env.TELEGRAM_OWNER_CHAT_ID}"`)
console.log(`üìã [INIT] Admin IDs parsed: [${ADMIN_IDS.join(', ')}]`)
console.log(`üìã [INIT] Admin IDs count: ${ADMIN_IDS.length}`)

if (!BOT_TOKEN) {
  console.error('üí• [INIT] CRITICAL: TELEGRAM_BOT_TOKEN is missing!')
  throw new Error('TELEGRAM_BOT_TOKEN is required')
}

if (ADMIN_IDS.length === 0) {
  console.error('üí• [INIT] WARNING: No admin IDs configured!')
}

console.log('‚úÖ [INIT] Environment variables validated')

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å botInfo –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
console.log('ü§ñ [INIT] Creating Grammy Bot instance with botInfo...')

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º botInfo –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å–µ—Ä–≤–µ—Äless —Å—Ä–µ–¥—ã
const botInfo = {
  id: parseInt(BOT_TOKEN.split(':')[0]),
  is_bot: true,
  first_name: 'VobvorotAdminBot',
  username: 'VobvorotAdminBot',
  can_join_groups: false,
  can_read_all_group_messages: false,
  supports_inline_queries: false
}

export const bot = new Bot(BOT_TOKEN, { 
  botInfo: botInfo 
})

console.log('‚úÖ [INIT] Grammy Bot instance created successfully with botInfo:', botInfo)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(userId: number): boolean {
  const isAdminUser = ADMIN_IDS.includes(userId.toString())
  console.log(`üîê Checking admin rights for user ${userId}: ${isAdminUser}`)
  return isAdminUser
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  try {
    console.log(`üöÄ [BOT] /start command triggered`)
    console.log(`üë§ [BOT] User data:`, { 
      id: ctx.from?.id, 
      username: ctx.from?.username,
      first_name: ctx.from?.first_name
    })
    
    if (!ctx.from) {
      console.log('‚ùå [BOT] No user data in context')
      return
    }
    
    console.log(`üîê [BOT] Checking admin rights for user ${ctx.from.id}`)
    console.log(`üîê [BOT] Admin IDs configured:`, ADMIN_IDS)
    
    if (!isAdmin(ctx.from.id)) {
      console.log(`‚ùå [BOT] Access denied for user ${ctx.from.id}`)
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É')
      return
    }

    console.log(`‚úÖ [BOT] Admin verified! Sending welcome message to ${ctx.from.id}`)
    
    const welcomeMessage = `ü§ñ VobvorotAdminBot —Ä–∞–±–æ—Ç–∞–µ—Ç!

‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

üì∫ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:

üè† –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê:
/home_videos - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
/add_home_video <URL> - –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
/remove_home_video <ID> - —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ —Å –≥–ª–∞–≤–Ω–æ–π
/list_home_videos - —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π

‚úçÔ∏è –°–¢–†–ê–ù–ò–¶–ê SIGN:
/sign_videos - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã sign
/add_sign_video <URL> - –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –≥–∞–ª–µ—Ä–µ—é sign
/remove_sign_video <ID> - —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ sign
/list_sign_videos - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–µ–æ sign`

    console.log(`üì§ [BOT] Sending welcome message...`)
    await ctx.reply(welcomeMessage)
    
    console.log(`‚úÖ [BOT] Welcome message sent successfully to user ${ctx.from.id}`)
  } catch (error) {
    console.error('üí• [BOT] Critical error in /start command:', error)
    console.error('üí• [BOT] Error stack:', error instanceof Error ? error.stack : 'No stack')
    try {
      console.log(`üîÑ [BOT] Attempting to send error message...`)
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      console.log(`‚úÖ [BOT] Error message sent`)
    } catch (replyError) {
      console.error('üí• [BOT] Failed to send error message:', replyError)
    }
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ sign —Å—Ç—Ä–∞–Ω–∏—Ü—ã
bot.command('list_sign_videos', async (ctx) => {
  try {
    if (!ctx.from || !isAdmin(ctx.from.id)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
      return
    }

    console.log('üì∫ Fetching sign videos...')
    
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/sign-videos`)
    const data = await response.json()
    
    if (data.videos && data.videos.length > 0) {
      let message = `üì∫ –í–∏–¥–µ–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã sign (${data.count} —à—Ç.):\n\n`
      
      data.videos.forEach((video: any, index: number) => {
        message += `${index + 1}. ID: ${video.id}\n`
        message += `   URL: ${video.url}\n`
        message += `   –î–æ–±–∞–≤–ª–µ–Ω–æ: ${new Date(video.createdAt).toLocaleString('ru')}\n\n`
      })
      
      await ctx.reply(message)
    } else {
      await ctx.reply('üì∫ –í–∏–¥–µ–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã sign –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    }
    
  } catch (error) {
    console.error('‚ùå Error listing sign videos:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ')
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ sign —Å—Ç—Ä–∞–Ω–∏—Ü—ã
bot.command('add_sign_video', async (ctx) => {
  try {
    if (!ctx.from || !isAdmin(ctx.from.id)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
      return
    }

    const args = ctx.match?.toString().trim()
    if (!args) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ URL –≤–∏–¥–µ–æ. –ü—Ä–∏–º–µ—Ä: /add_sign_video https://example.com/video.mp4')
      return
    }

    console.log('üì∫ Adding sign video:', args)
    
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/sign-videos`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
      },
      body: JSON.stringify({ videoUrl: args })
    })
    
    const data = await response.json()
    
    if (response.ok && data.success) {
      await ctx.reply(`‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–∞–ª–µ—Ä–µ—é sign!
      
üì∫ ID: ${data.addedVideo.id}
üîó URL: ${data.addedVideo.url}
üìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: ${data.count}`)
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
    
  } catch (error) {
    console.error('‚ùå Error adding sign video:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ')
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ sign —Å—Ç—Ä–∞–Ω–∏—Ü—ã
bot.command('remove_sign_video', async (ctx) => {
  try {
    if (!ctx.from || !isAdmin(ctx.from.id)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
      return
    }

    const args = ctx.match?.toString().trim()
    if (!args) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–∏–¥–µ–æ. –ü—Ä–∏–º–µ—Ä: /remove_sign_video sign_video_1234567890')
      return
    }

    console.log('üì∫ Removing sign video:', args)
    
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/sign-videos`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
      },
      body: JSON.stringify({ videoId: args })
    })
    
    const data = await response.json()
    
    if (response.ok && data.success) {
      await ctx.reply(`‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ sign!
      
üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω–æ–µ ID: ${data.deletedVideoId}
üìä –û—Å—Ç–∞–ª–æ—Å—å –≤–∏–¥–µ–æ: ${data.count}`)
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
    
  } catch (error) {
    console.error('‚ùå Error removing sign video:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ')
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ sign (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è)
bot.command('sign_videos', async (ctx) => {
  try {
    if (!ctx.from || !isAdmin(ctx.from.id)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
      return
    }

    await ctx.reply(`‚úçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã SIGN:

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üìã /list_sign_videos - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ
‚ûï /add_sign_video <URL> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
üóëÔ∏è /remove_sign_video <ID> - —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ

–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
/add_sign_video https://example.com/video.mp4

–ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è:
/remove_sign_video sign_video_1234567890`)
    
  } catch (error) {
    console.error('‚ùå Error in sign_videos command:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã')
  }
})

// ===== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ò–î–ï–û –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ =====

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
bot.command('list_home_videos', async (ctx) => {
  try {
    if (!ctx.from || !isAdmin(ctx.from.id)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
      return
    }

    console.log('üì∫ Fetching home videos...')
    
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/home-videos`)
    const data = await response.json()
    
    if (data.videos && data.videos.length > 0) {
      let message = `üè† –í–∏–¥–µ–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (${data.count} —à—Ç.):\n\n`
      
      data.videos.forEach((video: any, index: number) => {
        message += `${index + 1}. ID: ${video.id}\n`
        message += `   URL: ${video.url}\n`
        message += `   –î–æ–±–∞–≤–ª–µ–Ω–æ: ${new Date(video.createdAt).toLocaleString('ru')}\n\n`
      })
      
      await ctx.reply(message)
    } else {
      await ctx.reply('üè† –í–∏–¥–µ–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    }
    
  } catch (error) {
    console.error('‚ùå Error listing home videos:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ')
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
bot.command('add_home_video', async (ctx) => {
  try {
    if (!ctx.from || !isAdmin(ctx.from.id)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
      return
    }

    const args = ctx.match?.toString().trim()
    if (!args) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ URL –≤–∏–¥–µ–æ. –ü—Ä–∏–º–µ—Ä: /add_home_video https://example.com/video.mp4')
      return
    }

    console.log('üì∫ Adding home video:', args)
    
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/home-videos`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
      },
      body: JSON.stringify({ videoUrl: args })
    })
    
    const data = await response.json()
    
    if (response.ok && data.success) {
      await ctx.reply(`‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É!
      
üì∫ ID: ${data.addedVideo.id}
üîó URL: ${data.addedVideo.url}
üìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: ${data.count}`)
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
    
  } catch (error) {
    console.error('‚ùå Error adding home video:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ')
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
bot.command('remove_home_video', async (ctx) => {
  try {
    if (!ctx.from || !isAdmin(ctx.from.id)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
      return
    }

    const args = ctx.match?.toString().trim()
    if (!args) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–∏–¥–µ–æ. –ü—Ä–∏–º–µ—Ä: /remove_home_video home_video_1234567890')
      return
    }

    console.log('üì∫ Removing home video:', args)
    
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/home-videos`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
      },
      body: JSON.stringify({ videoId: args })
    })
    
    const data = await response.json()
    
    if (response.ok && data.success) {
      await ctx.reply(`‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã!
      
üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω–æ–µ ID: ${data.deletedVideoId}
üìä –û—Å—Ç–∞–ª–æ—Å—å –≤–∏–¥–µ–æ: ${data.count}`)
    } else {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
    
  } catch (error) {
    console.error('‚ùå Error removing home video:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ')
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è)
bot.command('home_videos', async (ctx) => {
  try {
    if (!ctx.from || !isAdmin(ctx.from.id)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
      return
    }

    await ctx.reply(`üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´:

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üìã /list_home_videos - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ
‚ûï /add_home_video <URL> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
üóëÔ∏è /remove_home_video <ID> - —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ

–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
/add_home_video https://example.com/video.mp4

–ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è:
/remove_home_video home_video_1234567890`)
    
  } catch (error) {
    console.error('‚ùå Error in home_videos command:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã')
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
bot.on('callback_query', async (ctx) => {
  try {
    console.log(`üîò Received callback query from user ${ctx.from?.id}: ${ctx.callbackQuery?.data}`)
    
    if (!ctx.from || !isAdmin(ctx.from.id)) {
      await ctx.answerCallbackQuery({ text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏' })
      return
    }

    const callbackData = ctx.callbackQuery?.data
    if (!callbackData) return

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await ctx.answerCallbackQuery()

    // –ü–∞—Ä—Å–∏–º callback data
    const [action, ...params] = callbackData.split('_')
    const entityId = params.join('_')

    console.log(`üîß Processing callback: action=${action}, entityId=${entityId}`)

    switch (action) {
      case 'confirm':
        if (params[0] === 'order') {
          await handleConfirmOrder(ctx, entityId)
        }
        break

      case 'upload':
        if (params[0] === 'photo') {
          await handleUploadPhoto(ctx, entityId)
        }
        break

      case 'send':
        if (params[0] === 'photo') {
          await handleSendPhoto(ctx, entityId)
        }
        break

      case 'cancel':
        if (params[0] === 'order') {
          await handleCancelOrder(ctx, entityId)
        }
        break

      case 'customer':
        await handleCustomerProfile(ctx, entityId)
        break

      case 'accept':
        if (params[0] === 'order') {
          await handleAcceptOrder(ctx, entityId)
        }
        break

      case 'reject':
        if (params[0] === 'order') {
          await handleRejectOrder(ctx, entityId)
        }
        break

      case 'status':
        await handleChangeStatus(ctx, entityId)
        break

      default:
        await ctx.reply(`‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è "${action}" –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`)
        break
    }

  } catch (error) {
    console.error('‚ùå Error handling callback query:', error)
    try {
      await ctx.answerCallbackQuery({ text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' })
    } catch (answerError) {
      console.error('‚ùå Failed to answer callback query:', answerError)
    }
  }
})

// Handlers –¥–ª—è callback actions

async function handleConfirmOrder(ctx: any, orderId: string) {
  try {
    console.log('‚úÖ Confirming order:', orderId)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/sign-orders/${orderId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
      },
      body: JSON.stringify({ 
        action: 'update_status',
        status: 'PROCESSING'
      })
    })

    if (response.ok) {
      await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É`)
    } else {
      const errorData = await response.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderId}: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  } catch (error) {
    console.error('Error confirming order:', error)
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞`)
  }
}

async function handleUploadPhoto(ctx: any, orderId: string) {
  await ctx.reply(`üì∏ –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫ –∑–∞–∫–∞–∑—É ${orderId}:
  
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ñ–æ—Ç–æ
2. –í –æ–ø–∏—Å–∞–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ: order_${orderId}
3. –§–æ—Ç–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –∑–∞–∫–∞–∑—É`)
}

async function handleSendPhoto(ctx: any, orderId: string) {
  try {
    console.log('üìß Sending photo for order:', orderId)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/sign-orders/${orderId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
      },
      body: JSON.stringify({
        action: 'send_photo'
      })
    })

    if (response.ok) {
      await ctx.reply(`‚úÖ –§–æ—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É`)
    } else {
      const errorData = await response.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  } catch (error) {
    console.error('Error sending photo:', error)
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ`)
  }
}

async function handleCancelOrder(ctx: any, orderId: string) {
  try {
    console.log('‚ùå Cancelling order:', orderId)
    
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/sign-orders/${orderId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
      },
      body: JSON.stringify({ 
        action: 'update_status',
        status: 'CANCELLED'
      })
    })

    if (response.ok) {
      await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ ${orderId} –æ—Ç–º–µ–Ω–µ–Ω`)
    } else {
      const errorData = await response.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ ${orderId}: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  } catch (error) {
    console.error('Error cancelling order:', error)
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞`)
  }
}

async function handleCustomerProfile(ctx: any, customerId: string) {
  await ctx.reply(`üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ ${customerId}:
  
–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`)
}

async function handleAcceptOrder(ctx: any, orderId: string) {
  await handleConfirmOrder(ctx, orderId) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
}

async function handleRejectOrder(ctx: any, orderId: string) {
  await handleCancelOrder(ctx, orderId) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
}

async function handleChangeStatus(ctx: any, orderId: string) {
  await ctx.reply(`üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderId}:

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:
‚Ä¢ PENDING - –í –æ–∂–∏–¥–∞–Ω–∏–∏
‚Ä¢ PROCESSING - –í —Ä–∞–±–æ—Ç–µ  
‚Ä¢ COMPLETED - –ó–∞–≤–µ—Ä—à–µ–Ω
‚Ä¢ CANCELLED - –û—Ç–º–µ–Ω–µ–Ω

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: status_${orderId}_–ù–û–í–´–ô_–°–¢–ê–¢–£–°`)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  try {
    console.log(`üì® Received message from user ${ctx.from?.id}: ${ctx.message?.text}`)
    
    if (!ctx.from) return
    
    if (!isAdmin(ctx.from.id)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if (ctx.message?.text && ctx.message.text.startsWith('status_')) {
      const parts = ctx.message.text.split('_')
      if (parts.length === 3) {
        const orderId = parts[1]
        const newStatus = parts[2]
        
        try {
          const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/sign-orders/${orderId}`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
            },
            body: JSON.stringify({ 
              action: 'update_status',
              status: newStatus 
            })
          })

          if (response.ok) {
            await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newStatus}`)
          } else {
            const errorData = await response.json()
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderId}: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
          }
        } catch (error) {
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞`)
        }
        return
      }
    }

    if (ctx.message?.text && !ctx.message.text.startsWith('/')) {
      await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.')
    }
  } catch (error) {
    console.error('‚ùå Error handling message:', error)
  }
})

console.log('‚úÖ Simple VobvorotAdminBot initialized successfully')