import { Bot, Context, InlineKeyboard } from 'grammy'
import { PrismaClient } from '@prisma/client'
import { cloudinaryService } from './cloudinary'

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
type MyContext = Context

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7700098378:AAGZ1zZOxiwXbJeknO9SvyN25KvfWQkQNrI'
const ADMIN_IDS = (process.env.TELEGRAM_OWNER_CHAT_ID || '316593422,1837334996').split(',')

console.log('ü§ñ [BOT-STATELESS] Initializing stateless bot...')
console.log('üîë [BOT-STATELESS] Token exists:', !!BOT_TOKEN)
console.log('üë§ [BOT-STATELESS] Admin IDs:', ADMIN_IDS)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot<MyContext>(BOT_TOKEN)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prisma
const prisma = new PrismaClient()

function isAdmin(ctx: MyContext): boolean {
  return ADMIN_IDS.includes(ctx.from?.id.toString() || '')
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return new InlineKeyboard()
    .text('üì¶ –ó–∞–∫–∞–∑—ã', 'menu:orders')
    .text('üõçÔ∏è –¢–æ–≤–∞—Ä—ã', 'menu:products')
    .row()
    .text('üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'menu:categories')
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'menu:stats')
    .row()
    .text('üé¨ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π', 'menu:home_video')
    .text('‚úçÔ∏è –í–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–∏', 'menu:sign_videos')
    .row()
    .text('üí¨ –û—Ç–∑—ã–≤—ã', 'menu:reviews')
    .text('üë• –ö–ª–∏–µ–Ω—Ç—ã', 'menu:customers')
}

// –ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
function getOrdersMenu() {
  return new InlineKeyboard()
    .text('üìã –í—Å–µ –∑–∞–∫–∞–∑—ã', 'orders:all')
    .text('‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ', 'orders:pending')
    .row()
    .text('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', 'orders:completed')
    .text('‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ', 'orders:cancelled')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
function getProductsMenu() {
  return new InlineKeyboard()
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'products:add')
    .text('üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', 'products:list')
    .row()
    .text('üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', 'products:search')
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤', 'products:stats')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function getCategoriesMenu() {
  return new InlineKeyboard()
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'categories:add')
    .text('üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', 'categories:list')
    .row()
    .text('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'categories:edit')
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 'categories:delete')
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
}

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.command('start', async (ctx) => {
  console.log('üéØ [BOT-STATELESS] /start command received from:', ctx.from?.id)
  
  if (!isAdmin(ctx)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }

  await ctx.reply(
    'üöÄ *VobVorot Store Management*\n\n' +
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º!\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:',
    { 
      parse_mode: 'Markdown',
      reply_markup: getMainMenu()
    }
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.callbackQuery('menu:main', async (ctx) => {
  await ctx.editMessageText(
    'üöÄ *VobVorot Store Management*\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:',
    { 
      parse_mode: 'Markdown',
      reply_markup: getMainMenu()
    }
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
bot.callbackQuery('menu:orders', async (ctx) => {
  await ctx.editMessageText(
    'üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    { 
      parse_mode: 'Markdown',
      reply_markup: getOrdersMenu()
    }
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
bot.callbackQuery('orders:all', async (ctx) => {
  await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–∫–∞–∑—ã...' })
  
  try {
    const orders = await prisma.order.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        user: true,
        items: {
          include: {
            product: true
          }
        }
      }
    })
    
    if (orders.length === 0) {
      await ctx.editMessageText(
        'üì¶ *–í—Å–µ –∑–∞–∫–∞–∑—ã*\n\n‚ùå –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç',
        { 
          parse_mode: 'Markdown',
          reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:orders')
        }
      )
      return
    }
    
    let message = 'üì¶ *–í—Å–µ –∑–∞–∫–∞–∑—ã*\n\n'
    
    for (const order of orders) {
      const total = order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0)
      const date = new Date(order.createdAt).toLocaleDateString('ru-RU')
      
      message += `üÜî *–ó–∞–∫–∞–∑ #${order.orderNumber}*\n`
      message += `üìÖ –î–∞—Ç–∞: ${date}\n`
      message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.user?.name || order.email}\n`
      message += `üí∞ –°—É–º–º–∞: $${total.toFixed(2)}\n`
      message += `üìä –°—Ç–∞—Ç—É—Å: ${order.status}\n`
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'orders:all')
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:orders')
    })
    
  } catch (error) {
    console.error('‚ùå [BOT-STATELESS] Error loading orders:', error)
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤',
      { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:orders') }
    )
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
bot.callbackQuery('menu:products', async (ctx) => {
  await ctx.editMessageText(
    'üõçÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    { 
      parse_mode: 'Markdown',
      reply_markup: getProductsMenu()
    }
  )
})

// –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
bot.callbackQuery('products:list', async (ctx) => {
  await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã...' })
  
  try {
    const products = await prisma.product.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        category: true
      }
    })
    
    if (products.length === 0) {
      await ctx.editMessageText(
        'üõçÔ∏è *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤*\n\n‚ùå –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç',
        { 
          parse_mode: 'Markdown',
          reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:products')
        }
      )
      return
    }
    
    let message = 'üõçÔ∏è *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤*\n\n'
    
    for (const product of products) {
      message += `üì¶ *${product.name}*\n`
      message += `üí∞ –¶–µ–Ω–∞: $${product.price}\n`
      message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.inStock ? '–î–∞' : '–ù–µ—Ç'}\n`
      message += `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n`
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`
    }
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'products:list')
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:products')
    })
    
  } catch (error) {
    console.error('‚ùå [BOT-STATELESS] Error loading products:', error)
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤',
      { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:products') }
    )
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
bot.callbackQuery('menu:categories', async (ctx) => {
  await ctx.editMessageText(
    'üè∑Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    { 
      parse_mode: 'Markdown',
      reply_markup: getCategoriesMenu()
    }
  )
})

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.callbackQuery('menu:stats', async (ctx) => {
  await ctx.answerCallbackQuery({ text: 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...' })
  
  try {
    const [
      totalOrders,
      totalProducts,
      totalUsers,
      totalRevenue
    ] = await Promise.all([
      prisma.order.count(),
      prisma.product.count(),
      prisma.user.count(),
      prisma.order.findMany({
        include: { items: true }
      }).then(orders => 
        orders.reduce((sum, order) => 
          sum + order.items.reduce((orderSum, item) => 
            orderSum + (item.price * item.quantity), 0
          ), 0
        )
      )
    ])
    
    const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*\n\n` +
      `üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}\n` +
      `üõçÔ∏è –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}\n` +
      `üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${totalUsers}\n` +
      `üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: $${totalRevenue.toFixed(2)}\n`
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboard()
        .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'menu:stats')
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main')
    })
    
  } catch (error) {
    console.error('‚ùå [BOT-STATELESS] Error loading stats:', error)
    await ctx.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main') }
    )
  }
})

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
bot.callbackQuery(['menu:home_video', 'menu:sign_videos', 'menu:reviews', 'menu:customers'], async (ctx) => {
  const sections = {
    'menu:home_video': 'üé¨ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π',
    'menu:sign_videos': '‚úçÔ∏è –í–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–∏',
    'menu:reviews': 'üí¨ –û—Ç–∑—ã–≤—ã',
    'menu:customers': 'üë• –ö–ª–∏–µ–Ω—Ç—ã'
  }
  
  const section = sections[ctx.callbackQuery.data as keyof typeof sections]
  
  await ctx.editMessageText(
    `${section} - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`,
    { reply_markup: new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'menu:main') }
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx
  console.error('‚ùå [BOT-STATELESS] Error while handling update', ctx.update.update_id, ':', err.error)
})

console.log('‚úÖ [BOT-STATELESS] Stateless bot initialized successfully')

export { bot }