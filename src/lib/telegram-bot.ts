import { Bot, Context, session, GrammyError, HttpError } from 'grammy'
import { conversations, createConversation } from '@grammyjs/conversations'
import { Menu } from '@grammyjs/menu'
import TelegramCloudinaryIntegration, { telegramPhotoHelpers } from './telegram-cloudinary'
import { cloudinaryService } from './cloudinary'

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface SessionData {
  step?: string
  productData?: any
  orderFilter?: string
}

type MyContext = Context & {
  session: SessionData
  conversation: any
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot<MyContext>(process.env.TELEGRAM_BOT_TOKEN!)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cloudinary –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
const cloudinaryIntegration = new TelegramCloudinaryIntegration(bot as any, process.env.TELEGRAM_BOT_TOKEN!)

// –°–µ—Å—Å–∏–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
bot.use(session({ initial: (): SessionData => ({}) }))
bot.use(conversations())

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
const OWNER_CHAT_ID = process.env.OWNER_TELEGRAM_ID || '1234567890'

function isOwner(ctx: MyContext): boolean {
  return ctx.from?.id.toString() === OWNER_CHAT_ID
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = new Menu<MyContext>('main-menu')
  .text('üì¶ –ó–∞–∫–∞–∑—ã', (ctx) => ctx.conversation.enter('manageOrders'))
  .text('üõçÔ∏è –¢–æ–≤–∞—Ä—ã', (ctx) => ctx.conversation.enter('manageProducts'))
  .row()
  .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => ctx.conversation.enter('viewStats'))
  .text('üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', (ctx) => ctx.conversation.enter('manageImages'))
  .row()
  .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', (ctx) => ctx.conversation.enter('settings'))
  .text('üí¨ –û—Ç–∑—ã–≤—ã', (ctx) => ctx.conversation.enter('manageReviews'))
  .row()
  .text('üë• –ö–ª–∏–µ–Ω—Ç—ã', (ctx) => ctx.conversation.enter('manageCustomers'))

bot.use(mainMenu)

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.command('start', async (ctx) => {
  if (!isOwner(ctx)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }

  await ctx.reply(
    'üöÄ *EXVICPMOUR Store Management*\n\n' +
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º!\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:',
    { 
      parse_mode: 'Markdown',
      reply_markup: mainMenu
    }
  )
})

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
async function manageOrders(conversation: any, ctx: MyContext) {
  await ctx.reply('üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏*', { parse_mode: 'Markdown' })
  
  const ordersMenu = new Menu<MyContext>('orders-menu')
    .text('üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', async (ctx) => {
      await showOrders(ctx, 'pending')
    })
    .text('üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', async (ctx) => {
      await showOrders(ctx, 'processing')
    })
    .row()
    .text('üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ', async (ctx) => {
      await showOrders(ctx, 'shipped')
    })
    .text('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ', async (ctx) => {
      await showOrders(ctx, 'completed')
    })
    .row()
    .text('üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞', async (ctx) => {
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ email –∫–ª–∏–µ–Ω—Ç–∞:')
      const response = await conversation.wait()
      await searchOrder(ctx, response.message?.text || '')
    })
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

  await ctx.editMessageReplyMarkup({ reply_markup: ordersMenu })
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
async function manageProducts(conversation: any, ctx: MyContext) {
  await ctx.reply('üõçÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*', { parse_mode: 'Markdown' })
  
  const productsMenu = new Menu<MyContext>('products-menu')
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', async (ctx) => {
      await ctx.conversation.enter('addProduct')
    })
    .text('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', async (ctx) => {
      await showProductsList(ctx, 'edit')
    })
    .row()
    .text('üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', async (ctx) => {
      await showProductsList(ctx, 'photos')
    })
    .text('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã', async (ctx) => {
      await showProductsList(ctx, 'prices')
    })
    .row()
    .text('üìä –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤', async (ctx) => {
      await showInventory(ctx)
    })
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', async (ctx) => {
      await showProductsList(ctx, 'delete')
    })
    .row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

  await ctx.editMessageReplyMarkup({ reply_markup: productsMenu })
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
async function addProduct(conversation: any, ctx: MyContext) {
  await ctx.reply('‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', { parse_mode: 'Markdown' })
  
  const productData: any = {}
  
  // –ù–∞–∑–≤–∞–Ω–∏–µ
  const nameResponse = await conversation.wait()
  productData.name = nameResponse.message?.text
  
  // –û–ø–∏—Å–∞–Ω–∏–µ
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
  const descResponse = await conversation.wait()
  productData.description = descResponse.message?.text
  
  // –ë—Ä–µ–Ω–¥
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-"):')
  const brandResponse = await conversation.wait()
  productData.brand = brandResponse.message?.text === '-' ? null : brandResponse.message?.text
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
  const categories = await getCategories()
  const categoryText = categories.map((cat: any, index: number) => `${index + 1}. ${cat.name}`).join('\n')
  await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n${categoryText}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:`)
  
  const catResponse = await conversation.wait()
  const catIndex = parseInt(catResponse.message?.text || '1') - 1
  productData.categoryId = categories[catIndex]?.id
  
  // –¶–µ–Ω–∞
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 29.99):')
  const priceResponse = await conversation.wait()
  productData.price = parseFloat(priceResponse.message?.text || '0')
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:')
  const stockResponse = await conversation.wait()
  productData.stock = parseInt(stockResponse.message?.text || '0')
  
  // –†–∞–∑–º–µ—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-"):')
  const sizesResponse = await conversation.wait()
  productData.sizes = sizesResponse.message?.text === '-' ? [] : sizesResponse.message?.text?.split(',').map((s: string) => s.trim())
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  try {
    const newProduct = await createProduct(productData)
    await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüì¶ *${newProduct.name}*\nüí∞ $${newProduct.price}\nüì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${newProduct.stock}`, { parse_mode: 'Markdown' })
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
    await ctx.reply('üì∏ –•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip')
    
    let photoCount = 0
    let isFirstPhoto = true
    
    while (true) {
      const response = await conversation.wait()
      
      if (response.message?.text === '/skip') break
      
      if (response.message?.photo) {
        try {
          // –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
          const bestPhoto = telegramPhotoHelpers.getBestQualityPhoto(response.message.photo)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
          if (!telegramPhotoHelpers.isPhotoQualityGood(bestPhoto, 400, 400)) {
            await ctx.reply('‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –º–µ–Ω–µ–µ 400x400 –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.')
          }
          
          // –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –¥–µ–ª–∞–µ–º –≥–ª–∞–≤–Ω—ã–º
          const result = await uploadProductPhoto(newProduct.id, bestPhoto.file_id, isFirstPhoto)
          photoCount++
          isFirstPhoto = false
          
          const photoInfo = telegramPhotoHelpers.getPhotoInfo(bestPhoto)
          await ctx.reply(
            `‚úÖ –§–æ—Ç–æ ${photoCount} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Cloudinary!\n` +
            `üìê –†–∞–∑–º–µ—Ä: ${photoInfo}\n` +
            `üîó URL: ${result.secure_url}\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ /skip –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`
          )
        } catch (error: any) {
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ${error.message}`)
        }
      } else {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip')
      }
    }
    
    await ctx.reply(
      `üéâ –¢–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n` +
      `üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${photoCount} —Ñ–æ—Ç–æ –≤ Cloudinary\n` +
      `${photoCount > 0 ? '‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞' : ''}`,
      { reply_markup: mainMenu }
    )
    
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${error}`)
  }
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
async function manageImages(conversation: any, ctx: MyContext) {
  await ctx.reply('üì∏ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏*', { parse_mode: 'Markdown' })
  
  const imagesMenu = new Menu<MyContext>('images-menu')
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
      await ctx.reply('üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')
      const stats = await cloudinaryIntegration.getUploadStats()
      const statsMessage = cloudinaryIntegration.formatStatsForTelegram(stats)
      await ctx.reply(statsMessage, { parse_mode: 'Markdown' })
    })
    .text('üîç –°—Ç–∞—Ç—É—Å Cloudinary', async (ctx) => {
      const status = await cloudinaryIntegration.checkCloudinaryStatus()
      const statusIcon = status.available ? '‚úÖ' : '‚ùå'
      await ctx.reply(`${statusIcon} ${status.message}`)
    })
    .row()
    .text('üóÇÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –ø–∞–ø–∫—É', async (ctx) => {
      await ctx.conversation.enter('uploadToFolder')
    })
    .text('üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ', async (ctx) => {
      await ctx.reply('üßπ –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...')
      const result = await cloudinaryIntegration.cleanupOldUploads('telegram-uploads/temp', 7)
      await ctx.reply(
        `‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
        `üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: ${result.deleted} —Ñ–∞–π–ª–æ–≤\n` +
        `${result.errors.length > 0 ? `‚ö†Ô∏è –û—à–∏–±–∫–∏: ${result.errors.length}` : ''}`
      )
    })
    .row()
    .text('üì§ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞', async (ctx) => {
      await ctx.conversation.enter('bulkImageUpload')
    })
    .text('üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏', async (ctx) => {
      await ctx.conversation.enter('manageTags')
    })
    .row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

  await ctx.editMessageReplyMarkup({ reply_markup: imagesMenu })
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞–ø–∫—É
async function uploadToFolder(conversation: any, ctx: MyContext) {
  await ctx.reply('üóÇÔ∏è *–ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ø–∞–ø–∫—É*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏:', { parse_mode: 'Markdown' })
  
  const folderResponse = await conversation.wait()
  const folder = folderResponse.message?.text || 'telegram-uploads'
  
  await ctx.reply(`üìÇ –ü–∞–ø–∫–∞: "${folder}"\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done`)
  
  let uploadCount = 0
  const results = []
  
  while (true) {
    const response = await conversation.wait()
    
    if (response.message?.text === '/done') break
    
    if (response.message?.photo) {
      try {
        const bestPhoto = telegramPhotoHelpers.getBestQualityPhoto(response.message.photo)
        
        const result = await cloudinaryIntegration.uploadPhotoToCloudinary(bestPhoto, {
          folder,
          tags: ['telegram_upload', 'manual_upload'],
        })
        
        uploadCount++
        results.push(result)
        
        const photoInfo = telegramPhotoHelpers.getPhotoInfo(bestPhoto)
        await ctx.reply(
          `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${uploadCount} –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n` +
          `üìê ${photoInfo}\n` +
          `üîó ${result.secure_url}`
        )
      } catch (error: any) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`)
      }
    } else {
      await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /done')
    }
  }
  
  await ctx.reply(
    `üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
    `üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${uploadCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫—É "${folder}"\n` +
    `‚ú® –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ CDN`,
    { reply_markup: mainMenu }
  )
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
async function bulkImageUpload(conversation: any, ctx: MyContext) {
  await ctx.reply(
    'üì§ *–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*\n\n' +
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞) –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É.\n' +
    '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /finish',
    { parse_mode: 'Markdown' }
  )
  
  const allPhotos = []
  let messageCount = 0
  
  while (true) {
    const response = await conversation.wait()
    
    if (response.message?.text === '/finish') break
    
    if (response.message?.photo) {
      const bestPhoto = telegramPhotoHelpers.getBestQualityPhoto(response.message.photo)
      allPhotos.push(bestPhoto)
      messageCount++
      
      await ctx.reply(`üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${messageCount}. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ /finish`)
    } else if (response.message?.media_group_id) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (–ø–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ)
      if (response.message?.photo) {
        const bestPhoto = telegramPhotoHelpers.getBestQualityPhoto(response.message.photo)
        allPhotos.push(bestPhoto)
      }
    } else {
      await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ /finish')
    }
  }
  
  if (allPhotos.length === 0) {
    await ctx.reply('‚ùå –ù–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    return
  }
  
  await ctx.reply(`üì§ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É ${allPhotos.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`)
  
  try {
    const results = await cloudinaryIntegration.uploadMultiplePhotos(allPhotos, {
      folder: 'telegram-uploads/bulk',
      tags: ['telegram_upload', 'bulk_upload'],
    })
    
    const successful = results.filter(r => !r.error).length
    const failed = results.filter(r => r.error).length
    
    await ctx.reply(
      `‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
      `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}\n` +
      `‚ùå –û—à–∏–±–æ–∫: ${failed}\n` +
      `üìÅ –ü–∞–ø–∫–∞: telegram-uploads/bulk`,
      { reply_markup: mainMenu }
    )
  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`)
  }
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function viewStats(conversation: any, ctx: MyContext) {
  await ctx.reply('üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*', { parse_mode: 'Markdown' })
  
  const statsMenu = new Menu<MyContext>('stats-menu')
    .text('üìà –ü—Ä–æ–¥–∞–∂–∏', async (ctx) => {
      const stats = await getSalesStats()
      await ctx.reply(formatSalesStats(stats), { parse_mode: 'Markdown' })
    })
    .text('üõçÔ∏è –¢–æ–≤–∞—Ä—ã', async (ctx) => {
      const stats = await getProductStats()
      await ctx.reply(formatProductStats(stats), { parse_mode: 'Markdown' })
    })
    .row()
    .text('üë• –ö–ª–∏–µ–Ω—Ç—ã', async (ctx) => {
      const stats = await getCustomerStats()
      await ctx.reply(formatCustomerStats(stats), { parse_mode: 'Markdown' })
    })
    .text('üí∞ –î–æ—Ö–æ–¥—ã', async (ctx) => {
      const stats = await getRevenueStats()
      await ctx.reply(formatRevenueStats(stats), { parse_mode: 'Markdown' })
    })
    .row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

  await ctx.editMessageReplyMarkup({ reply_markup: statsMenu })
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–π
bot.use(createConversation(manageOrders))
bot.use(createConversation(manageProducts))
bot.use(createConversation(addProduct))
bot.use(createConversation(manageImages))
bot.use(createConversation(uploadToFolder))
bot.use(createConversation(bulkImageUpload))
bot.use(createConversation(viewStats))

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx
  console.error(`Error while handling update ${ctx.update.update_id}:`)
  const e = err.error
  if (e instanceof GrammyError) {
    console.error('Error in request:', e.description)
  } else if (e instanceof HttpError) {
    console.error('Could not contact Telegram:', e)
  } else {
    console.error('Unknown error:', e)
  }
})

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è API)
async function showOrders(ctx: MyContext, status: string) {
  try {
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/orders?status=${status}`, {
      headers: { 'Authorization': `Bearer ${process.env.ADMIN_API_KEY}` }
    })
    const orders = await response.json()
    
    if (orders.length === 0) {
      await ctx.reply(`üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}"`)
      return
    }
    
    for (const order of orders.slice(0, 5)) {
      const orderText = formatOrderInfo(order)
      const orderMenu = createOrderMenu(order.id)
      await ctx.reply(orderText, { parse_mode: 'Markdown', reply_markup: orderMenu })
    }
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤')
  }
}

async function searchOrder(ctx: MyContext, query: string) {
  // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ email
  await ctx.reply(`üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞: "${query}"`)
}

async function showProductsList(ctx: MyContext, action: string) {
  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  await ctx.reply(`üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è: ${action}`)
}

async function showInventory(ctx: MyContext) {
  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
  await ctx.reply('üìä *–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤*', { parse_mode: 'Markdown' })
}

async function getCategories() {
  // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ API
  return [
    { id: '1', name: 'Cameras' },
    { id: '2', name: 'Fashion' },
    { id: '3', name: 'Accessories' }
  ]
}

async function createProduct(productData: any) {
  // –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ API
  const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/products`, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
    },
    body: JSON.stringify(productData)
  })
  return response.json()
}

async function uploadProductPhoto(productId: string, fileId: string, isMain: boolean = false) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –∏–∑ Telegram
    const file = await bot.api.getFile(fileId)
    
    if (!file.file_path) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É')
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const photo = {
      file_id: fileId,
      file_unique_id: file.file_unique_id || fileId,
      width: 1024, // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      height: 1024,
      file_size: file.file_size,
      file_path: file.file_path,
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary
    const result = await cloudinaryIntegration.uploadProductPhoto(photo, productId, {
      isMain,
      tags: ['telegram_upload', 'product_image'],
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await updateProductImages(productId, {
      cloudinary_public_id: result.public_id,
      cloudinary_url: result.secure_url,
      optimized_urls: result.optimized_urls,
      is_main: isMain,
    })

    console.log('‚úÖ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', {
      productId,
      publicId: result.public_id,
      url: result.secure_url,
      isMain,
    })

    return result
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:', error)
    throw error
  }
}

async function getSalesStats() {
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂
  return {}
}

async function getProductStats() {
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤
  return {}
}

async function getCustomerStats() {
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤
  return {}
}

async function getRevenueStats() {
  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤
  return {}
}

function formatOrderInfo(order: any): string {
  return `üì¶ *–ó–∞–∫–∞–∑ #${order.id}*\nüí∞ $${order.total}\nüë§ ${order.customerName}\nüìÖ ${order.createdAt}`
}

function formatSalesStats(stats: any): string {
  return 'üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂*\n\n–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
}

function formatProductStats(stats: any): string {
  return 'üõçÔ∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤*\n\n–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
}

function formatCustomerStats(stats: any): string {
  return 'üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤*\n\n–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
}

function formatRevenueStats(stats: any): string {
  return 'üí∞ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤*\n\n–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
}

function createOrderMenu(orderId: string) {
  return new Menu<MyContext>(`order-${orderId}`)
    .text('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', (ctx) => updateOrderStatus(ctx, orderId, 'confirmed'))
    .text('üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', (ctx) => updateOrderStatus(ctx, orderId, 'shipped'))
    .row()
    .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', (ctx) => updateOrderStatus(ctx, orderId, 'cancelled'))
    .text('üëÅÔ∏è –î–µ—Ç–∞–ª–∏', (ctx) => showOrderDetails(ctx, orderId))
}

async function updateOrderStatus(ctx: MyContext, orderId: string, status: string) {
  await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`)
}

async function showOrderDetails(ctx: MyContext, orderId: string) {
  await ctx.reply(`üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #${orderId}`)
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function updateProductImages(productId: string, imageData: {
  cloudinary_public_id: string
  cloudinary_url: string
  optimized_urls: any
  is_main: boolean
}) {
  try {
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/products/${productId}/images`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
      },
      body: JSON.stringify(imageData)
    })
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    return response.json()
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞:', error)
    throw error
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤)
bot.on('message:photo', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü
  if (!isOwner(ctx)) return

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±—ã—Å—Ç—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É
  const photos = ctx.message.photo
  const bestPhoto = telegramPhotoHelpers.getBestQualityPhoto(photos)
  
  try {
    await ctx.reply('üì∏ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Cloudinary...')
    
    const result = await cloudinaryIntegration.uploadPhotoToCloudinary(bestPhoto, {
      folder: 'telegram-uploads/quick',
      tags: ['telegram_upload', 'quick_upload'],
    })
    
    const photoInfo = telegramPhotoHelpers.getPhotoInfo(bestPhoto)
    await ctx.reply(
      `‚úÖ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!*\n\n` +
      `üìê –†–∞–∑–º–µ—Ä: ${photoInfo}\n` +
      `üîó URL: ${result.secure_url}\n` +
      `üÜî Public ID: \`${result.public_id}\`\n\n` +
      `üìã URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`,
      { parse_mode: 'Markdown' }
    )
  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`)
  }
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Cloudinary
bot.command('cloudinary', async (ctx) => {
  if (!isOwner(ctx)) return

  const status = await cloudinaryIntegration.checkCloudinaryStatus()
  const statusIcon = status.available ? '‚úÖ' : '‚ùå'
  
  await ctx.reply(
    `üå§Ô∏è *–°—Ç–∞—Ç—É—Å Cloudinary*\n\n` +
    `${statusIcon} ${status.message}\n\n` +
    `${status.available ? 'üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' : '‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}`,
    { parse_mode: 'Markdown' }
  )
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
bot.command('stats', async (ctx) => {
  if (!isOwner(ctx)) return

  await ctx.reply('üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
  
  try {
    const stats = await cloudinaryIntegration.getUploadStats()
    const message = cloudinaryIntegration.formatStatsForTelegram(stats)
    await ctx.reply(message, { parse_mode: 'Markdown' })
  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`)
  }
})

export { bot }