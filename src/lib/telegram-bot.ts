import { Bot, Context, session, GrammyError, HttpError } from 'grammy'
import { conversations, createConversation } from '@grammyjs/conversations'
import { Menu } from '@grammyjs/menu'
import { cloudinaryService } from './cloudinary'

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface SessionData {
  step?: string
  productData?: any
  orderFilter?: string
  refundOrderId?: string
  refundReason?: string
  maxRefundAmount?: number
  editingProductId?: string
}

type MyContext = Context & {
  session: SessionData
  conversation: any
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const ADMIN_IDS = process.env.TELEGRAM_OWNER_CHAT_ID?.split(',') || []

if (!BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN is required in environment variables')
}

if (ADMIN_IDS.length === 0) {
  throw new Error('TELEGRAM_OWNER_CHAT_ID is required in environment variables')
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å botInfo –¥–ª—è serverless —Å—Ä–µ–¥—ã
const botInfo = {
  id: parseInt(BOT_TOKEN.split(':')[0]),
  is_bot: true,
  first_name: 'VobvorotAdminBot',
  username: 'VobvorotAdminBot',
  can_join_groups: false,
  can_read_all_group_messages: false,
  supports_inline_queries: false,
  can_connect_to_business: false,
  has_main_web_app: false
}

const bot = new Bot<MyContext>(BOT_TOKEN, { 
  botInfo: botInfo 
})

// –°–µ—Å—Å–∏–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
bot.use(session({ initial: (): SessionData => ({}) }))
bot.use(conversations())

function isAdmin(ctx: MyContext): boolean {
  return ADMIN_IDS.includes(ctx.from?.id.toString() || '')
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = new Menu<MyContext>('main-menu')
  .text('üì¶ –ó–∞–∫–∞–∑—ã', (ctx) => ctx.conversation.enter('manageOrders'))
  .text('üõçÔ∏è –¢–æ–≤–∞—Ä—ã', (ctx) => ctx.conversation.enter('manageProducts'))
  .row()
  .text('üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', (ctx) => ctx.conversation.enter('manageCategories'))
  .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => ctx.conversation.enter('viewStats'))
  .row()
  .text('üé¨ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π', (ctx) => ctx.conversation.enter('manageHomeVideo'))
  .text('‚úçÔ∏è –í–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–∏', (ctx) => ctx.conversation.enter('manageSignVideos'))
  .row()
  .text('üí¨ –û—Ç–∑—ã–≤—ã', (ctx) => ctx.conversation.enter('manageReviews'))
  .text('üë• –ö–ª–∏–µ–Ω—Ç—ã', (ctx) => ctx.conversation.enter('manageCustomers'))

bot.use(mainMenu)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
bot.on('message:text', async (ctx) => {
  if (!isAdmin(ctx)) return

  const text = ctx.message.text
  
  if (ctx.session.step === 'waiting_refund_reason') {
    await processRefundReason(ctx, text)
  } else if (ctx.session.step === 'waiting_refund_amount') {
    await processRefundAmount(ctx, text)
  } else if (ctx.session.step === 'waiting_video_url') {
    await processVideoUrl(ctx, text)
  } else if (ctx.session.step?.startsWith('editing_')) {
    await processFieldEdit(ctx, text)
  }
})

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.command('start', async (ctx) => {
  if (!isAdmin(ctx)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }

  await ctx.reply(
    'üöÄ *VobVorot Store Management*\n\n' +
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º!\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:',
    { 
      parse_mode: 'Markdown',
      reply_markup: mainMenu
    }
  )
})

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
async function manageOrders(conversation: any, ctx: MyContext) {
  await ctx.reply('üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏*', { parse_mode: 'Markdown' })
  
  const ordersMenu = new Menu<MyContext>('orders-menu')
    .text('üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', async (ctx) => {
      await showOrders(ctx, 'pending')
    })
    .text('üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', async (ctx) => {
      await showOrders(ctx, 'processing')
    })
    .row()
    .text('üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ', async (ctx) => {
      await showOrders(ctx, 'shipped')
    })
    .text('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ', async (ctx) => {
      await showOrders(ctx, 'completed')
    })
    .row()
    .text('üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞', async (ctx) => {
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ email –∫–ª–∏–µ–Ω—Ç–∞:')
      const response = await conversation.wait()
      await searchOrder(ctx, response.message?.text || '')
    })
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

  await ctx.editMessageReplyMarkup({ reply_markup: ordersMenu })
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
async function manageProducts(conversation: any, ctx: MyContext) {
  await ctx.reply('üõçÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*', { parse_mode: 'Markdown' })
  
  const productsMenu = new Menu<MyContext>('products-menu')
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', async (ctx) => {
      await ctx.conversation.enter('addProduct')
    })
    .text('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', async (ctx) => {
      await showProductsList(ctx, 'edit')
    })
    .row()
    .text('üì∏ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–¥–∏–∞', async (ctx) => {
      await showProductsList(ctx, 'media')
    })
    .text('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã', async (ctx) => {
      await showProductsList(ctx, 'prices')
    })
    .row()
    .text('üìä –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤', async (ctx) => {
      await showInventory(ctx)
    })
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', async (ctx) => {
      await showProductsList(ctx, 'delete')
    })
    .row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

  await ctx.editMessageReplyMarkup({ reply_markup: productsMenu })
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
async function manageCategories(conversation: any, ctx: MyContext) {
  await ctx.reply('üè∑Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏*', { parse_mode: 'Markdown' })
  
  const categoriesMenu = new Menu<MyContext>('categories-menu')
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', async (ctx) => {
      await createCategoryConversation(conversation, ctx)
    })
    .text('üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', async (ctx) => {
      await showCategoriesList(ctx)
    })
    .row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: categoriesMenu })
}

async function createCategoryConversation(conversation: any, ctx: MyContext) {
  await ctx.reply('üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', { parse_mode: 'Markdown' })
  
  const nameResponse = await conversation.wait()
  const categoryName = nameResponse.message?.text
  
  if (!categoryName || categoryName.trim().length === 0) {
    await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    return
  }

  await ctx.reply('üòÑ *–í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π:', { 
    parse_mode: 'Markdown' 
  })

  // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏
  const emojiMenu = new Menu<MyContext>('emoji-menu')
    .text('üõçÔ∏è', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üõçÔ∏è'))
    .text('üëï', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üëï'))
    .text('üëü', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üëü'))
    .text('üëú', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üëú'))
    .row()
    .text('üíç', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üíç'))
    .text('üé©', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üé©'))
    .text('‚åö', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), '‚åö'))
    .text('üì±', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üì±'))
    .row()
    .text('üè†', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üè†'))
    .text('üéÆ', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üéÆ'))
    .text('üìö', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üìö'))
    .text('üé®', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üé®'))
    .row()
    .text('‚öΩ', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), '‚öΩ'))
    .text('üöó', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üöó'))
    .text('‚ú®', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), '‚ú®'))
    .text('üì¶', (ctx) => finalizeCategoryCreation(ctx, categoryName.trim(), 'üì¶'))

  await ctx.reply('–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–º–æ–¥–∑–∏:', { reply_markup: emojiMenu })

  // –û–∂–∏–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç–º–æ–¥–∑–∏
  const emojiResponse = await conversation.wait()
  const customEmoji = emojiResponse.message?.text
  
  if (customEmoji && customEmoji.length <= 10) {
    await finalizeCategoryCreation(ctx, categoryName.trim(), customEmoji)
  } else {
    await finalizeCategoryCreation(ctx, categoryName.trim(), 'üì¶') // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏
  }
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
async function addProduct(conversation: any, ctx: MyContext) {
  await ctx.reply('‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', { parse_mode: 'Markdown' })
  
  const productData: any = {}
  
  // –ù–∞–∑–≤–∞–Ω–∏–µ
  const nameResponse = await conversation.wait()
  productData.name = nameResponse.message?.text
  
  // –û–ø–∏—Å–∞–Ω–∏–µ
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
  const descResponse = await conversation.wait()
  productData.description = descResponse.message?.text
  
  // –ë—Ä–µ–Ω–¥
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-"):')
  const brandResponse = await conversation.wait()
  productData.brand = brandResponse.message?.text === '-' ? null : brandResponse.message?.text
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
  const categories = await getCategories()
  const categoryText = categories.map((cat: any, index: number) => `${index + 1}. ${cat.name}`).join('\n')
  await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n${categoryText}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:`)
  
  const catResponse = await conversation.wait()
  const catIndex = parseInt(catResponse.message?.text || '1') - 1
  productData.categoryId = categories[catIndex]?.id
  
  // –¶–µ–Ω–∞
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 29.99):')
  const priceResponse = await conversation.wait()
  productData.price = parseFloat(priceResponse.message?.text || '0')
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:')
  const stockResponse = await conversation.wait()
  productData.stock = parseInt(stockResponse.message?.text || '0')
  
  // –í–µ—Å —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)
  await ctx.reply('‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5 –∏–ª–∏ 1.2):\n\nüí° *–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º Meest*', { parse_mode: 'Markdown' })
  const weightResponse = await conversation.wait()
  productData.weight = parseFloat(weightResponse.message?.text || '0.5')
  
  // –†–∞–∑–º–µ—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-"):')
  const sizesResponse = await conversation.wait()
  productData.sizes = sizesResponse.message?.text === '-' ? [] : sizesResponse.message?.text?.split(',').map((s: string) => s.trim())
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  try {
    const newProduct = await createProduct(productData)
    await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüì¶ *${newProduct.name}*\nüí∞ $${newProduct.price}\nüì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${newProduct.stock}\n‚öñÔ∏è –í–µ—Å: ${newProduct.weight || 0.5} –∫–≥`, { parse_mode: 'Markdown' })
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Ñ–æ–Ω–∞
    await ctx.reply('üé¨ –•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Ñ–æ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip')
    
    const videoResponse = await conversation.wait()
    
    if (videoResponse.message?.video || videoResponse.message?.document) {
      try {
        const video = videoResponse.message.video || videoResponse.message.document
        await ctx.reply('üé¨ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ –≤ Cloudinary...')
        
        const file = await bot.api.getFile(video.file_id)
        if (!file.file_path) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É')
        
        const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`
        
        const uploadResult = await cloudinaryService.uploadFromUrl(fileUrl, {
          resource_type: 'video',
          folder: `products/${newProduct.slug}`,
          public_id: `${newProduct.slug}-hero-video`,
          overwrite: true,
          transformation: [
            { width: 1920, height: 1080, crop: 'fill' },
            { quality: 'auto:good' }
          ]
        })
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await updateProductVideo(newProduct.id, uploadResult.secure_url)
        
        await ctx.reply(
          `‚úÖ –í–∏–¥–µ–æ –¥–ª—è —Ñ–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n` +
          `üîó URL: ${uploadResult.secure_url}\n` +
          `üìê –†–∞–∑–º–µ—Ä: ${uploadResult.width}x${uploadResult.height}`
        )
      } catch (error: any) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${error.message}`)
      }
    }
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
    await ctx.reply('üì∏ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip')
    
    let photoCount = 0
    let isFirstPhoto = true
    
    while (true) {
      const response = await conversation.wait()
      
      if (response.message?.text === '/skip') break
      
      if (response.message?.photo) {
        try {
          const photo = response.message.photo[response.message.photo.length - 1]
          const file = await bot.api.getFile(photo.file_id)
          
          if (!file.file_path) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É')
          
          const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`
          
          const uploadResult = await cloudinaryService.uploadFromUrl(fileUrl, {
            folder: `products/${newProduct.slug}`,
            public_id: `${newProduct.slug}-${photoCount + 1}`,
            overwrite: true
          })
          
          await updateProductImages(newProduct.id, {
            cloudinary_public_id: uploadResult.public_id,
            cloudinary_url: uploadResult.secure_url,
            is_main: isFirstPhoto
          })
          
          photoCount++
          isFirstPhoto = false
          
          await ctx.reply(
            `‚úÖ –§–æ—Ç–æ ${photoCount} –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n` +
            `üìê –†–∞–∑–º–µ—Ä: ${uploadResult.width}x${uploadResult.height}\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ /skip –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`
          )
        } catch (error: any) {
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ${error.message}`)
        }
      } else {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip')
      }
    }
    
    await ctx.reply(
      `üéâ –¢–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n` +
      `üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${photoCount} —Ñ–æ—Ç–æ\n` +
      `${productData.videoUrl ? 'üé¨ –í–∏–¥–µ–æ –¥–ª—è —Ñ–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n' : ''}` +
      `‚ú® –í—Å–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`,
      { reply_markup: mainMenu }
    )
    
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${error}`)
  }
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
async function manageHomeVideo(conversation: any, ctx: MyContext) {
  await ctx.reply('üé¨ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã*', { parse_mode: 'Markdown' })
  
  const videoMenu = new Menu<MyContext>('video-menu')
    .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ', async (ctx) => {
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:')
      const response = await conversation.wait()
      
      if (response.message?.video || response.message?.document) {
        try {
          const video = response.message.video || response.message.document
          await ctx.reply('üé¨ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...')
          
          const file = await bot.api.getFile(video.file_id)
          if (!file.file_path) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É')
          
          const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`
          
          const uploadResult = await cloudinaryService.uploadFromUrl(fileUrl, {
            resource_type: 'video',
            folder: 'home',
            public_id: 'hero-video',
            overwrite: true,
            transformation: [
              { width: 1920, height: 1080, crop: 'fill' },
              { quality: 'auto:good' }
            ]
          })
          
          await updateHomeVideo(uploadResult.secure_url)
          
          await ctx.reply(
            `‚úÖ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n` +
            `üîó URL: ${uploadResult.secure_url}`
          )
        } catch (error: any) {
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
        }
      } else {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª')
      }
    })
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ', async (ctx) => {
      try {
        await cloudinaryService.deleteImage('home/hero-video')
        await updateHomeVideo(null)
        await ctx.reply('‚úÖ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–¥–∞–ª–µ–Ω–æ')
      } catch (error: any) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
      }
    })
    .row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

  await ctx.editMessageReplyMarkup({ reply_markup: videoMenu })
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–¥–ø–∏—Å–∏
async function manageSignVideos(conversation: any, ctx: MyContext) {
  await ctx.reply('‚úçÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "Your Name, My Pic"*', { parse_mode: 'Markdown' })
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∏–¥–µ–æ
  const currentVideos = await getSignVideos()
  
  if (currentVideos.length > 0) {
    await ctx.reply(
      `üìπ –¢–µ–∫—É—â–∏–µ –≤–∏–¥–µ–æ (${currentVideos.length}):\n\n` +
      currentVideos.map((video: any, index: number) => 
        `${index + 1}. ${video.title || `–í–∏–¥–µ–æ ${index + 1}`}\nüîó ${video.url}`
      ).join('\n\n'),
      { parse_mode: 'Markdown' }
    )
  } else {
    await ctx.reply('üì≠ –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–∏')
  }
  
  const signVideoMenu = new Menu<MyContext>('sign-video-menu')
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ', async (ctx) => {
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–∏:')
      const response = await conversation.wait()
      
      if (response.message?.video || response.message?.document) {
        try {
          const video = response.message.video || response.message.document
          await ctx.reply('üé¨ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...')
          
          const file = await bot.api.getFile(video.file_id)
          if (!file.file_path) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É')
          
          const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ Cloudinary
          const uploadResult = await cloudinaryService.uploadFromUrl(fileUrl, {
            resource_type: 'video',
            folder: 'sign-page',
            public_id: `sign-video-${Date.now()}`,
            transformation: [
              { width: 1920, height: 1080, crop: 'fill' },
              { quality: 'auto:good' }
            ]
          })
          
          // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ
          await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):')
          const titleResponse = await conversation.wait()
          const title = titleResponse.message?.text === '-' ? null : titleResponse.message?.text
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —Å–ø–∏—Å–æ–∫
          const videos = await getSignVideos()
          videos.push({
            url: uploadResult.secure_url,
            title: title || `–í–∏–¥–µ–æ ${videos.length + 1}`
          })
          
          await updateSignVideos(videos)
          
          await ctx.reply(
            `‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n` +
            `üìπ –ù–∞–∑–≤–∞–Ω–∏–µ: ${title || `–í–∏–¥–µ–æ ${videos.length}`}\n` +
            `üîó URL: ${uploadResult.secure_url}\n` +
            `üìê –†–∞–∑–º–µ—Ä: ${uploadResult.width}x${uploadResult.height}`
          )
        } catch (error: any) {
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
        }
      } else {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª')
      }
    })
    .text('üìã –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ', async (ctx) => {
      const videos = await getSignVideos()
      if (videos.length === 0) {
        await ctx.reply('üì≠ –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ')
      } else {
        await ctx.reply(
          `üìπ –í—Å–µ –≤–∏–¥–µ–æ (${videos.length}):\n\n` +
          videos.map((video: any, index: number) => 
            `${index + 1}. ${video.title}\nüîó ${video.url}`
          ).join('\n\n'),
          { parse_mode: 'Markdown' }
        )
      }
    })
    .row()
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ', async (ctx) => {
      const videos = await getSignVideos()
      if (videos.length === 0) {
        await ctx.reply('üì≠ –ù–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        return
      }
      
      await ctx.reply(
        `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n` +
        videos.map((video: any, index: number) => 
          `${index + 1}. ${video.title}`
        ).join('\n') +
        '\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ:'
      )
      
      const response = await conversation.wait()
      const index = parseInt(response.message?.text || '0') - 1
      
      if (index >= 0 && index < videos.length) {
        const removed = videos.splice(index, 1)[0]
        await updateSignVideos(videos)
        await ctx.reply(`‚úÖ –í–∏–¥–µ–æ "${removed.title}" —É–¥–∞–ª–µ–Ω–æ`)
      } else {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ')
      }
    })
    .text('üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫', async (ctx) => {
      const videos = await getSignVideos()
      if (videos.length < 2) {
        await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞')
        return
      }
      
      await ctx.reply(
        `–¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫:\n\n` +
        videos.map((video: any, index: number) => 
          `${index + 1}. ${video.title}`
        ).join('\n') +
        '\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3,1,2):'
      )
      
      const response = await conversation.wait()
      const newOrder = response.message?.text?.split(',').map((n: string) => parseInt(n.trim()) - 1)
      
      if (newOrder && newOrder.length === videos.length) {
        const reorderedVideos = newOrder.map((i: number) => videos[i]).filter(Boolean)
        if (reorderedVideos.length === videos.length) {
          await updateSignVideos(reorderedVideos)
          await ctx.reply('‚úÖ –ü–æ—Ä—è–¥–æ–∫ –≤–∏–¥–µ–æ –∏–∑–º–µ–Ω–µ–Ω')
        } else {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—è–¥–∫–∞')
        }
      } else {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—è–¥–∫–∞')
      }
    })
    .row()
    .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ', async (ctx) => {
      await ctx.reply('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–î–ê" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:')
      const response = await conversation.wait()
      
      if (response.message?.text?.toUpperCase() === '–î–ê') {
        await updateSignVideos([])
        await ctx.reply('‚úÖ –í—Å–µ –≤–∏–¥–µ–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã')
      } else {
        await ctx.reply('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
      }
    })
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

  await ctx.editMessageReplyMarkup({ reply_markup: signVideoMenu })
}

// –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function viewStats(conversation: any, ctx: MyContext) {
  await ctx.reply('üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*', { parse_mode: 'Markdown' })
  
  const statsMenu = new Menu<MyContext>('stats-menu')
    .text('üìà –ü—Ä–æ–¥–∞–∂–∏', async (ctx) => {
      const stats = await getSalesStats()
      await ctx.reply(formatSalesStats(stats), { parse_mode: 'Markdown' })
    })
    .text('üõçÔ∏è –¢–æ–≤–∞—Ä—ã', async (ctx) => {
      const stats = await getProductStats()
      await ctx.reply(formatProductStats(stats), { parse_mode: 'Markdown' })
    })
    .row()
    .text('üë• –ö–ª–∏–µ–Ω—Ç—ã', async (ctx) => {
      const stats = await getCustomerStats()
      await ctx.reply(formatCustomerStats(stats), { parse_mode: 'Markdown' })
    })
    .text('üí∞ –î–æ—Ö–æ–¥—ã', async (ctx) => {
      const stats = await getRevenueStats()
      await ctx.reply(formatRevenueStats(stats), { parse_mode: 'Markdown' })
    })
    .row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

  await ctx.editMessageReplyMarkup({ reply_markup: statsMenu })
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–π
async function manageReviews(conversation: any, ctx: MyContext) {
  await ctx.reply('üí¨ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏*\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', { 
    parse_mode: 'Markdown',
    reply_markup: mainMenu 
  })
}

async function manageCustomers(conversation: any, ctx: MyContext) {
  await ctx.reply('üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏*\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', { 
    parse_mode: 'Markdown',
    reply_markup: mainMenu 
  })
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–π
bot.use(createConversation(manageOrders))
bot.use(createConversation(manageProducts))
bot.use(createConversation(addProduct))
bot.use(createConversation(manageCategories))
bot.use(createConversation(manageHomeVideo))
bot.use(createConversation(manageSignVideos))
bot.use(createConversation(viewStats))
bot.use(createConversation(manageReviews))
bot.use(createConversation(manageCustomers))

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx
  console.error(`Error while handling update ${ctx.update.update_id}:`)
  const e = err.error
  if (e instanceof GrammyError) {
    console.error('Error in request:', e.description)
  } else if (e instanceof HttpError) {
    console.error('Could not contact Telegram:', e)
  } else {
    console.error('Unknown error:', e)
  }
})

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è API)
async function showOrders(ctx: MyContext, status: string) {
  try {
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/orders?status=${status}`, {
      headers: { 'Authorization': `Bearer ${process.env.ADMIN_API_KEY}` }
    })
    const orders = await response.json()
    
    if (orders.length === 0) {
      await ctx.reply(`üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}"`)
      return
    }
    
    for (const order of orders.slice(0, 5)) {
      const orderText = formatOrderInfo(order)
      const orderMenu = createOrderMenu(order.id)
      await ctx.reply(orderText, { parse_mode: 'Markdown', reply_markup: orderMenu })
    }
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤')
  }
}

async function searchOrder(ctx: MyContext, query: string) {
  await ctx.reply(`üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞: "${query}"`)
}

async function showProductsList(ctx: MyContext, action: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    await ctx.reply('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...')

    // Fetch products from API
    const response = await fetch(`${baseUrl}/api/admin/products`, {
      headers: {
        'Authorization': `Bearer ${adminApiKey}`
      }
    })

    if (!response.ok) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤')
      return
    }

    const result = await response.json()
    const products = result.products || []

    if (products.length === 0) {
      await ctx.reply('üì≠ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }

    // Create product list message
    let message = `üìã *–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è: ${action}*\n\n`
    
    const productMenu = new Menu<MyContext>(`products-${action}`)
    
    products.slice(0, 10).forEach((product: any, index: number) => {
      const status = product.isActive ? '‚úÖ' : 'üîí'
      const productText = `${status} ${product.name.substring(0, 25)}${product.name.length > 25 ? '...' : ''}`
      
      if (index % 2 === 0) {
        productMenu.text(productText, async (ctx) => {
          await handleProductAction(ctx, product.id, action)
        })
        if (products[index + 1]) {
          const nextProduct = products[index + 1]
          const nextStatus = nextProduct.isActive ? '‚úÖ' : 'üîí'
          const nextText = `${nextStatus} ${nextProduct.name.substring(0, 25)}${nextProduct.name.length > 25 ? '...' : ''}`
          productMenu.text(nextText, async (ctx) => {
            await handleProductAction(ctx, nextProduct.id, action)
          })
        }
        productMenu.row()
      }
    })

    if (products.length > 10) {
      productMenu.text(`üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ (${products.length - 10})`, async (ctx) => {
        // TODO: Implement pagination
        await ctx.reply('üîÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏')
      }).row()
    }

    productMenu.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', (ctx) => ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenu }))

    products.forEach((product: any, index: number) => {
      if (index < 10) {
        const status = product.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω'
        const price = product.skus?.[0]?.price ? `$${product.skus[0].price}` : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        message += `${index + 1}. *${product.name}*\n`
        message += `   üí∞ ${price} | üìä ${status}\n`
        message += `   üè∑Ô∏è ${product.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n\n`
      }
    })

    await ctx.reply(message, { 
      parse_mode: 'Markdown',
      reply_markup: productMenu
    })

  } catch (error) {
    console.error('Error showing products list:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤')
  }
}

async function handleProductAction(ctx: MyContext, productId: string, action: string) {
  try {
    if (action === 'edit') {
      await showProductEditMenu(ctx, productId)
    } else if (action === 'delete') {
      await handleProductDelete(ctx, productId)
    } else {
      await ctx.reply(`üîß –î–µ–π—Å—Ç–≤–∏–µ "${action}" –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`)
    }
  } catch (error) {
    console.error('Error handling product action:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è')
  }
}

async function showProductEditMenu(ctx: MyContext, productId: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    // Get product details
    const response = await fetch(`${baseUrl}/api/admin/products?productId=${productId}`, {
      headers: {
        'Authorization': `Bearer ${adminApiKey}`
      }
    })

    if (!response.ok) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞')
      return
    }

    const result = await response.json()
    const product = result.products?.find((p: any) => p.id === productId)
    
    if (!product) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    const editMenu = new Menu<MyContext>(`edit-product-${productId}`)
      .text('üìù –ù–∞–∑–≤–∞–Ω–∏–µ', async (ctx) => {
        await editProductField(ctx, productId, 'name', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
      })
      .text('üí∞ –¶–µ–Ω–∞', async (ctx) => {
        await editProductField(ctx, productId, 'price', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ ($):')
      })
      .row()
      .text('üìÑ –û–ø–∏—Å–∞–Ω–∏–µ', async (ctx) => {
        await editProductField(ctx, productId, 'description', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
      })
      .text('üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è', async (ctx) => {
        await showCategorySelection(ctx, productId)
      })
      .row()
      .text('üé¨ –í–∏–¥–µ–æ', async (ctx) => {
        await manageProductVideo(ctx, productId)
      })
      .text('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', async (ctx) => {
        await manageProductImages(ctx, productId)
      })
      .row()
      .text('üì¶ –û—Å—Ç–∞—Ç–∫–∏', async (ctx) => {
        await editProductField(ctx, productId, 'stock', '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:')
      })
      .text('üìä –°—Ç–∞—Ç—É—Å', async (ctx) => {
        await toggleProductStatus(ctx, productId)
      })
      .row()
      .text('üóÉÔ∏è –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å', async (ctx) => {
        await archiveProduct(ctx, productId)
      })
      .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', async (ctx) => {
        await confirmProductDelete(ctx, productId)
      })
      .row()
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', async (ctx) => {
        await showProductsList(ctx, 'edit')
      })

    const status = product.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω'
    const price = product.skus?.[0]?.price ? `$${product.skus[0].price}` : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
    const stock = product.skus?.[0]?.stock || 0
    
    let message = `üõçÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*\n\n`
    message += `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${product.name}\n`
    message += `üí∞ *–¶–µ–Ω–∞:* ${price}\n`
    message += `üìä *–°—Ç–∞—Ç—É—Å:* ${status}\n`
    message += `üì¶ *–û—Å—Ç–∞—Ç–∫–∏:* ${stock} —à—Ç.\n`
    message += `üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${product.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n`
    
    if (product.description) {
      message += `üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* ${product.description.substring(0, 100)}${product.description.length > 100 ? '...' : ''}\n`
    }
    
    message += `\nüîß –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`

    await ctx.reply(message, { 
      parse_mode: 'Markdown',
      reply_markup: editMenu
    })

  } catch (error) {
    console.error('Error showing product edit menu:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
  }
}

async function archiveProduct(ctx: MyContext, productId: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    await ctx.reply('‚è≥ –ê—Ä—Ö–∏–≤–∏—Ä—É—é —Ç–æ–≤–∞—Ä...')

    // Set product as inactive
    const response = await fetch(`${baseUrl}/api/admin/products`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify({ 
        productId: productId,
        status: 'inactive' 
      })
    })

    if (response.ok) {
      await ctx.reply('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\nüìù –¢–æ–≤–∞—Ä —Å–∫—Ä—ã—Ç —Å —Å–∞–π—Ç–∞ –∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–∞–º')
      await showProductEditMenu(ctx, productId)
    } else {
      const error = await response.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }

  } catch (error) {
    console.error('Error archiving product:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞')
  }
}

async function toggleProductStatus(ctx: MyContext, productId: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    // Get current product status
    const getResponse = await fetch(`${baseUrl}/api/admin/products?productId=${productId}`, {
      headers: {
        'Authorization': `Bearer ${adminApiKey}`
      }
    })

    if (!getResponse.ok) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞')
      return
    }

    const result = await getResponse.json()
    const product = result.products?.find((p: any) => p.id === productId)
    
    if (!product) {
      await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    const newStatus = product.status === 'active' ? 'inactive' : 'active'

    await ctx.reply('‚è≥ –ò–∑–º–µ–Ω—è—é —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞...')

    // Toggle product status
    const updateResponse = await fetch(`${baseUrl}/api/admin/products`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify({ 
        productId: productId,
        status: newStatus 
      })
    })

    if (updateResponse.ok) {
      const statusText = newStatus === 'active' ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Å–∫—Ä—ã—Ç —Å —Å–∞–π—Ç–∞'
      await ctx.reply(`‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ ${statusText}!`)
      await showProductEditMenu(ctx, productId)
    } else {
      const error = await updateResponse.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }

  } catch (error) {
    console.error('Error toggling product status:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞')
  }
}

async function manageProductVideo(ctx: MyContext, productId: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    // Get current product videos
    const response = await fetch(`${baseUrl}/api/admin/products/${productId}/videos`, {
      headers: {
        'Authorization': `Bearer ${adminApiKey}`
      }
    })

    if (!response.ok) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞')
      return
    }

    const result = await response.json()
    const videos = result.videos || []

    const videoMenu = new Menu<MyContext>(`video-${productId}`)
      .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ', async (ctx) => {
        await ctx.reply('üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:')
        ctx.session.step = 'waiting_video_url'
        ctx.session.editingProductId = productId
      })

    if (videos.length > 0) {
      videoMenu.row()
      videos.forEach((video: any, index: number) => {
        videoMenu.text(`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ ${index + 1}`, async (ctx) => {
          await deleteProductVideo(ctx, productId, video.id)
        })
        if ((index + 1) % 2 === 0) videoMenu.row()
      })
    }

    videoMenu.row().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', async (ctx) => {
      await showProductEditMenu(ctx, productId)
    })

    let message = `üé¨ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞*\n\n`
    
    if (videos.length > 0) {
      message += `üìπ *–¢–µ–∫—É—â–∏–µ –≤–∏–¥–µ–æ:*\n`
      videos.forEach((video: any, index: number) => {
        message += `${index + 1}. ${video.url}\n`
      })
      message += `\n`
    } else {
      message += `üì≠ –£ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ\n\n`
    }
    
    message += `üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

    await ctx.reply(message, { 
      parse_mode: 'Markdown',
      reply_markup: videoMenu
    })

  } catch (error) {
    console.error('Error managing product video:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞')
  }
}

async function deleteProductVideo(ctx: MyContext, productId: string, videoId: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    await ctx.reply('‚è≥ –£–¥–∞–ª—è—é –≤–∏–¥–µ–æ...')

    const response = await fetch(`${baseUrl}/api/admin/products/${productId}/videos`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify({ videoId })
    })

    if (response.ok) {
      await ctx.reply('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
      await manageProductVideo(ctx, productId)
    } else {
      const error = await response.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }

  } catch (error) {
    console.error('Error deleting product video:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ')
  }
}

async function manageProductImages(ctx: MyContext, productId: string) {
  // TODO: Implement image management
  await ctx.reply('üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏')
}

async function editProductField(ctx: MyContext, productId: string, field: string, promptText: string) {
  try {
    ctx.session.editingProductId = productId
    ctx.session.step = `editing_${field}`
    
    if (field === 'category') {
      await showCategorySelection(ctx, productId)
      return
    }
    
    // For other fields, prompt for text input
    await ctx.reply(`üìù ${promptText}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`)
    
  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
  }
}

async function showCategorySelection(ctx: MyContext, productId: string) {
  try {
    const categories = await getCategories()
    
    const categoryMenu = new Menu<MyContext>('category-selection')
    
    categories.forEach((category: any) => {
      categoryMenu.text(`${category.emoji} ${category.name}`, async (ctx) => {
        await updateProductField(ctx, productId, 'category', {
          name: category.name,
          slug: category.slug
        })
      })
      if (categories.indexOf(category) % 2 === 1) {
        categoryMenu.row()
      }
    })
    
    categoryMenu.row()
    categoryMenu.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
      await showProductEditMenu(ctx, productId)
    })
    
    await ctx.reply('üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', { reply_markup: categoryMenu })
    
  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
  }
}

async function confirmProductDelete(ctx: MyContext, productId: string) {
  // TODO: Implement delete confirmation
  await ctx.reply('üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏')
}

async function handleProductDelete(ctx: MyContext, productId: string) {
  // TODO: Implement product deletion
  await ctx.reply('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏')
}

async function showInventory(ctx: MyContext) {
  await ctx.reply('üìä *–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤*', { parse_mode: 'Markdown' })
}

async function getCategories() {
  try {
    const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      return []
    }

    const response = await fetch(`${baseUrl}/api/admin/categories-db`, {
      headers: {
        'Authorization': `Bearer ${adminApiKey}`
      }
    })

    if (response.ok) {
      const result = await response.json()
      return result.categories || []
    }
    
    return []
  } catch (error) {
    console.error('Error fetching categories:', error)
    return []
  }
}

async function createProduct(productData: any) {
  const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/products-db`, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
    },
    body: JSON.stringify(productData)
  })
  return response.json()
}

async function updateProductVideo(productId: string, videoUrl: string) {
  const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/products/${productId}/video`, {
    method: 'PUT',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
    },
    body: JSON.stringify({ videoUrl })
  })
  return response.json()
}

async function updateProductImages(productId: string, imageData: any) {
  const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/products/${productId}/images`, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
    },
    body: JSON.stringify(imageData)
  })
  return response.json()
}

async function updateHomeVideo(videoUrl: string | null) {
  const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/home-video`, {
    method: 'PUT',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
    },
    body: JSON.stringify({ videoUrl })
  })
  return response.json()
}

async function getSignVideos(): Promise<any[]> {
  try {
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/sign-videos`)
    const data = await response.json()
    return data.videos || []
  } catch (error) {
    console.error('Error fetching sign videos:', error)
    return []
  }
}

async function updateSignVideos(videos: any[]) {
  const response = await fetch(`${process.env.NEXTAUTH_URL}/api/admin/site/sign-videos`, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.ADMIN_API_KEY}`
    },
    body: JSON.stringify({ videos })
  })
  return response.json()
}

async function getSalesStats() {
  return {}
}

async function getProductStats() {
  return {}
}

async function getCustomerStats() {
  return {}
}

async function getRevenueStats() {
  return {}
}

function formatOrderInfo(order: any): string {
  return `üì¶ *–ó–∞–∫–∞–∑ #${order.id}*\nüí∞ $${order.total}\nüë§ ${order.customerName}\nüìÖ ${order.createdAt}`
}

function formatSalesStats(stats: any): string {
  return 'üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂*\n\n–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
}

function formatProductStats(stats: any): string {
  return 'üõçÔ∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤*\n\n–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
}

function formatCustomerStats(stats: any): string {
  return 'üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤*\n\n–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
}

function formatRevenueStats(stats: any): string {
  return 'üí∞ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤*\n\n–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'
}

function createOrderMenu(orderId: string) {
  return new Menu<MyContext>(`order-${orderId}`)
    .text('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', (ctx) => updateOrderStatus(ctx, orderId, 'confirmed'))
    .text('üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', (ctx) => updateOrderStatus(ctx, orderId, 'shipped'))
    .row()
    .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', (ctx) => updateOrderStatus(ctx, orderId, 'cancelled'))
    .text('üí∏ –í–æ–∑–≤—Ä–∞—Ç', (ctx) => handleRefundOrder(ctx, orderId))
    .row()
    .text('üëÅÔ∏è –î–µ—Ç–∞–ª–∏', (ctx) => showOrderDetails(ctx, orderId))
}

async function updateOrderStatus(ctx: MyContext, orderId: string, status: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API
    const response = await fetch(`${baseUrl}/api/orders/${orderId}/status`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify({ status })
    })

    if (response.ok) {
      const result = await response.json()
      const statusText = getStatusText(status)
      await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${statusText}"`)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
      if (result.order?.customer?.telegramChatId) {
        try {
          await ctx.api.sendMessage(
            result.order.customer.telegramChatId,
            `üì¶ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${statusText}"`
          )
        } catch (error) {
          console.log('Could not notify customer:', error)
        }
      }
    } else {
      const error = await response.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  } catch (error) {
    console.error('Error updating order status:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞')
  }
}

function getStatusText(status: string): string {
  const statusMap: { [key: string]: string } = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
    'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', 
    'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
    'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
  }
  return statusMap[status] || status
}

async function showOrderDetails(ctx: MyContext, orderId: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API
    const response = await fetch(`${baseUrl}/api/admin/orders?orderId=${orderId}`, {
      headers: {
        'Authorization': `Bearer ${adminApiKey}`
      }
    })

    if (response.ok) {
      const result = await response.json()
      const order = result.orders?.find((o: any) => o.id === orderId)
      
      if (order) {
        const statusText = getStatusText(order.status)
        const paymentStatusText = getPaymentStatusText(order.paymentStatus)
        
        let message = `üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #${orderId}*\n\n`
        message += `üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n`
        message += `üí≥ –ü–ª–∞—Ç–µ–∂: ${paymentStatusText}\n`
        message += `üí∞ –°—É–º–º–∞: $${order.total}\n`
        message += `üìÖ –î–∞—Ç–∞: ${new Date(order.createdAt).toLocaleDateString('ru-RU')}\n\n`
        
        if (order.customer) {
          message += `üë§ *–ö–ª–∏–µ–Ω—Ç:*\n`
          message += `${order.customer.name || 'N/A'}\n`
          message += `üìß ${order.customer.email || 'N/A'}\n`
          if (order.customer.phone) message += `üìû ${order.customer.phone}\n`
          message += `\n`
        }
        
        if (order.shippingAddress) {
          message += `üè† *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n`
          message += `${order.shippingAddress.street}\n`
          message += `${order.shippingAddress.city}, ${order.shippingAddress.state} ${order.shippingAddress.postalCode}\n`
          message += `${order.shippingAddress.country}\n\n`
        }
        
        if (order.items && order.items.length > 0) {
          message += `üõçÔ∏è *–¢–æ–≤–∞—Ä—ã:*\n`
          order.items.forEach((item: any, index: number) => {
            message += `${index + 1}. ${item.productName}\n`
            message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`
            message += `   –¶–µ–Ω–∞: $${item.price}\n\n`
          })
        }
        
        if (order.trackingNumber) {
          message += `üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: \`${order.trackingNumber}\`\n`
        }
        
        await ctx.reply(message, { parse_mode: 'Markdown' })
      } else {
        await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞')
    }
  } catch (error) {
    console.error('Error showing order details:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞')
  }
}

function getPaymentStatusText(status: string): string {
  const statusMap: { [key: string]: string } = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
    'completed': '–û–ø–ª–∞—á–µ–Ω',
    'failed': '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
    'refunded': '–í–æ–∑–≤—Ä–∞—â–µ–Ω'
  }
  return statusMap[status] || status
}

async function handleRefundOrder(ctx: MyContext, orderId: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    // Get refund information for the order first
    const infoResponse = await fetch(`${baseUrl}/api/orders/${orderId}/refund`, {
      headers: {
        'Authorization': `Bearer ${adminApiKey}`
      }
    })

    if (!infoResponse.ok) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ')
      return
    }

    const refundInfo = await infoResponse.json()

    if (!refundInfo.canRefund) {
      let reason = '–ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω'
      if (refundInfo.currentStatus === 'REFUNDED') {
        reason = '–ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—â–µ–Ω'
      } else if (refundInfo.paymentStatus !== 'COMPLETED') {
        reason = '–ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω'
      }
      await ctx.reply(`‚ùå ${reason}`)
      return
    }

    // Show refund confirmation with details
    let message = `üí∏ *–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}*\n\n`
    message += `üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: $${refundInfo.totalAmount}\n`
    
    if (refundInfo.hasPartialRefund) {
      message += `üîÑ –£–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: $${refundInfo.refundedAmount}\n`
      message += `üí∏ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: $${refundInfo.maxRefundAmount}\n\n`
    } else {
      message += `üí∏ –ö –≤–æ–∑–≤—Ä–∞—Ç—É: $${refundInfo.maxRefundAmount}\n\n`
    }
    
    message += `‚ùì –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø–æ–ª–Ω—ã–π" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞:`

    await ctx.reply(message, { parse_mode: 'Markdown' })

    // Set conversation state to wait for refund reason
    ctx.session.step = 'waiting_refund_reason'
    ctx.session.refundOrderId = orderId
    ctx.session.maxRefundAmount = refundInfo.maxRefundAmount

  } catch (error) {
    console.error('Error handling refund order:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞')
  }
}

// Handle refund reason input (add this to message handler)
async function processRefundReason(ctx: MyContext, reason: string) {
  try {
    const orderId = ctx.session.refundOrderId
    const maxAmount = ctx.session.maxRefundAmount
    
    if (!orderId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞')
      return
    }

    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    // Get admin ID from Telegram user (you might want to store this mapping)
    const adminId = ctx.from?.id?.toString() || 'telegram_admin'

    // Process full refund or ask for custom amount
    if (reason.toLowerCase().includes('–ø–æ–ª–Ω—ã–π')) {
      await processFullRefund(ctx, orderId, '–ü–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', adminId, maxAmount || 0)
    } else {
      // Ask for custom amount
      await ctx.reply(
        `üí∏ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞ (–º–∞–∫—Å–∏–º—É–º $${maxAmount}) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–º–∞–∫—Å–∏–º—É–º" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞:`
      )
      ctx.session.step = 'waiting_refund_amount'
      ctx.session.refundReason = reason
    }

  } catch (error) {
    console.error('Error processing refund reason:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞')
  }
}

async function processRefundAmount(ctx: MyContext, amountText: string) {
  try {
    const orderId = ctx.session.refundOrderId
    const reason = ctx.session.refundReason
    const maxAmount = ctx.session.maxRefundAmount
    
    if (!orderId || !reason) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞')
      return
    }

    const adminId = ctx.from?.id?.toString() || 'telegram_admin'

    if (amountText.toLowerCase().includes('–º–∞–∫—Å–∏–º—É–º')) {
      await processFullRefund(ctx, orderId, reason, adminId, maxAmount || 0)
      return
    }

    // Parse amount
    const amount = parseFloat(amountText.replace(/[^0-9.]/g, ''))
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0')
      return
    }

    if (amount > (maxAmount || 0)) {
      await ctx.reply(`‚ùå –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ ($${maxAmount || 0})`)
      return
    }

    await processRefund(ctx, orderId, reason, adminId, amount)

  } catch (error) {
    console.error('Error processing refund amount:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –≤–æ–∑–≤—Ä–∞—Ç–∞')
  }
}

async function processFullRefund(ctx: MyContext, orderId: string, reason: string, adminId: string, amount: number) {
  await processRefund(ctx, orderId, reason, adminId, amount)
}

async function processRefund(ctx: MyContext, orderId: string, reason: string, adminId: string, amount: number) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY

    await ctx.reply('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–æ–∑–≤—Ä–∞—Ç...')

    const response = await fetch(`${baseUrl}/api/orders/${orderId}/refund`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify({
        reason,
        amount,
        adminId,
        notifyCustomer: true
      })
    })

    if (response.ok) {
      const result = await response.json()
      await ctx.reply(
        `‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
        `üí∏ –°—É–º–º–∞: $${result.refundAmount}\n` +
        `üÜî ID –≤–æ–∑–≤—Ä–∞—Ç–∞: ${result.refundId}\n` +
        `üìã ${result.message}\n\n` +
        `üìß –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –ø–æ email`
      )
    } else {
      const error = await response.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }

    // Clear session
    ctx.session.step = undefined
    ctx.session.refundOrderId = undefined
    ctx.session.refundReason = undefined
    ctx.session.maxRefundAmount = undefined

  } catch (error) {
    console.error('Error processing refund:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞')
  }
}

async function processVideoUrl(ctx: MyContext, videoUrl: string) {
  try {
    const productId = ctx.session.editingProductId
    
    if (!productId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ')
      return
    }

    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    // Validate URL
    if (!videoUrl.startsWith('http')) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://')
      return
    }

    await ctx.reply('‚è≥ –î–æ–±–∞–≤–ª—è—é –≤–∏–¥–µ–æ –∫ —Ç–æ–≤–∞—Ä—É...')

    const response = await fetch(`${baseUrl}/api/admin/products/${productId}/videos`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify({ videoUrl })
    })

    if (response.ok) {
      const result = await response.json()
      await ctx.reply('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–æ–≤–∞—Ä—É!')
      
      // Clear session and go back to video management
      ctx.session.step = undefined
      ctx.session.editingProductId = undefined
      
      await manageProductVideo(ctx, productId)
    } else {
      const error = await response.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }

  } catch (error) {
    console.error('Error processing video URL:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ')
  }
}

async function finalizeCategoryCreation(ctx: MyContext, name: string, emoji: string) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }

    await ctx.reply('‚è≥ –°–æ–∑–¥–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é...')

    const response = await fetch(`${baseUrl}/api/admin/categories`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify({ name, emoji })
    })

    if (response.ok) {
      const result = await response.json()
      await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" ${emoji} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`)
      await showCategoriesList(ctx)
    } else {
      const error = await response.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }

  } catch (error) {
    console.error('Error creating category:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
  }
}

async function showCategoriesList(ctx: MyContext) {
  try {
    const categories = await getCategories()
    
    if (categories.length === 0) {
      await ctx.reply('üì≠ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }

    let message = 'üè∑Ô∏è *–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\n\n'
    categories.forEach((category: any, index: number) => {
      const emoji = category.emoji || 'üì¶'
      message += `${index + 1}. ${emoji} *${category.name}*\n   Slug: \`${category.slug}\`\n\n`
    })

    await ctx.reply(message, { parse_mode: 'Markdown' })

  } catch (error) {
    console.error('Error showing categories list:', error)
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
  }
}

async function processFieldEdit(ctx: MyContext, newValue: string) {
  try {
    const productId = ctx.session.editingProductId
    const step = ctx.session.step
    
    if (!productId || !step) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }
    
    const field = step.replace('editing_', '')
    let value: any = newValue.trim()
    
    // Convert values based on field type
    if (field === 'price') {
      value = parseFloat(value)
      if (isNaN(value) || value <= 0) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:')
        return
      }
    } else if (field === 'stock') {
      value = parseInt(value)
      if (isNaN(value) || value < 0) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 0:')
        return
      }
    } else if (field === 'weight') {
      value = parseFloat(value)
      if (isNaN(value) || value <= 0) {
        await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:')
        return
      }
    }
    
    await updateProductField(ctx, productId, field, value)
    
  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
  }
}

async function updateProductField(ctx: MyContext, productId: string, field: string, value: any) {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const adminApiKey = process.env.ADMIN_API_KEY
    
    if (!adminApiKey) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return
    }
    
    await ctx.reply('‚è≥ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞...')
    
    const updateData: any = { productId }
    updateData[field] = value
    
    const response = await fetch(`${baseUrl}/api/admin/products`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify(updateData)
    })
    
    if (response.ok) {
      const result = await response.json()
      await ctx.reply(`‚úÖ –ü–æ–ª–µ "${field}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`)
      
      // Clear session state
      ctx.session.step = undefined
      ctx.session.editingProductId = undefined
      
      // Return to edit menu
      await showProductEditMenu(ctx, productId)
    } else {
      const error = await response.json()
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
    
  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
  }
}

export { bot }