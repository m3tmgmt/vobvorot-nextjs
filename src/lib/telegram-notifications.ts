// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
import { Bot } from 'grammy'

interface OrderNotification {
  orderId: string
  customerName: string
  customerEmail: string
  total: number
  items: Array<{
    name: string
    quantity: number
    price: number
  }>
  shippingAddress: any
  paymentStatus: string
}

interface LowStockNotification {
  productId: string
  productName: string
  currentStock: number
  threshold: number
  lastSold: string
}

interface ReviewNotification {
  productId: string
  productName: string
  customerName: string
  rating: number
  review: string
  createdAt: string
}

class TelegramNotificationService {
  private bot: Bot
  private ownerChatId: string

  constructor() {
    const botToken = process.env.TELEGRAM_BOT_TOKEN
    const ownerChatId = process.env.OWNER_TELEGRAM_ID
    
    if (!botToken) {
      throw new Error('TELEGRAM_BOT_TOKEN is required in environment variables')
    }
    
    if (!ownerChatId) {
      throw new Error('OWNER_TELEGRAM_ID is required in environment variables')
    }
    
    this.bot = new Bot(botToken)
    this.ownerChatId = ownerChatId
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  async notifyNewOrder(order: OrderNotification) {
    try {
      const itemsList = order.items
        .map(item => `‚Ä¢ ${item.name} x${item.quantity} - $${Number(item.price)}`)
        .join('\n')

      const message = `
üÜï *–ù–û–í–´–ô –ó–ê–ö–ê–ó* #${order.orderId}

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${order.customerName}
üìß *Email:* ${order.customerEmail}
üí∞ *–°—É–º–º–∞:* $${Number(order.total)}
üí≥ *–û–ø–ª–∞—Ç–∞:* ${order.paymentStatus}

üì¶ *–¢–æ–≤–∞—Ä—ã:*
${itemsList}

üè† *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*
${order.shippingAddress.street}
${order.shippingAddress.city}, ${order.shippingAddress.country}
${order.shippingAddress.postalCode}

‚è∞ ${new Date().toLocaleString('ru-RU')}
      `.trim()

      // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_order_${order.orderId}` },
            { text: 'üì¶ –í –æ–±—Ä–∞–±–æ—Ç–∫—É', callback_data: `process_order_${order.orderId}` }
          ],
          [
            { text: 'üëÅÔ∏è –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞', callback_data: `view_order_${order.orderId}` },
            { text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', callback_data: `message_customer_${order.orderId}` }
          ]
        ]
      }

      await this.bot.api.sendMessage(
        this.ownerChatId,
        message,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      )

      // –ó–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
      await this.bot.api.sendMessage(
        this.ownerChatId,
        'üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!',
        { 
          reply_markup: { remove_keyboard: true },
          disable_notification: false
        }
      )

    } catch (error) {
      console.error('Failed to send new order notification:', error)
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ
  async notifyLowStock(products: LowStockNotification[]) {
    try {
      if (products.length === 0) return

      const productsList = products
        .map(product => 
          `‚Ä¢ *${product.productName}*\n  üì¶ –û—Å—Ç–∞—Ç–æ–∫: ${product.currentStock} —à—Ç. (–º–∏–Ω: ${product.threshold})\n  üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞: ${product.lastSold}`
        )
        .join('\n\n')

      const message = `
‚ö†Ô∏è *–ù–ò–ó–ö–ò–ô –û–°–¢–ê–¢–û–ö –¢–û–í–ê–†–û–í*

${productsList}

üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥
‚è∞ ${new Date().toLocaleString('ru-RU')}
      `.trim()

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞', callback_data: 'inventory_stats' },
            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã', callback_data: 'add_inventory' }
          ],
          [
            { text: 'üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—É–ø–∫—É', callback_data: 'plan_restock' }
          ]
        ]
      }

      await this.bot.api.sendMessage(
        this.ownerChatId,
        message,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      )

    } catch (error) {
      console.error('Failed to send low stock notification:', error)
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
  async notifyNewReview(review: ReviewNotification) {
    try {
      const stars = '‚≠ê'.repeat(review.rating) + '‚òÜ'.repeat(5 - review.rating)
      
      const message = `
üí¨ *–ù–û–í–´–ô –û–¢–ó–´–í*

üõçÔ∏è *–¢–æ–≤–∞—Ä:* ${review.productName}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${review.customerName}
${stars} *–û—Ü–µ–Ω–∫–∞:* ${review.rating}/5

*–û—Ç–∑—ã–≤:*
"${review.review}"

‚è∞ ${new Date(review.createdAt).toLocaleString('ru-RU')}
      `.trim()

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä', callback_data: `view_product_${review.productId}` },
            { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_review_${review.productId}` }
          ]
        ]
      }

      await this.bot.api.sendMessage(
        this.ownerChatId,
        message,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      )

    } catch (error) {
      console.error('Failed to send review notification:', error)
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  async notifyOrderStatusChange(orderId: string, oldStatus: string, newStatus: string, customerName: string) {
    try {
      const statusEmojis: { [key: string]: string } = {
        'pending': 'üïê',
        'confirmed': '‚úÖ',
        'processing': 'üîÑ',
        'shipped': 'üì¶',
        'completed': 'üéâ',
        'cancelled': '‚ùå'
      }

      const message = `
üìã *–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê*

üÜî *–ó–∞–∫–∞–∑:* #${orderId}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${customerName}
${statusEmojis[oldStatus]} *–ë—ã–ª–æ:* ${oldStatus}
${statusEmojis[newStatus]} *–°—Ç–∞–ª–æ:* ${newStatus}

‚è∞ ${new Date().toLocaleString('ru-RU')}
      `.trim()

      await this.bot.api.sendMessage(
        this.ownerChatId,
        message,
        { parse_mode: 'Markdown' }
      )

    } catch (error) {
      console.error('Failed to send status change notification:', error)
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ/–æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
  async notifyOrderRefund(orderId: string, customerName: string, amount: number, reason: string) {
    try {
      const message = `
üí∏ *–í–û–ó–í–†–ê–¢/–û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê*

üÜî *–ó–∞–∫–∞–∑:* #${orderId}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${customerName}
üí∞ *–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:* $${Number(amount)}
üìù *–ü—Ä–∏—á–∏–Ω–∞:* ${reason}

‚è∞ ${new Date().toLocaleString('ru-RU')}
      `.trim()

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üëÅÔ∏è –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞', callback_data: `view_order_${orderId}` },
            { text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º', callback_data: `contact_customer_${orderId}` }
          ]
        ]
      }

      await this.bot.api.sendMessage(
        this.ownerChatId,
        message,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      )

    } catch (error) {
      console.error('Failed to send refund notification:', error)
    }
  }

  // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞
  async sendDailySummary(stats: any) {
    try {
      const message = `
üìä *–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê*
${new Date().toLocaleDateString('ru-RU')}

üí∞ *–ü—Ä–æ–¥–∞–∂–∏:*
‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${stats.ordersToday}
‚Ä¢ –í—ã—Ä—É—á–∫–∞: $${stats.revenueToday}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: $${stats.averageOrderValue}

üì¶ *–¢–æ–≤–∞—Ä—ã:*
‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ –µ–¥–∏–Ω–∏—Ü: ${stats.itemsSold}
‚Ä¢ –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã: ${stats.newProducts}
‚Ä¢ –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${stats.lowStockItems}

üë• *–ö–ª–∏–µ–Ω—Ç—ã:*
‚Ä¢ –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: ${stats.newCustomers}
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã: ${stats.returningCustomers}

üìà *–ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –≤—á–µ—Ä–∞:*
‚Ä¢ –ó–∞–∫–∞–∑—ã: ${stats.ordersChange > 0 ? '+' : ''}${stats.ordersChange}%
‚Ä¢ –í—ã—Ä—É—á–∫–∞: ${stats.revenueChange > 0 ? '+' : ''}${stats.revenueChange}%

‚è∞ –î–∞–Ω–Ω—ã–µ –Ω–∞ ${new Date().toLocaleTimeString('ru-RU')}
      `.trim()

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'detailed_stats' },
            { text: 'üì¶ –ó–∞–∫–∞–∑—ã –∑–∞ –¥–µ–Ω—å', callback_data: 'today_orders' }
          ]
        ]
      }

      await this.bot.api.sendMessage(
        this.ownerChatId,
        message,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      )

    } catch (error) {
      console.error('Failed to send daily summary:', error)
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã
  async notifySystemError(error: string, context: string) {
    try {
      const message = `
üö® *–°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê*

üìç *–ö–æ–Ω—Ç–µ–∫—Å—Ç:* ${context}
‚ùå *–û—à–∏–±–∫–∞:* ${error}

‚è∞ ${new Date().toLocaleString('ru-RU')}

‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      `.trim()

      await this.bot.api.sendMessage(
        this.ownerChatId,
        message,
        { parse_mode: 'Markdown' }
      )

    } catch (error) {
      console.error('Failed to send system error notification:', error)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
  async checkBotHealth(): Promise<boolean> {
    try {
      const me = await this.bot.api.getMe()
      return me.username === process.env.TELEGRAM_BOT_USERNAME
    } catch (error) {
      console.error('Bot health check failed:', error)
      return false
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const telegramNotifications = new TelegramNotificationService()

// –•–µ–ª–ø–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
export async function notifyNewOrder(orderData: OrderNotification) {
  await telegramNotifications.notifyNewOrder(orderData)
}

export async function notifyLowStock(products: LowStockNotification[]) {
  await telegramNotifications.notifyLowStock(products)
}

export async function notifyNewReview(reviewData: ReviewNotification) {
  await telegramNotifications.notifyNewReview(reviewData)
}

export async function notifyOrderStatusChange(orderId: string, oldStatus: string, newStatus: string, customerName: string) {
  await telegramNotifications.notifyOrderStatusChange(orderId, oldStatus, newStatus, customerName)
}

export async function sendDailySummary(stats: any) {
  await telegramNotifications.sendDailySummary(stats)
}

export async function notifySystemError(error: string, context: string) {
  await telegramNotifications.notifySystemError(error, context)
}

export async function sendTelegramNotification(message: string, data?: any) {
  await telegramNotifications.notifySystemError(message, data?.context || 'General notification')
}