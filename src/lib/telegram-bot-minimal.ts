import { Bot, Context, GrammyError, HttpError } from 'grammy'

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const ADMIN_IDS = process.env.TELEGRAM_OWNER_CHAT_ID?.split(',') || []

console.log('ü§ñ [BOT-MINIMAL] Initializing minimal bot...')
console.log('üîë [BOT-MINIMAL] Token exists:', !!BOT_TOKEN)
console.log('üë§ [BOT-MINIMAL] Admin IDs:', ADMIN_IDS)

if (!BOT_TOKEN) {
  console.error('‚ùå [BOT-MINIMAL] TELEGRAM_BOT_TOKEN is required')
  throw new Error('TELEGRAM_BOT_TOKEN is required in environment variables')
}

if (ADMIN_IDS.length === 0) {
  console.error('‚ùå [BOT-MINIMAL] TELEGRAM_OWNER_CHAT_ID is required')
  throw new Error('TELEGRAM_OWNER_CHAT_ID is required in environment variables')
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
console.log('üöÄ [BOT-MINIMAL] Creating bot instance...')
const bot = new Bot<Context>(BOT_TOKEN)

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use((ctx, next) => {
  console.log('üì® [BOT-MINIMAL] Update received:', {
    type: ctx.updateType,
    from: ctx.from?.id,
    text: ctx.message?.text
  })
  return next()
})

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
function isAdmin(ctx: Context): boolean {
  const isAdminUser = ADMIN_IDS.includes(ctx.from?.id.toString() || '')
  console.log('üîê [BOT-MINIMAL] Admin check:', {
    userId: ctx.from?.id,
    isAdmin: isAdminUser
  })
  return isAdminUser
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  console.log('üéØ [BOT-MINIMAL] /start command received')
  
  if (!isAdmin(ctx)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }

  await ctx.reply(
    'üöÄ *VobVorot Bot - Minimal Version*\n\n' +
    '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n' +
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/start - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
    '/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n' +
    '/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ',
    { parse_mode: 'Markdown' }
  )
})

// –ö–æ–º–∞–Ω–¥–∞ /ping
bot.command('ping', async (ctx) => {
  console.log('üèì [BOT-MINIMAL] /ping command received')
  
  if (!isAdmin(ctx)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }

  await ctx.reply('üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.')
})

// –ö–æ–º–∞–Ω–¥–∞ /info
bot.command('info', async (ctx) => {
  console.log('‚ÑπÔ∏è [BOT-MINIMAL] /info command received')
  
  if (!isAdmin(ctx)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }

  const info = {
    botVersion: 'minimal',
    nodeVersion: process.version,
    admins: ADMIN_IDS.length,
    environment: process.env.NODE_ENV || 'unknown'
  }

  await ctx.reply(
    'üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:*\n\n' +
    `–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: ${info.botVersion}\n` +
    `Node.js: ${info.nodeVersion}\n` +
    `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${info.admins}\n` +
    `–û–∫—Ä—É–∂–µ–Ω–∏–µ: ${info.environment}`,
    { parse_mode: 'Markdown' }
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx
  console.error('‚ùå [BOT-MINIMAL] Error while handling update', ctx.update.update_id, ':')
  const e = err.error
  
  if (e instanceof GrammyError) {
    console.error('‚ùå [BOT-MINIMAL] Error in request:', e.description)
  } else if (e instanceof HttpError) {
    console.error('‚ùå [BOT-MINIMAL] Could not contact Telegram:', e)
  } else {
    console.error('‚ùå [BOT-MINIMAL] Unknown error:', e)
  }
})

console.log('‚úÖ [BOT-MINIMAL] Bot initialized successfully')

export { bot }