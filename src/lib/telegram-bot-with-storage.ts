import { Bot, Context, session, GrammyError, HttpError } from 'grammy'
import { conversations, createConversation } from '@grammyjs/conversations'
import { Menu } from '@grammyjs/menu'
import { PsqlAdapter } from '@grammyjs/storage-psql'
import { cloudinaryService } from './cloudinary'

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface SessionData {
  step?: string
  productData?: any
  orderFilter?: string
  refundOrderId?: string
  refundReason?: string
  maxRefundAmount?: number
  editingProductId?: string
}

type MyContext = Context & {
  session: SessionData
  conversation: any
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const ADMIN_IDS = process.env.TELEGRAM_OWNER_CHAT_ID?.split(',') || []
const DATABASE_URL = process.env.DIRECT_DATABASE_URL || process.env.DATABASE_URL

console.log('ü§ñ [BOT-STORAGE] Initializing bot with PostgreSQL storage...')
console.log('üóÑÔ∏è [BOT-STORAGE] Database URL exists:', !!DATABASE_URL)
console.log('üîë [BOT-STORAGE] Token exists:', !!BOT_TOKEN)
console.log('üë§ [BOT-STORAGE] Admin IDs:', ADMIN_IDS)

if (!BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN is required in environment variables')
}

if (!ADMIN_IDS.length) {
  throw new Error('TELEGRAM_OWNER_CHAT_ID is required in environment variables')
}

if (!DATABASE_URL) {
  throw new Error('DATABASE_URL is required for session storage')
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot<MyContext>(BOT_TOKEN)

// –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let isInitialized = false

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è —Å–µ—Å—Å–∏–π
async function setupSessionStorage() {
  if (isInitialized) return
  
  try {
    console.log('üîÑ [BOT-STORAGE] Setting up PostgreSQL session storage...')
    
    const storage = await PsqlAdapter.create({
      connectionString: DATABASE_URL,
      tableName: 'telegram_sessions' // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
    })
    
    console.log('‚úÖ [BOT-STORAGE] PostgreSQL storage initialized')
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
    bot.use(session({ 
      storage,
      initial: (): SessionData => ({})
    }))
    
    // –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å conversations
    bot.use(conversations())
    
    console.log('‚úÖ [BOT-STORAGE] Sessions and conversations middleware added')
    
    isInitialized = true
    
  } catch (error) {
    console.error('‚ùå [BOT-STORAGE] Failed to setup PostgreSQL storage:', error)
    throw error
  }
}

function isAdmin(ctx: MyContext): boolean {
  return ADMIN_IDS.includes(ctx.from?.id.toString() || '')
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = new Menu<MyContext>('main-menu')
  .text('üì¶ –ó–∞–∫–∞–∑—ã', (ctx) => ctx.conversation.enter('manageOrders'))
  .text('üõçÔ∏è –¢–æ–≤–∞—Ä—ã', (ctx) => ctx.conversation.enter('manageProducts'))
  .row()
  .text('üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', (ctx) => ctx.conversation.enter('manageCategories'))
  .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => ctx.conversation.enter('viewStats'))
  .row()
  .text('üé¨ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π', (ctx) => ctx.conversation.enter('manageHomeVideo'))
  .text('‚úçÔ∏è –í–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–∏', (ctx) => ctx.conversation.enter('manageSignVideos'))
  .row()
  .text('üí¨ –û—Ç–∑—ã–≤—ã', (ctx) => ctx.conversation.enter('manageReviews'))
  .text('üë• –ö–ª–∏–µ–Ω—Ç—ã', (ctx) => ctx.conversation.enter('manageCustomers'))

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö middleware –∏ –∫–æ–º–∞–Ω–¥
async function initializeBot() {
  if (!isInitialized) {
    await setupSessionStorage()
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ sessions
    bot.use(mainMenu)
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º conversations
    bot.use(createConversation(manageOrders))
    bot.use(createConversation(manageProducts))
    bot.use(createConversation(manageCategories))
    bot.use(createConversation(viewStats))
    bot.use(createConversation(manageHomeVideo))
    bot.use(createConversation(manageSignVideos))
    bot.use(createConversation(manageReviews))
    bot.use(createConversation(manageCustomers))
  }
}

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.command('start', async (ctx) => {
  console.log('üéØ [BOT-STORAGE] /start command received from:', ctx.from?.id)
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
  await initializeBot()
  
  if (!isAdmin(ctx)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }

  await ctx.reply(
    'üöÄ *VobVorot Store Management*\n\n' +
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º!\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:',
    { 
      parse_mode: 'Markdown',
      reply_markup: mainMenu
    }
  )
})

// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.command('test', async (ctx) => {
  if (!isAdmin(ctx)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
    return
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
  if (!ctx.session.step) {
    ctx.session.step = 'test_started'
    await ctx.reply('‚úÖ –¢–µ—Å—Ç –Ω–∞—á–∞—Ç! –°–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /test –µ—â–µ —Ä–∞–∑.')
  } else {
    await ctx.reply(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${ctx.session.step}`)
    ctx.session.step = undefined
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx
  console.error('‚ùå [BOT-STORAGE] Error while handling update', ctx.update.update_id, ':')
  const e = err.error
  
  if (e instanceof GrammyError) {
    console.error('‚ùå [BOT-STORAGE] Error in request:', e.description)
  } else if (e instanceof HttpError) {
    console.error('‚ùå [BOT-STORAGE] Could not contact Telegram:', e)
  } else {
    console.error('‚ùå [BOT-STORAGE] Unknown error:', e)
  }
})

// –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ conversations –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(createConversation(async function manageOrders(conversation: any, ctx: MyContext) {
  await ctx.reply('üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { parse_mode: 'Markdown' })
  
  const ordersMenu = new Menu<MyContext>('orders-menu')
    .text('üìã –í—Å–µ –∑–∞–∫–∞–∑—ã', async (ctx) => {
      await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤...')
      // TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–∫–∞–∑–æ–≤
    })
    .text('‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ', async (ctx) => {
      await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã...')
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    })
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu })
      return ctx.conversation.exit()
    })
  
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', { reply_markup: ordersMenu })
}))

bot.use(createConversation(async function manageProducts(conversation: any, ctx: MyContext) {
  await ctx.reply('üõçÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { parse_mode: 'Markdown' })
  
  const productsMenu = new Menu<MyContext>('products-menu')
    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', async (ctx) => {
      await ctx.reply('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...')
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    })
    .text('üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', async (ctx) => {
      await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...')
      // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    })
    .row()
    .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
      await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu })
      return ctx.conversation.exit()
    })
  
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', { reply_markup: productsMenu })
}))

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö conversations
bot.use(createConversation(async function manageCategories(conversation: any, ctx: MyContext) {
  await ctx.reply('üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
  await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu })
}))

bot.use(createConversation(async function viewStats(conversation: any, ctx: MyContext) {
  await ctx.reply('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
  await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu })
}))

bot.use(createConversation(async function manageHomeVideo(conversation: any, ctx: MyContext) {
  await ctx.reply('üé¨ –í–∏–¥–µ–æ –≥–ª–∞–≤–Ω–æ–π - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
  await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu })
}))

bot.use(createConversation(async function manageSignVideos(conversation: any, ctx: MyContext) {
  await ctx.reply('‚úçÔ∏è –í–∏–¥–µ–æ –ø–æ–¥–ø–∏—Å–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
  await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu })
}))

bot.use(createConversation(async function manageReviews(conversation: any, ctx: MyContext) {
  await ctx.reply('üí¨ –û—Ç–∑—ã–≤—ã - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
  await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu })
}))

bot.use(createConversation(async function manageCustomers(conversation: any, ctx: MyContext) {
  await ctx.reply('üë• –ö–ª–∏–µ–Ω—Ç—ã - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
  await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu })
}))

console.log('‚úÖ [BOT-STORAGE] Bot with PostgreSQL storage initialized successfully')

export { bot }