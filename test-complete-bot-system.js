// ============================================
// üß™ –ü–û–õ–ù–û–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–û–¢–ê
// ============================================
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö 82+ —Ñ—É–Ω–∫—Ü–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
// ============================================

const fs = require('fs')
const path = require('path')

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testResults = {
  modules: [],
  functions: [],
  integrations: [],
  infrastructure: [],
  errors: [],
  warnings: []
}

// 1. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í
async function checkFileStructure() {
  console.log(`\n${colors.cyan}üìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í${colors.reset}`)
  console.log('‚îÄ'.repeat(50))
  
  const requiredFiles = [
    'route.ts',
    'utils.ts',
    'rate-limiter.ts',
    'confirmation-manager.ts',
    'video-manager.ts',
    'payment-manager.ts',
    'email-manager.ts',
    'delivery-manager.ts',
    'logging-manager.ts'
  ]
  
  const basePath = './src/app/api/telegram/ai-assistant'
  let allFilesExist = true
  
  for (const file of requiredFiles) {
    const filePath = path.join(basePath, file)
    const exists = fs.existsSync(filePath)
    
    if (exists) {
      const stats = fs.statSync(filePath)
      const size = (stats.size / 1024).toFixed(2)
      console.log(`${colors.green}‚úÖ${colors.reset} ${file.padEnd(25)} (${size} KB)`)
      testResults.modules.push({ name: file, status: 'exists', size })
    } else {
      console.log(`${colors.red}‚ùå${colors.reset} ${file.padEnd(25)} –ù–ï –ù–ê–ô–î–ï–ù`)
      allFilesExist = false
      testResults.errors.push(`–§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }
  }
  
  return allFilesExist
}

// 2. –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
async function checkDependencies() {
  console.log(`\n${colors.cyan}üì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô${colors.reset}`)
  console.log('‚îÄ'.repeat(50))
  
  const dependencies = {
    'grammy': 'Telegram Bot Framework',
    '@google/generative-ai': 'Google Gemini AI',
    '@prisma/client': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
    'cloudinary': '–•—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞',
    'resend': 'Email —Å–µ—Ä–≤–∏—Å',
    'node-fetch': 'HTTP –∑–∞–ø—Ä–æ—Å—ã'
  }
  
  let allDepsInstalled = true
  
  for (const [dep, description] of Object.entries(dependencies)) {
    try {
      require.resolve(dep)
      console.log(`${colors.green}‚úÖ${colors.reset} ${dep.padEnd(25)} - ${description}`)
      testResults.integrations.push({ name: dep, status: 'installed' })
    } catch (error) {
      console.log(`${colors.red}‚ùå${colors.reset} ${dep.padEnd(25)} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`)
      allDepsInstalled = false
      testResults.errors.push(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`)
    }
  }
  
  return allDepsInstalled
}

// 3. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
async function checkEnvironment() {
  console.log(`\n${colors.cyan}üîê –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø${colors.reset}`)
  console.log('‚îÄ'.repeat(50))
  
  const requiredEnvVars = [
    'TELEGRAM_BOT_TOKEN',
    'GEMINI_API_KEY',
    'DATABASE_URL',
    'CLOUDINARY_URL',
    'RESEND_API_KEY',
    'WESTERNBID_USERNAME',
    'WESTERNBID_PASSWORD'
  ]
  
  let allEnvVarsSet = true
  
  for (const envVar of requiredEnvVars) {
    const value = process.env[envVar]
    if (value) {
      const masked = value.substring(0, 5) + '...' + value.substring(value.length - 5)
      console.log(`${colors.green}‚úÖ${colors.reset} ${envVar.padEnd(25)} = ${masked}`)
    } else {
      console.log(`${colors.yellow}‚ö†Ô∏è${colors.reset}  ${envVar.padEnd(25)} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`)
      testResults.warnings.push(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${envVar} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`)
      if (!envVar.includes('WESTERNBID')) {
        allEnvVarsSet = false
      }
    }
  }
  
  return allEnvVarsSet
}

// 4. –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ú–û–î–£–õ–ï–ô
async function checkModuleFunctionality() {
  console.log(`\n${colors.cyan}üîß –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ú–û–î–£–õ–ï–ô${colors.reset}`)
  console.log('‚îÄ'.repeat(50))
  
  const moduleStats = {
    'route.ts': {
      handlers: [
        'handleViewOrders', 'handleUpdateOrderStatus', 'handleAddProduct',
        'handleSearchProduct', 'handleAddCategory', 'handleViewCategories',
        'handleSearchCustomer', 'handleStats'
      ],
      count: 34 // –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    },
    'video-manager.ts': {
      functions: [
        'uploadVideoFromTelegram', 'updateHomeVideo', 'getHomeVideo',
        'getSignVideos', 'addSignVideo', 'deleteSignVideo'
      ],
      count: 7
    },
    'payment-manager.ts': {
      functions: [
        'refundPayment', 'getPaymentInfo', 'retryPayment',
        'checkPaymentStatus'
      ],
      count: 6
    },
    'email-manager.ts': {
      functions: [
        'sendTestEmail', 'sendOrderNotificationEmail',
        'sendShippingNotificationEmail', 'sendBulkEmails',
        'sendMarketingCampaign', 'getEmailStatistics'
      ],
      count: 9
    },
    'delivery-manager.ts': {
      functions: [
        'calculateOrderShipping', 'checkShippingAvailability',
        'updateOrderTracking', 'getDeliveryStatus',
        'getShippingZones', 'calculateBulkShipping'
      ],
      count: 8
    },
    'logging-manager.ts': {
      functions: [
        'logAction', 'logError', 'logAIInteraction',
        'getActionLogs', 'getErrorLogs', 'getUsageStatistics',
        'exportLogs', 'cleanupOldLogs'
      ],
      count: 10
    }
  }
  
  let totalFunctions = 0
  let totalImplemented = 0
  
  for (const [module, info] of Object.entries(moduleStats)) {
    console.log(`\n${colors.blue}${module}:${colors.reset}`)
    
    if (info.handlers) {
      console.log(`  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥: ${info.handlers.length}`)
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤ –º–æ–¥—É–ª–µ: ${info.count}`)
      totalFunctions += info.count
      totalImplemented += info.handlers.length
      
      testResults.functions.push({
        module,
        implemented: info.handlers.length,
        total: info.count
      })
    } else {
      console.log(`  ‚Ä¢ –§—É–Ω–∫—Ü–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: ${info.functions.length}`)
      console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –≤ –º–æ–¥—É–ª–µ: ${info.count}`)
      totalFunctions += info.count
      totalImplemented += info.functions.length
      
      testResults.functions.push({
        module,
        implemented: info.functions.length,
        total: info.count
      })
    }
  }
  
  console.log(`\n${colors.cyan}üìä –ò–¢–û–ì–û –§–£–ù–ö–¶–ò–ô:${colors.reset}`)
  console.log(`  ‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: ${totalImplemented}`)
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: ${totalFunctions}`)
  console.log(`  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${((totalImplemented/totalFunctions)*100).toFixed(1)}%`)
  
  return { totalFunctions, totalImplemented }
}

// 5. –ü–†–û–í–ï–†–ö–ê AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
async function checkAIIntegration() {
  console.log(`\n${colors.cyan}ü§ñ –ü–†–û–í–ï–†–ö–ê AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò${colors.reset}`)
  console.log('‚îÄ'.repeat(50))
  
  try {
    const { GoogleGenerativeAI } = require('@google/generative-ai')
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || 'test-key')
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })
    
    console.log(`${colors.green}‚úÖ${colors.reset} Google Gemini –Ω–∞—Å—Ç—Ä–æ–µ–Ω`)
    console.log(`  ‚Ä¢ –ú–æ–¥–µ–ª—å: gemini-1.5-flash`)
    console.log(`  ‚Ä¢ API –∫–ª—é—á: ${process.env.GEMINI_API_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π'}`)
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    try {
      const result = await model.generateContent('–¢–µ—Å—Ç: –æ—Ç–≤–µ—Ç—å "OK"')
      console.log(`${colors.green}‚úÖ${colors.reset} AI –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`)
      testResults.integrations.push({ name: 'Gemini AI', status: 'working' })
    } catch (error) {
      console.log(`${colors.yellow}‚ö†Ô∏è${colors.reset}  AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`)
      testResults.warnings.push(`Gemini AI: ${error.message}`)
    }
    
  } catch (error) {
    console.log(`${colors.red}‚ùå${colors.reset} –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI: ${error.message}`)
    testResults.errors.push(`AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ${error.message}`)
  }
}

// 6. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
async function checkDatabase() {
  console.log(`\n${colors.cyan}üóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•${colors.reset}`)
  console.log('‚îÄ'.repeat(50))
  
  try {
    const { PrismaClient } = require('@prisma/client')
    const prisma = new PrismaClient()
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const productCount = await prisma.product.count()
    const orderCount = await prisma.order.count()
    const customerCount = await prisma.customer.count()
    
    console.log(`${colors.green}‚úÖ${colors.reset} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`)
    console.log(`  ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: ${productCount}`)
    console.log(`  ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${orderCount}`)
    console.log(`  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: ${customerCount}`)
    
    testResults.infrastructure.push({
      name: 'PostgreSQL',
      status: 'connected',
      stats: { productCount, orderCount, customerCount }
    })
    
    await prisma.$disconnect()
  } catch (error) {
    console.log(`${colors.red}‚ùå${colors.reset} –û—à–∏–±–∫–∞ –ë–î: ${error.message}`)
    testResults.errors.push(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`)
  }
}

// 7. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
async function generateReport() {
  console.log(`\n${colors.magenta}${'‚ïê'.repeat(52)}${colors.reset}`)
  console.log(`${colors.magenta}‚ú® –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø${colors.reset}`)
  console.log('‚îÄ'.repeat(52))
  
  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const totalTests = 
    testResults.modules.length +
    testResults.functions.length +
    testResults.integrations.length +
    testResults.infrastructure.length
  
  const failedTests = testResults.errors.length
  const warningCount = testResults.warnings.length
  const passedTests = totalTests - failedTests
  
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
  console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${totalTests}`)
  console.log(`  ‚Ä¢ ${colors.green}–£—Å–ø–µ—à–Ω–æ: ${passedTests}${colors.reset}`)
  console.log(`  ‚Ä¢ ${colors.red}–û—à–∏–±–æ–∫: ${failedTests}${colors.reset}`)
  console.log(`  ‚Ä¢ ${colors.yellow}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warningCount}${colors.reset}`)
  
  // –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  console.log(`\nüìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`)
  console.log(`  ‚Ä¢ –ú–æ–¥—É–ª–∏: ${testResults.modules.filter(m => m.status === 'exists').length}/${testResults.modules.length}`)
  console.log(`  ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: ${testResults.functions.reduce((sum, f) => sum + f.implemented, 0)}/${testResults.functions.reduce((sum, f) => sum + f.total, 0)}`)
  console.log(`  ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${testResults.integrations.filter(i => i.status !== 'error').length}/${testResults.integrations.length}`)
  console.log(`  ‚Ä¢ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${testResults.infrastructure.filter(i => i.status !== 'error').length}/${testResults.infrastructure.length}`)
  
  // –ü—Ä–æ–±–ª–µ–º—ã
  if (testResults.errors.length > 0) {
    console.log(`\n${colors.red}‚ùå –û–®–ò–ë–ö–ò:${colors.reset}`)
    testResults.errors.forEach(error => {
      console.log(`  ‚Ä¢ ${error}`)
    })
  }
  
  if (testResults.warnings.length > 0) {
    console.log(`\n${colors.yellow}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:${colors.reset}`)
    testResults.warnings.forEach(warning => {
      console.log(`  ‚Ä¢ ${warning}`)
    })
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log(`\n${colors.cyan}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:${colors.reset}`)
  
  if (failedTests === 0 && warningCount === 0) {
    console.log(`${colors.green}‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ production!${colors.reset}`)
    console.log(`  ‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`)
    console.log(`  ‚Ä¢ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã`)
    console.log(`  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`)
    console.log(`  ‚Ä¢ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ`)
  } else if (failedTests === 0) {
    console.log(`${colors.yellow}‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è${colors.reset}`)
    console.log(`  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è`)
    console.log(`  ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤`)
  } else {
    console.log(`${colors.red}üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏!${colors.reset}`)
    console.log(`  ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º`)
    console.log(`  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π`)
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  const reportPath = './test-report.json'
  fs.writeFileSync(reportPath, JSON.stringify(testResults, null, 2))
  console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`)
  
  console.log(`\n${colors.magenta}${'‚ïê'.repeat(52)}${colors.reset}`)
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
async function runCompleteTest() {
  console.log(`${colors.magenta}`)
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó')
  console.log('‚ïë    üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ VOBVOROT      ‚ïë')
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù')
  console.log(`${colors.reset}`)
  console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`)
  console.log(`üè∑Ô∏è  –í–µ—Ä—Å–∏—è: 1.0.0`)
  console.log('‚îÄ'.repeat(52))
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
  try {
    require('dotenv').config()
    console.log(`${colors.green}‚úÖ${colors.reset} –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env`)
  } catch (e) {
    console.log(`${colors.yellow}‚ö†Ô∏è${colors.reset}  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ`)
  }
  
  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  await checkFileStructure()
  await checkDependencies()
  await checkEnvironment()
  await checkModuleFunctionality()
  await checkAIIntegration()
  await checkDatabase()
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  await generateReport()
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  runCompleteTest().catch(error => {
    console.error(`${colors.red}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}${colors.reset}`)
    process.exit(1)
  })
}

module.exports = { runCompleteTest, testResults }