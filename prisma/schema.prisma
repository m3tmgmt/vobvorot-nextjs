generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  emailVerified    DateTime?      @map("email_verified")
  name             String?
  password         String?
  image            String?
  role             Role           @default(USER)
  firstName        String?        @map("first_name")
  lastName         String?        @map("last_name")
  phone            String?
  dateOfBirth      DateTime?      @map("date_of_birth")
  gender           String?
  newsletter       Boolean        @default(false)
  language         String?        @default("en")
  timezone         String?
  isActive         Boolean        @default(true) @map("is_active")
  lastLoginAt      DateTime?      @map("last_login_at")
  resetToken       String?        @map("reset_token")
  resetTokenExpiry DateTime?      @map("reset_token_expiry")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  accounts         Account[]
  futureLetters    FutureLetter[]
  orders           Order[]
  reviews          Review[]
  sessions         Session[]
  addresses        UserAddress[]
  wishlist         WishlistItem[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String         @map("user_id")
  type              String
  provider          String
  providerAccountId String         @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String             @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  emoji       String?
  parentId    String?            @map("parent_id")
  imageUrl    String?            @map("image_url")
  isActive    Boolean    @default(true) @map("is_active")
  sortOrder   Int?       @default(0) @map("sort_order")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  parent      Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  products    Product[]

  @@index([parentId])
  @@index([slug])
  @@index([isActive])
  @@index([sortOrder])
  @@map("categories")
}

model Product {
  id              String         @id @default(cuid())
  name            String
  slug            String         @unique
  description     String?
  brand           String?
  categoryId      String         @map("category_id")
  metaTitle       String?        @map("meta_title")
  metaDescription String?        @map("meta_description")
  videoUrl        String?        @map("video_url")
  isActive        Boolean        @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  images          ProductImage[]
  skus            ProductSku[]
  category        Category       @relation(fields: [categoryId], references: [id])
  reviews         Review[]
  wishlist        WishlistItem[]

  @@index([categoryId])
  @@index([slug])
  @@index([brand])
  @@index([isActive])
  @@index([createdAt])
  @@index([name])
  @@index([description])
  @@map("products")
}

model ProductImage {
  id            String   @id @default(cuid())
  url           String
  alt           String?
  isPrimary     Boolean  @default(false) @map("is_primary")
  productId     String                  @map("product_id")
  cloudinaryId  String?                 @map("cloudinary_id")
  cloudinaryUrl String?                 @map("cloudinary_url")
  width         Int?
  height        Int?
  format        String?
  size          BigInt?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isPrimary])
  @@map("product_images")
}

model ProductSku {
  id                String             @id @default(cuid())
  sku               String             @unique
  size              String?
  color             String?
  price             Decimal            @db.Decimal(10, 2)
  compareAtPrice    Decimal?           @db.Decimal(10, 2) @map("compare_at_price")
  stock             Int                @default(0)
  reservedStock     Int                @default(0) @map("reserved_stock")
  lowStockThreshold Int?               @default(5) @map("low_stock_threshold")
  productId         String             @map("product_id")
  isActive          Boolean            @default(true) @map("is_active")
  weight            Decimal?           @db.Decimal(8, 3)
  dimensions        String?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  orderItems        OrderItem[]
  product           Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  reservations      StockReservation[]

  @@index([productId])
  @@index([sku])
  @@index([isActive])
  @@index([stock])
  @@map("product_skus")
}

model StockReservation {
  id        String            @id @default(cuid())
  skuId     String             @map("sku_id")
  quantity  Int
  orderId   String?            @map("order_id")
  expiresAt DateTime            @map("expires_at")
  status    ReservationStatus
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  order     Order?            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sku       ProductSku        @relation(fields: [skuId], references: [id], onDelete: Cascade)

  @@index([skuId])
  @@index([orderId])
  @@index([expiresAt])
  @@map("stock_reservations")
}

model Order {
  id               String             @id @default(cuid())
  orderNumber      String             @unique @map("order_number")
  userId           String?            @map("user_id")
  status           OrderStatus        @default(PENDING)
  shippingName     String             @map("shipping_name")
  shippingEmail    String             @map("shipping_email")
  shippingPhone    String?            @map("shipping_phone")
  shippingAddress  String             @map("shipping_address")
  shippingCity     String             @map("shipping_city")
  shippingState    String?            @map("shipping_state")
  shippingCountry  String             @map("shipping_country")
  shippingZip      String             @map("shipping_zip")
  subtotal         Decimal            @db.Decimal(10, 2)
  tax              Decimal            @default(0) @db.Decimal(10, 2)
  shippingCost     Decimal            @db.Decimal(10, 2) @map("shipping_cost")
  discount         Decimal            @default(0) @db.Decimal(10, 2)
  total            Decimal            @db.Decimal(10, 2)
  currency         String             @default("USD")
  paymentMethod    String?            @map("payment_method")
  paymentStatus    PaymentStatus      @default(PENDING) @map("payment_status")
  paymentId        String?            @map("payment_id")
  transactionId    String?            @map("transaction_id")
  paidAt           DateTime?          @map("paid_at")
  failureReason    String?            @map("failure_reason")
  refundedAt       DateTime?          @map("refunded_at")
  refundAmount     Decimal?           @db.Decimal(10, 2) @map("refund_amount")
  refundId         String?            @map("refund_id")
  refundStatus     String?            @map("refund_status")
  refundReason     String?            @map("refund_reason")
  sessionId        String?            @map("session_id")
  trackingNumber   String?            @map("tracking_number")
  notes            String?
  internalNotes    String?            @map("internal_notes")
  actualPayerEmail String?            @map("actual_payer_email")
  actualPayerName  String?            @map("actual_payer_name")
  payerMetadata    String?            @map("payer_metadata")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  refundedBy       String?            @map("refunded_by")
  orderType        OrderType          @default(PRODUCT) @map("order_type")
  items            OrderItem[]
  orderLogs        OrderLog[]
  user             User?              @relation(fields: [userId], references: [id])
  payment          Payment?
  signOrder        SignOrder?
  reservations     StockReservation[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
  @@index([transactionId])
  @@index([sessionId])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id          String     @id @default(cuid())
  orderId     String     @map("order_id")
  skuId       String     @map("sku_id")
  quantity    Int
  price       Decimal    @db.Decimal(10, 2)
  productName String     @map("product_name")
  productSku  String     @map("product_sku")
  order       Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sku         ProductSku @relation(fields: [skuId], references: [id])

  @@index([orderId])
  @@index([skuId])
  @@map("order_items")
}

model Payment {
  id           String        @id @default(cuid())
  orderId      String        @unique @map("order_id")
  paymentId    String?       @map("payment_id")
  amount       Decimal       @db.Decimal(10, 2)
  currency     String        @default("USD")
  status       PaymentStatus @default(PENDING)
  method       String?
  gatewayData  Json?         @map("gateway_data")
  refundId     String?       @map("refund_id")
  refundAmount Decimal?      @db.Decimal(10, 2) @map("refund_amount")
  refundReason String?       @map("refund_reason")
  refundedAt   DateTime?     @map("refunded_at")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([paymentId])
  @@index([status])
  @@index([refundId])
  @@map("payments")
}

model OrderLog {
  id        String   @id @default(cuid())
  orderId   String   @map("order_id")
  action    String
  details   Json?
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([action])
  @@index([createdAt])
  @@map("order_logs")
}

model SignOrder {
  id          String    @id @default(cuid())
  orderId     String    @unique @map("order_id")
  signName    String    @map("sign_name")
  extraNotes  String?   @map("extra_notes")
  photoUrl    String?   @map("photo_url")
  deliveredAt DateTime? @map("delivered_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("sign_orders")
}

model Review {
  id        String   @id @default(cuid())
  userId    String     @map("user_id")
  productId String     @map("product_id")
  rating    Int
  title     String?
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String     @map("user_id")
  productId String     @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model UserAddress {
  id        String      @id @default(cuid())
  userId    String         @map("user_id")
  type      AddressType @default(SHIPPING)
  firstName String         @map("first_name")
  lastName  String         @map("last_name")
  company   String?
  address1  String
  address2  String?
  city      String
  state     String?
  country   String
  zipCode   String         @map("zip_code")
  phone     String?
  isDefault Boolean     @default(false) @map("is_default")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("user_addresses")
}

model FutureLetter {
  id             String             @id @default(cuid())
  userId         String?        @map("user_id")
  senderEmail    String         @map("sender_email")
  senderName     String?        @map("sender_name")
  recipientEmail String?        @map("recipient_email")
  subject        String?
  message        String
  deliveryDate   DateTime       @map("delivery_date")
  status         FutureLetterStatus @default(PENDING)
  deliveredAt    DateTime?      @map("delivered_at")
  failureReason  String?        @map("failure_reason")
  isAnonymous    Boolean            @default(false) @map("is_anonymous")
  metadata       Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user           User?              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([senderEmail])
  @@index([deliveryDate])
  @@index([status])
  @@index([createdAt])
  @@map("future_letters")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

enum FutureLetterStatus {
  PENDING
  SCHEDULED
  DELIVERED
  FAILED
  CANCELLED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  PARTIALLY_REFUNDED
}

enum OrderType {
  PRODUCT
  SIGN_PHOTO
}

enum ReservationStatus {
  ACTIVE
  EXPIRED
  CONFIRMED
  CANCELLED
}
