// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String?
  image         String?
  role          Role      @default(USER)
  
  // Additional user data
  firstName     String?
  lastName      String?
  phone         String?
  dateOfBirth   DateTime?
  gender        String?
  
  // Preferences
  newsletter    Boolean @default(false)
  language      String? @default("en")
  timezone      String?
  
  // Status
  isActive      Boolean @default(true)
  lastLoginAt   DateTime?
  
  // Password reset
  resetToken        String?
  resetTokenExpiry  DateTime?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  orders    Order[]
  reviews   Review[]
  wishlist  WishlistItem[]
  accounts  Account[]
  sessions  Session[]
  addresses UserAddress[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String?
  parentId    String?
  parent      Category? @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  
  products    Product[]
  
  // Additional fields
  imageUrl    String?
  isActive    Boolean @default(true)
  sortOrder   Int? @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([parentId])
  @@index([slug])
  @@index([isActive])
  @@index([sortOrder])
  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  brand       String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  
  images      ProductImage[]
  skus        ProductSku[]
  reviews     Review[]
  wishlist    WishlistItem[]
  
  // SEO and metadata
  metaTitle       String?
  metaDescription String?
  isActive        Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
  @@index([slug])
  @@index([brand])
  @@index([isActive])
  @@index([createdAt])
  @@index([name])
  @@index([description])
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean @default(false)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Cloudinary integration
  cloudinaryId   String?
  cloudinaryUrl  String?
  width         Int?
  height        Int?
  format        String?
  size          BigInt?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([isPrimary])
  @@map("product_images")
}

model ProductSku {
  id        String @id @default(cuid())
  sku       String @unique
  size      String?
  color     String?
  price     Decimal @db.Decimal(10,2)
  compareAtPrice Decimal? @db.Decimal(10,2)
  stock     Int    @default(0)
  lowStockThreshold Int? @default(5)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  orderItems OrderItem[]
  
  // Inventory tracking
  isActive   Boolean @default(true)
  weight     Decimal? @db.Decimal(8,3)
  dimensions String? // JSON string for length, width, height
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([sku])
  @@index([isActive])
  @@index([stock])
  @@map("product_skus")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  status          OrderStatus @default(PENDING)
  
  // Shipping info
  shippingName    String
  shippingEmail   String
  shippingPhone   String?
  shippingAddress String
  shippingCity    String
  shippingCountry String
  shippingZip     String
  
  // Pricing
  subtotal        Decimal @db.Decimal(10,2)
  tax             Decimal @default(0) @db.Decimal(10,2)
  shippingCost    Decimal @db.Decimal(10,2)
  discount        Decimal @default(0) @db.Decimal(10,2)
  total           Decimal @db.Decimal(10,2)
  currency        String      @default("USD")
  
  // Payment
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  paymentId       String?
  
  // Western Bid Integration
  transactionId   String?     // ID транзакции от Western Bid
  paidAt          DateTime?   // Время успешной оплаты
  failureReason   String?     // Причина неудачи платежа
  refundedAt      DateTime?   // Время возврата
  refundAmount    Decimal? @db.Decimal(10,2)    // Сумма возврата
  refundId        String?     // ID возврата от Western Bid
  refundStatus    String?     // Статус возврата
  refundReason    String?     // Причина возврата
  sessionId       String?     // ID сессии платежа
  
  // Additional tracking
  trackingNumber  String?
  notes           String?
  internalNotes   String?
  
  items           OrderItem[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
  @@index([transactionId])
  @@index([sessionId])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id        String     @id @default(cuid())
  orderId   String
  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  skuId     String
  sku       ProductSku @relation(fields: [skuId], references: [id])
  
  quantity  Int
  price     Decimal @db.Decimal(10,2)      // Price at time of order
  
  // Snapshot data for order history
  productName String
  productSku  String
  
  @@index([orderId])
  @@index([skuId])
  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("reviews")
}

model WishlistItem {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model UserAddress {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type       AddressType @default(SHIPPING)
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String?
  country    String
  zipCode    String
  phone      String?
  
  isDefault  Boolean @default(false)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@map("user_addresses")
}

enum AddressType {
  SHIPPING
  BILLING
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  PARTIALLY_REFUNDED
}