const https = require('https');

const TELEGRAM_BOT_TOKEN = '7700098378:AAGZ1zZOxiwXbJeknO9SvyN25KvfWQkQNrI';
const WEBHOOK_SECRET = 'vobvorot_webhook_secret_2025';
const WEBHOOK_URL = 'https://vobvorot.com/api/telegram/ai-assistant';

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram Webhook...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook info
function checkWebhookInfo() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo`,
      method: 'GET'
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => { data += chunk; });
      res.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (e) {
          reject(e);
        }
      });
    });

    req.on('error', reject);
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook
function testWebhook() {
  return new Promise((resolve, reject) => {
    const testData = JSON.stringify({
      message: {
        message_id: 1,
        from: {
          id: 316593422,
          username: 'admin',
          first_name: 'Admin'
        },
        chat: {
          id: 316593422,
          type: 'private'
        },
        text: '/start',
        date: Math.floor(Date.now() / 1000)
      }
    });

    const options = {
      hostname: 'vobvorot.com',
      port: 443,
      path: '/api/telegram/ai-assistant',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': testData.length,
        'x-telegram-bot-api-secret-token': WEBHOOK_SECRET
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => { data += chunk; });
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: data
        });
      });
    });

    req.on('error', reject);
    req.write(testData);
    req.end();
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook info
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook –∏–∑ Telegram API...');
    const webhookInfo = await checkWebhookInfo();
    
    if (webhookInfo.ok) {
      const result = webhookInfo.result;
      console.log('‚úÖ Webhook URL:', result.url);
      console.log('üìä Pending updates:', result.pending_update_count);
      
      if (result.last_error_date) {
        const errorDate = new Date(result.last_error_date * 1000);
        console.log('‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:', errorDate.toLocaleString());
        console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', result.last_error_message);
      } else {
        console.log('‚úÖ –û—à–∏–±–æ–∫ –Ω–µ—Ç');
      }
      
      console.log('üåê IP –∞–¥—Ä–µ—Å:', result.ip_address);
      console.log('üîó Max connections:', result.max_connections);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', webhookInfo);
    }
    
    // –¢–µ—Å—Ç webhook
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint...');
    const testResult = await testWebhook();
    
    console.log('üì° Status Code:', testResult.statusCode);
    console.log('üìÑ Response:', testResult.body);
    
    if (testResult.statusCode === 200) {
      console.log('‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.log('‚ùå Webhook –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É:', testResult.statusCode);
      
      if (testResult.statusCode === 401) {
        console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–≤–µ—Ä–Ω—ã–π secret token');
        console.log('üìã –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel:');
        console.log('   TELEGRAM_WEBHOOK_SECRET=vobvorot_webhook_secret_2025');
        console.log('   GEMINI_API_KEY=AIzaSyAYSLsD4XW40XJm5uv6w71bYoZkTAeoU7Y');
        console.log('\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: FIX_TELEGRAM_WEBHOOK.md');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

main();