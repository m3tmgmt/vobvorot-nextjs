#!/usr/bin/env node

/**
 * MCP Server –¥–ª—è Resend API
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–æ–º–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
 */

const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');

class ResendMCPServer {
  constructor() {
    this.server = new Server(
      {
        name: 'resend-mcp-server',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {}
        }
      }
    );

    this.setupToolHandlers();
  }

  setupToolHandlers() {
    // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–µ–Ω–∞
    this.server.setRequestHandler('tools/list', async () => {
      return {
        tools: [
          {
            name: 'resend_check_domain',
            description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞ –≤ Resend',
            inputSchema: {
              type: 'object',
              properties: {
                domain: {
                  type: 'string',
                  description: '–î–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, vobvorot.com)'
                },
                api_key: {
                  type: 'string',
                  description: 'API –∫–ª—é—á Resend (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)'
                }
              },
              required: ['domain']
            }
          },
          {
            name: 'resend_add_domain',
            description: '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω –≤ Resend –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            inputSchema: {
              type: 'object',
              properties: {
                domain: {
                  type: 'string',
                  description: '–î–æ–º–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
                },
                api_key: {
                  type: 'string',
                  description: 'API –∫–ª—é—á Resend'
                }
              },
              required: ['domain', 'api_key']
            }
          },
          {
            name: 'resend_get_dns_records',
            description: '–ü–æ–ª—É—á–∏—Ç—å DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞',
            inputSchema: {
              type: 'object',
              properties: {
                domain: {
                  type: 'string',
                  description: '–î–æ–º–µ–Ω'
                },
                api_key: {
                  type: 'string',
                  description: 'API –∫–ª—é—á Resend'
                }
              },
              required: ['domain', 'api_key']
            }
          },
          {
            name: 'resend_verify_domain',
            description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ–º–µ–Ω–∞',
            inputSchema: {
              type: 'object',
              properties: {
                domain: {
                  type: 'string',
                  description: '–î–æ–º–µ–Ω –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                },
                api_key: {
                  type: 'string',
                  description: 'API –∫–ª—é—á Resend'
                }
              },
              required: ['domain', 'api_key']
            }
          },
          {
            name: 'resend_send_test_email',
            description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
            inputSchema: {
              type: 'object',
              properties: {
                from: {
                  type: 'string',
                  description: 'Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è'
                },
                to: {
                  type: 'string',
                  description: 'Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è'
                },
                subject: {
                  type: 'string',
                  description: '–¢–µ–º–∞ –ø–∏—Å—å–º–∞'
                },
                api_key: {
                  type: 'string',
                  description: 'API –∫–ª—é—á Resend'
                }
              },
              required: ['from', 'to', 'subject', 'api_key']
            }
          }
        ]
      };
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler('tools/call', async (request) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case 'resend_check_domain':
            return await this.checkDomain(args.domain, args.api_key);
          
          case 'resend_add_domain':
            return await this.addDomain(args.domain, args.api_key);
          
          case 'resend_get_dns_records':
            return await this.getDNSRecords(args.domain, args.api_key);
          
          case 'resend_verify_domain':
            return await this.verifyDomain(args.domain, args.api_key);
          
          case 'resend_send_test_email':
            return await this.sendTestEmail(args);
          
          default:
            throw new Error(`Unknown tool: ${name}`);
        }
      } catch (error) {
        return {
          content: [
            {
              type: 'text',
              text: `Error: ${error.message}`
            }
          ],
          isError: true
        };
      }
    });
  }

  async makeResendRequest(endpoint, options = {}) {
    const url = `https://api.resend.com${endpoint}`;
    const response = await fetch(url, {
      method: options.method || 'GET',
      headers: {
        'Authorization': `Bearer ${options.apiKey}`,
        'Content-Type': 'application/json',
        ...options.headers
      },
      body: options.body ? JSON.stringify(options.body) : undefined
    });

    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(`Resend API Error: ${data.message || response.statusText}`);
    }

    return data;
  }

  async checkDomain(domain, apiKey) {
    if (!apiKey) {
      return {
        content: [
          {
            type: 'text',
            text: `–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–∞ ${domain} –Ω—É–∂–µ–Ω API –∫–ª—é—á Resend. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ https://resend.com/api-keys`
          }
        ]
      };
    }

    try {
      const domains = await this.makeResendRequest('/domains', { apiKey });
      const targetDomain = domains.data?.find(d => d.name === domain);

      if (!targetDomain) {
        return {
          content: [
            {
              type: 'text',
              text: `–î–æ–º–µ–Ω ${domain} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Resend. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ resend_add_domain.`
            }
          ]
        };
      }

      return {
        content: [
          {
            type: 'text',
            text: `–î–æ–º–µ–Ω ${domain}:\n` +
                  `- –°—Ç–∞—Ç—É—Å: ${targetDomain.status}\n` +
                  `- ID: ${targetDomain.id}\n` +
                  `- –°–æ–∑–¥–∞–Ω: ${targetDomain.created_at}\n` +
                  `- –†–µ–≥–∏–æ–Ω: ${targetDomain.region || 'us-east-1'}`
          }
        ]
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–º–µ–Ω–∞: ${error.message}`
          }
        ]
      };
    }
  }

  async addDomain(domain, apiKey) {
    try {
      const result = await this.makeResendRequest('/domains', {
        method: 'POST',
        apiKey,
        body: {
          name: domain,
          region: 'us-east-1'
        }
      });

      return {
        content: [
          {
            type: 'text',
            text: `‚úÖ –î–æ–º–µ–Ω ${domain} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Resend!\n` +
                  `ID: ${result.id}\n` +
                  `–°—Ç–∞—Ç—É—Å: ${result.status}\n\n` +
                  `–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ resend_get_dns_records –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DNS –∑–∞–ø–∏—Å–µ–π.`
          }
        ]
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞: ${error.message}`
          }
        ]
      };
    }
  }

  async getDNSRecords(domain, apiKey) {
    try {
      const domains = await this.makeResendRequest('/domains', { apiKey });
      const targetDomain = domains.data?.find(d => d.name === domain);

      if (!targetDomain) {
        return {
          content: [
            {
              type: 'text',
              text: `–î–æ–º–µ–Ω ${domain} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ.`
            }
          ]
        };
      }

      const domainDetails = await this.makeResendRequest(`/domains/${targetDomain.id}`, { apiKey });
      
      let recordsText = `üîß DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞ ${domain}:\n\n`;
      
      if (domainDetails.records && domainDetails.records.length > 0) {
        domainDetails.records.forEach((record, index) => {
          recordsText += `${index + 1}. –¢–∏–ø: ${record.type}\n`;
          recordsText += `   –ò–º—è: ${record.name}\n`;
          recordsText += `   –ó–Ω–∞—á–µ–Ω–∏–µ: ${record.value}\n`;
          if (record.priority) {
            recordsText += `   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${record.priority}\n`;
          }
          recordsText += '\n';
        });
      } else {
        recordsText += 'DNS –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –¥–æ–º–µ–Ω —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.\n';
      }

      recordsText += `\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n`;
      recordsText += `1. –í–æ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DNS –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞\n`;
      recordsText += `2. –î–æ–±–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –∑–∞–ø–∏—Å–∏\n`;
      recordsText += `3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS (–¥–æ 24 —á–∞—Å–æ–≤)\n`;
      recordsText += `4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ resend_verify_domain –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`;

      return {
        content: [
          {
            type: 'text',
            text: recordsText
          }
        ]
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ DNS –∑–∞–ø–∏—Å–µ–π: ${error.message}`
          }
        ]
      };
    }
  }

  async verifyDomain(domain, apiKey) {
    try {
      const domains = await this.makeResendRequest('/domains', { apiKey });
      const targetDomain = domains.data?.find(d => d.name === domain);

      if (!targetDomain) {
        return {
          content: [
            {
              type: 'text',
              text: `–î–æ–º–µ–Ω ${domain} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
            }
          ]
        };
      }

      const result = await this.makeResendRequest(`/domains/${targetDomain.id}/verify`, {
        method: 'POST',
        apiKey
      });

      return {
        content: [
          {
            type: 'text',
            text: `üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ ${domain} –∑–∞–ø—É—â–µ–Ω–∞.\n` +
                  `–°—Ç–∞—Ç—É—Å: ${result.status || 'pending'}\n\n` +
                  `–ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 'verified' - –¥–æ–º–µ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n` +
                  `–ï—Å–ª–∏ 'pending' - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`
          }
        ]
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error.message}`
          }
        ]
      };
    }
  }

  async sendTestEmail(args) {
    try {
      const result = await this.makeResendRequest('/emails', {
        method: 'POST',
        apiKey: args.api_key,
        body: {
          from: args.from,
          to: args.to,
          subject: args.subject,
          html: '<h1>–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ</h1><p>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! Resend –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.</p>'
        }
      });

      return {
        content: [
          {
            type: 'text',
            text: `‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n` +
                  `ID –ø–∏—Å—å–º–∞: ${result.id}\n` +
                  `–û—Ç: ${args.from}\n` +
                  `–ö–æ–º—É: ${args.to}\n` +
                  `–¢–µ–º–∞: ${args.subject}`
          }
        ]
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞: ${error.message}`
          }
        ]
      };
    }
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
  const server = new ResendMCPServer();
  server.run().catch(console.error);
}

module.exports = ResendMCPServer;