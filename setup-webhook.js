// –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è Telegram –±–æ—Ç–∞
require('dotenv').config();

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_URL = `${process.env.NEXTAUTH_URL}/api/telegram/webhook`;

async function setupWebhook() {
  try {
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é webhook –¥–ª—è –±–æ—Ç–∞...');
    console.log(`üì° URL: ${WEBHOOK_URL}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: WEBHOOK_URL,
        secret_token: process.env.TELEGRAM_WEBHOOK_SECRET
      })
    });
    
    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
      const infoResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);
      const info = await infoResponse.json();
      
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', {
        url: info.result.url,
        has_custom_certificate: info.result.has_custom_certificate,
        pending_update_count: info.result.pending_update_count,
        last_error_date: info.result.last_error_date || '–ù–µ—Ç –æ—à–∏–±–æ–∫',
        max_connections: info.result.max_connections
      });
      
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', result);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

async function removeWebhook() {
  try {
    console.log('üóëÔ∏è –£–¥–∞–ª—è—é webhook...');
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`);
    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω!');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', result);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const action = process.argv[2];

if (action === 'remove') {
  removeWebhook();
} else {
  setupWebhook();
}

console.log('\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
console.log('node setup-webhook.js - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook');
console.log('node setup-webhook.js remove - —É–¥–∞–ª–∏—Ç—å webhook');