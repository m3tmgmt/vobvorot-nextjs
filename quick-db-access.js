// üöÄ –ë–´–°–¢–†–´–ô –î–û–°–¢–£–ü –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• –ë–ï–ó NEON CONSOLE
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node quick-db-access.js

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function showMenu() {
  console.log('\nüìä –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–û–ú VOBVOROT')
  console.log('================================')
  console.log('1. üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã')
  console.log('2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä')
  console.log('3. ‚úèÔ∏è  –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä')
  console.log('4. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
  console.log('5. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã')
  console.log('6. üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂')
  console.log('7. üè∑Ô∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏')
  console.log('8. ‚≠ê –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã')
  console.log('0. ‚ùå –í—ã—Ö–æ–¥')
  
  const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  })
  
  readline.question('\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', async (choice) => {
    switch(choice) {
      case '1':
        await showProducts()
        break
      case '2':
        await addProduct()
        break
      case '3':
        await editProduct()
        break
      case '4':
        await deleteProduct()
        break
      case '5':
        await showOrders()
        break
      case '6':
        await showStats()
        break
      case '7':
        await manageCategories()
        break
      case '8':
        await showReviews()
        break
      case '0':
        await prisma.$disconnect()
        process.exit(0)
      default:
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä')
    }
    readline.close()
    await showMenu()
  })
}

async function showProducts() {
  const products = await prisma.product.findMany({
    include: { category: true },
    orderBy: { createdAt: 'desc' }
  })
  
  console.log('\nüì¶ –¢–û–í–ê–†–´:')
  console.log('ID | –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –í –Ω–∞–ª–∏—á–∏–∏ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è')
  console.log('---|----------|------|-----------|----------')
  
  products.forEach(p => {
    console.log(`${p.id.substring(0,8)} | ${p.name.padEnd(20)} | $${(p.price/100).toFixed(2)} | ${p.inStock ? '‚úÖ' : '‚ùå'} | ${p.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`)
  })
  
  console.log(`\n–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`)
}

async function addProduct() {
  console.log('\n‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê')
  
  // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const newProduct = await prisma.product.create({
    data: {
      name: '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä ' + Date.now(),
      slug: 'new-product-' + Date.now(),
      price: 1000, // $10.00
      description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
      images: ['https://via.placeholder.com/300'],
      inStock: true,
      status: 'active'
    }
  })
  
  console.log('‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω:', newProduct.name)
}

async function showOrders() {
  const orders = await prisma.order.findMany({
    include: {
      user: true,
      orderItems: {
        include: { product: true }
      }
    },
    orderBy: { createdAt: 'desc' },
    take: 10
  })
  
  console.log('\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ö–ê–ó–´:')
  orders.forEach(order => {
    console.log(`\nüÜî –ó–∞–∫–∞–∑ #${order.orderNumber}`)
    console.log(`üë§ –ö–ª–∏–µ–Ω—Ç: ${order.user?.email || order.email}`)
    console.log(`üí∞ –°—É–º–º–∞: $${(order.total/100).toFixed(2)}`)
    console.log(`üìÖ –î–∞—Ç–∞: ${order.createdAt.toLocaleDateString()}`)
    console.log(`üì¶ –°—Ç–∞—Ç—É—Å: ${order.status}`)
    console.log('–¢–æ–≤–∞—Ä—ã:')
    order.orderItems.forEach(item => {
      console.log(`  - ${item.product.name} x${item.quantity} = $${(item.price/100).toFixed(2)}`)
    })
  })
}

async function showStats() {
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalProducts = await prisma.product.count()
  const totalOrders = await prisma.order.count()
  const totalRevenue = await prisma.order.aggregate({
    _sum: { total: true }
  })
  
  // –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
  const thirtyDaysAgo = new Date()
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)
  
  const recentOrders = await prisma.order.count({
    where: {
      createdAt: { gte: thirtyDaysAgo }
    }
  })
  
  const recentRevenue = await prisma.order.aggregate({
    where: {
      createdAt: { gte: thirtyDaysAgo }
    },
    _sum: { total: true }
  })
  
  console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–ì–ê–ó–ò–ù–ê:')
  console.log('=======================')
  console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`)
  console.log(`üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}`)
  console.log(`üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: $${((totalRevenue._sum.total || 0)/100).toFixed(2)}`)
  console.log('\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:')
  console.log(`üìã –ó–∞–∫–∞–∑–æ–≤: ${recentOrders}`)
  console.log(`üí∞ –î–æ—Ö–æ–¥: $${((recentRevenue._sum.total || 0)/100).toFixed(2)}`)
}

async function manageCategories() {
  const categories = await prisma.category.findMany({
    include: {
      _count: {
        select: { products: true }
      }
    }
  })
  
  console.log('\nüè∑Ô∏è  –ö–ê–¢–ï–ì–û–†–ò–ò:')
  console.log('ID | –ù–∞–∑–≤–∞–Ω–∏–µ | –¢–æ–≤–∞—Ä–æ–≤')
  console.log('---|----------|--------')
  
  categories.forEach(c => {
    console.log(`${c.id.substring(0,8)} | ${c.name.padEnd(20)} | ${c._count.products}`)
  })
}

async function showReviews() {
  const reviews = await prisma.review.findMany({
    include: {
      product: true,
      user: true
    },
    orderBy: { createdAt: 'desc' },
    take: 5
  })
  
  console.log('\n‚≠ê –ü–û–°–õ–ï–î–ù–ò–ï –û–¢–ó–´–í–´:')
  reviews.forEach(r => {
    console.log(`\n${'‚≠ê'.repeat(r.rating)} ${r.rating}/5`)
    console.log(`üì¶ ${r.product.name}`)
    console.log(`üë§ ${r.user?.name || '–ê–Ω–æ–Ω–∏–º'}`)
    console.log(`üí¨ ${r.comment}`)
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω: ${r.verified ? '–î–∞' : '–ù–µ—Ç'}`)
  })
}

async function editProduct() {
  console.log('‚úèÔ∏è  –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
  console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Neon Console –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
}

async function deleteProduct() {
  console.log('üóëÔ∏è  –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
  console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Neon Console –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
showMenu().catch(async (e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', e.message)
  await prisma.$disconnect()
  process.exit(1)
})