// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫ –≤ –ë–î
const { Client } = require('pg');

async function checkColumns() {
  const client = new Client({
    connectionString: "postgresql://postgres.rrxkyqsqeumfmhxbtcty:VobvorotSecure2025@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres?pgbouncer=true"
  });

  try {
    await client.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ categories
    console.log('üìÇ –ö–û–õ–û–ù–ö–ò –í –¢–ê–ë–õ–ò–¶–ï categories:');
    const catColumns = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'categories'
      ORDER BY ordinal_position
    `);
    
    catColumns.rows.forEach(row => {
      console.log(`- ${row.column_name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ emoji
    const hasEmoji = catColumns.rows.some(r => r.column_name === 'emoji');
    console.log(`\n‚úÖ –ü–æ–ª–µ emoji: ${hasEmoji ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ products  
    console.log('\nüì¶ –ö–û–õ–û–ù–ö–ò –í –¢–ê–ë–õ–ò–¶–ï products:');
    const prodColumns = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'products'
      ORDER BY ordinal_position
    `);
    
    prodColumns.rows.forEach(row => {
      console.log(`- ${row.column_name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ categoryId
    const hasCategoryId = prodColumns.rows.some(r => r.column_name === 'categoryId');
    console.log(`\n‚úÖ –ü–æ–ª–µ categoryId: ${hasCategoryId ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await client.end();
  }
}

checkColumns();