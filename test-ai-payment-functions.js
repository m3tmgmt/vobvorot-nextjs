// –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π AI –∞–≥–µ–Ω—Ç–∞
// Node.js 18+ –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch

const TEST_API_URL = 'https://vobvorot.com/api/telegram/ai-assistant'

async function testPaymentCommands() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π AI –∞–≥–µ–Ω—Ç–∞...\n')

  const testCases = [
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞',
      message: '–ø—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ 20250129-1234567',
      expected: 'check_payment_status'
    },
    {
      name: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ',
      message: '–ø–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ 20250129-1234567',
      expected: 'view_payment_info'
    },
    {
      name: '–í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞',
      message: '—Å–¥–µ–ª–∞–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ 20250129-1234567 –ø—Ä–∏—á–∏–Ω–∞ –±—Ä–∞–∫ —Ç–æ–≤–∞—Ä–∞',
      expected: 'refund_payment',
      needConfirm: true
    },
    {
      name: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞',
      message: '–ø–æ–≤—Ç–æ—Ä–∏ –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ 20250129-1234567',
      expected: 'retry_payment'
    },
    {
      name: '–ß–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç',
      message: '–≤–µ—Ä–Ω–∏ 500 —Ä—É–±–ª–µ–π –∑–∞ –∑–∞–∫–∞–∑ 20250129-1234567 –ø—Ä–∏—á–∏–Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ',
      expected: 'refund_payment',
      needConfirm: true
    }
  ]

  // –ò–º–∏—Ç–∞—Ü–∏—è Telegram webhook –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async function sendTelegramMessage(text) {
    const webhookPayload = {
      update_id: Math.floor(Math.random() * 1000000),
      message: {
        message_id: Math.floor(Math.random() * 1000000),
        from: {
          id: 316593422, // Admin ID
          is_bot: false,
          first_name: 'Test',
          username: 'testuser'
        },
        chat: {
          id: 316593422,
          first_name: 'Test',
          username: 'testuser',
          type: 'private'
        },
        date: Math.floor(Date.now() / 1000),
        text: text
      }
    }

    try {
      const response = await fetch(TEST_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(webhookPayload)
      })
      
      const result = await response.text()
      return { 
        status: response.status, 
        statusText: response.statusText,
        data: result 
      }
    } catch (error) {
      return { error: error.message }
    }
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
  for (const test of testCases) {
    console.log(`\nüìã –¢–µ—Å—Ç: ${test.name}`)
    console.log(`üìù –ö–æ–º–∞–Ω–¥–∞: "${test.message}"`)
    console.log(`‚úÖ –û–∂–∏–¥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${test.expected}`)
    if (test.needConfirm) {
      console.log(`‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`)
    }
    
    const result = await sendTelegramMessage(test.message)
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.status} ${result.statusText}`)
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000))
  }

  console.log('\n\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
  console.log('\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:')
  console.log('- HTTP 200 –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã')
  console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞')
  console.log('- –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testPaymentCommands().catch(console.error)