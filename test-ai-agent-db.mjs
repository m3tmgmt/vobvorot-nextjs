// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
import { config } from 'dotenv'
import { PrismaClient } from '@prisma/client'

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env.local —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é
config({ path: '.env.local', override: true })

console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –∞–≥–µ–Ω—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n')

console.log('üìç DATABASE_URL:', process.env.DATABASE_URL?.replace(/:[^@]+@/, ':****@'))
console.log('üîë GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

const prisma = new PrismaClient()

async function testAIAgent() {
  try {
    await prisma.$connect()
    console.log('\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ production –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±–∞–∑–∞
    const [activeProducts, orders, customers, categories] = await Promise.all([
      prisma.product.count({ where: { status: 'active' } }),
      prisma.order.count(),
      prisma.customer.count(),
      prisma.category.count()
    ])
    
    console.log('\nüìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PRODUCTION:')
    console.log(`- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${activeProducts}`)
    console.log(`- –ó–∞–∫–∞–∑–æ–≤: ${orders}`)
    console.log(`- –ö–ª–∏–µ–Ω—Ç–æ–≤: ${customers}`)
    console.log(`- –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    const sampleProduct = await prisma.product.findFirst({
      where: { status: 'active' },
      include: { category: true }
    })
    
    if (sampleProduct) {
      console.log(`\nüì¶ –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: ${sampleProduct.name} (${sampleProduct.price} ‚ÇΩ)`)
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${sampleProduct.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`)
    }
    
    console.log('\nüéØ AI –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å production –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
  } finally {
    await prisma.$disconnect()
  }
}

testAIAgent()