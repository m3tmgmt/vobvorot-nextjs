// –ü–†–û–í–ï–†–ö–ê –ë–î –ß–ï–†–ï–ó PRISMA
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function checkDB() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...')
    console.log('DATABASE_URL:', process.env.DATABASE_URL ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
    console.log('DIRECT_DATABASE_URL:', process.env.DIRECT_DATABASE_URL ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const test = await prisma.$queryRaw`SELECT 1 as test`
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    console.log('\nüì¶ –¢–û–í–ê–†–´:')
    const productCount = await prisma.product.count()
    console.log('–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:', productCount)
    
    if (productCount > 0) {
      const products = await prisma.product.findMany({
        take: 3,
        include: { category: true }
      })
      console.log('\n–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:')
      products.forEach(p => {
        console.log(`- ${p.name} ($${p.price/100}) - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${p.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`)
      })
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\nüè∑Ô∏è –ö–ê–¢–ï–ì–û–†–ò–ò:')
    const categories = await prisma.category.findMany()
    console.log('–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categories.length)
    categories.forEach(c => {
      console.log(`- ${c.name} (${c.slug})`)
    })
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
    const firstCategory = await prisma.category.findFirst()
    if (firstCategory) {
      console.log('–ü–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', Object.keys(firstCategory))
    }
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message)
    console.error('–î–µ—Ç–∞–ª–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkDB()