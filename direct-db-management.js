// üöÄ –ü–†–Ø–ú–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–î –ë–ï–ó NEON CONSOLE
// –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ä–∞–∑—É, –Ω–µ –Ω—É–∂–Ω—ã –ø–∞—Ä–æ–ª–∏ –æ—Ç Neon!

require('dotenv').config()
const { Client } = require('pg')

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∫ –≤–∞—à–µ–π –ë–î
const client = new Client({
  connectionString: process.env.DIRECT_DATABASE_URL || 
    "postgresql://vobvorot_owner:WUJUYkjHT68V@ep-lively-hat-a1aqblz3.ap-southeast-1.aws.neon.tech/vobvorot?sslmode=require"
})

async function main() {
  try {
    await client.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')
    
    while (true) {
      console.log('\nüõçÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–û–ú VOBVOROT')
      console.log('================================')
      console.log('1. üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã')
      console.log('2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')  
      console.log('3. ‚úèÔ∏è  –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
      console.log('4. üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã')
      console.log('5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
      console.log('6. üîç SQL –∑–∞–ø—Ä–æ—Å (–¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö)')
      console.log('0. ‚ùå –í—ã—Ö–æ–¥')
      
      const choice = await question('\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ')
      
      switch(choice) {
        case '1':
          await showProducts()
          break
        case '2':
          await addProduct()
          break
        case '3':
          await updatePrice()
          break
        case '4':
          await showOrders()
          break
        case '5':
          await showStats()
          break
        case '6':
          await runSQL()
          break
        case '0':
          await client.end()
          process.exit(0)
        default:
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä')
      }
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message)
    process.exit(1)
  }
}

async function showProducts() {
  const res = await client.query(`
    SELECT p.id, p.name, p.price, p.in_stock, p.quantity, c.name as category
    FROM products p
    LEFT JOIN categories c ON p.category_id = c.id
    WHERE p.status = 'active'
    ORDER BY p.created_at DESC
    LIMIT 20
  `)
  
  console.log('\nüì¶ –ê–ö–¢–ò–í–ù–´–ï –¢–û–í–ê–†–´:')
  console.table(res.rows.map(p => ({
    'ID': p.id.substring(0, 8),
    '–ù–∞–∑–≤–∞–Ω–∏–µ': p.name,
    '–¶–µ–Ω–∞': `$${(p.price/100).toFixed(2)}`,
    '–í –Ω–∞–ª–∏—á–∏–∏': p.in_stock ? '‚úÖ' : '‚ùå',
    '–ö–æ–ª-–≤–æ': p.quantity || 0,
    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': p.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
  })))
}

async function addProduct() {
  console.log('\n‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –¢–û–í–ê–†–ê')
  
  const name = await question('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ')
  const price = await question('–¶–µ–Ω–∞ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 10.50): ')
  const description = await question('–û–ø–∏—Å–∞–Ω–∏–µ: ')
  const quantity = await question('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: ')
  
  const slug = name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')
  const priceInCents = Math.round(parseFloat(price) * 100)
  
  try {
    const res = await client.query(`
      INSERT INTO products (name, slug, price, description, quantity, in_stock, status, images)
      VALUES ($1, $2, $3, $4, $5, true, 'active', $6)
      RETURNING id, name
    `, [name, slug, priceInCents, description, parseInt(quantity), ['https://via.placeholder.com/300']])
    
    console.log(`‚úÖ –¢–æ–≤–∞—Ä "${res.rows[0].name}" –¥–æ–±–∞–≤–ª–µ–Ω! ID: ${res.rows[0].id}`)
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', err.message)
  }
}

async function updatePrice() {
  await showProducts()
  
  const id = await question('\n–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ (8 —Å–∏–º–≤–æ–ª–æ–≤): ')
  const newPrice = await question('–ù–æ–≤–∞—è —Ü–µ–Ω–∞ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö): ')
  
  try {
    const priceInCents = Math.round(parseFloat(newPrice) * 100)
    const res = await client.query(
      'UPDATE products SET price = $1 WHERE id LIKE $2 RETURNING name',
      [priceInCents, id + '%']
    )
    
    if (res.rowCount > 0) {
      console.log(`‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ "${res.rows[0].name}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`)
    } else {
      console.log('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', err.message)
  }
}

async function showOrders() {
  const res = await client.query(`
    SELECT o.id, o.order_number, o.email, o.total, o.status, o.created_at
    FROM orders o
    ORDER BY o.created_at DESC
    LIMIT 10
  `)
  
  console.log('\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ö–ê–ó–´:')
  console.table(res.rows.map(o => ({
    '–ù–æ–º–µ—Ä': o.order_number,
    'Email': o.email,
    '–°—É–º–º–∞': `$${(o.total/100).toFixed(2)}`,
    '–°—Ç–∞—Ç—É—Å': o.status,
    '–î–∞—Ç–∞': new Date(o.created_at).toLocaleDateString()
  })))
}

async function showStats() {
  const stats = await client.query(`
    SELECT 
      (SELECT COUNT(*) FROM products WHERE status = 'active') as products,
      (SELECT COUNT(*) FROM orders) as orders,
      (SELECT COUNT(*) FROM orders WHERE created_at > NOW() - INTERVAL '30 days') as recent_orders,
      (SELECT COALESCE(SUM(total), 0) FROM orders) as total_revenue,
      (SELECT COALESCE(SUM(total), 0) FROM orders WHERE created_at > NOW() - INTERVAL '30 days') as recent_revenue
  `)
  
  const s = stats.rows[0]
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–ì–ê–ó–ò–ù–ê:')
  console.log('=======================')
  console.log(`üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${s.products}`)
  console.log(`üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${s.orders}`)
  console.log(`üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: $${(s.total_revenue/100).toFixed(2)}`)
  console.log('\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:')
  console.log(`üìã –ó–∞–∫–∞–∑–æ–≤: ${s.recent_orders}`)
  console.log(`üí∞ –î–æ—Ö–æ–¥: $${(s.recent_revenue/100).toFixed(2)}`)
}

async function runSQL() {
  console.log('\nüîç –í–í–ï–î–ò–¢–ï SQL –ó–ê–ü–†–û–°:')
  console.log('–ü—Ä–∏–º–µ—Ä—ã:')
  console.log('- SELECT * FROM products LIMIT 5')
  console.log('- UPDATE products SET in_stock = false WHERE quantity = 0')
  console.log('- SELECT COUNT(*) FROM orders WHERE status = \'pending\'')
  
  const sql = await question('\nSQL: ')
  
  try {
    const res = await client.query(sql)
    if (res.rows && res.rows.length > 0) {
      console.table(res.rows)
    } else {
      console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: ${res.rowCount}`)
    }
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', err.message)
  }
}

function question(prompt) {
  const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  })
  
  return new Promise(resolve => {
    readline.question(prompt, answer => {
      readline.close()
      resolve(answer)
    })
  })
}

// –ó–∞–ø—É—Å–∫
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º...')
main()