// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ Lv –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
require('dotenv').config();

async function setupProductionProduct() {
  const baseUrl = 'https://vobvorot-nextjs-h0m4yna15-m3tmgmt-gmailcoms-projects.vercel.app';
  const adminApiKey = process.env.ADMIN_API_KEY || 'admin_secret_key_2024';
  
  console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω–µ...');
  console.log(`URL: ${baseUrl}`);
  
  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é EXVICPMOUR
    console.log('\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ EXVICPMOUR...');
    const categoryResponse = await fetch(`${baseUrl}/api/admin/categories-db`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify({
        name: 'EXVICPMOUR',
        description: '–ö–æ–ª–ª–µ–∫—Ü–∏—è EXVICPMOUR'
      })
    });
    
    let categoryId;
    if (categoryResponse.ok) {
      const categoryData = await categoryResponse.json();
      categoryId = categoryData.category.id;
      console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${categoryId}`);
    } else {
      // –í–æ–∑–º–æ–∂–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å
      console.log('‚ùì –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å...');
      const getCategoriesResponse = await fetch(`${baseUrl}/api/admin/categories-db`, {
        headers: {
          'Authorization': `Bearer ${adminApiKey}`
        }
      });
      
      if (getCategoriesResponse.ok) {
        const categoriesData = await getCategoriesResponse.json();
        const exvicpmourCategory = categoriesData.categories?.find(cat => cat.name === 'EXVICPMOUR');
        if (exvicpmourCategory) {
          categoryId = exvicpmourCategory.id;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryId}`);
        } else {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é EXVICPMOUR');
          console.log(await categoryResponse.text());
          return;
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        console.log(await getCategoriesResponse.text());
        return;
      }
    }
    
    // 2. –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º —Ç–æ–≤–∞—Ä Lv
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ Lv...');
    const productData = {
      name: 'Lv',
      description: 'Supa dupa',
      brand: 'EXVICPMOUR',
      categoryId: categoryId,
      price: 1.00,
      stock: 5,
      weight: 0.5
    };
    
    const productResponse = await fetch(`${baseUrl}/api/admin/products-db`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${adminApiKey}`
      },
      body: JSON.stringify(productData)
    });
    
    if (productResponse.ok) {
      const productResult = await productResponse.json();
      console.log('‚úÖ –¢–æ–≤–∞—Ä Lv —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log(`   ID: ${productResult.product.id}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${productResult.product.name}`);
      console.log(`   Slug: ${productResult.product.slug}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
      console.log(`–°—Ç–∞—Ç—É—Å: ${productResponse.status}`);
      console.log(await productResponse.text());
      return;
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ç–æ–≤–∞—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π API...');
    const checkResponse = await fetch(`${baseUrl}/api/products`);
    if (checkResponse.ok) {
      const checkData = await checkResponse.json();
      console.log(`‚úÖ API —Ç–æ–≤–∞—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${checkData.products?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      const lvProduct = checkData.products?.find(p => p.name === 'Lv');
      if (lvProduct) {
        console.log('‚úÖ –¢–æ–≤–∞—Ä "Lv" –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API!');
        console.log(`   –¶–µ–Ω–∞: $${lvProduct.skus?.[0]?.price || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`   –°–∫–ª–∞–¥: ${lvProduct.skus?.[0]?.stock || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —à—Ç.`);
      } else {
        console.log('‚ùå –¢–æ–≤–∞—Ä "Lv" –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API');
      }
    } else {
      console.log('‚ùå –û—Å–Ω–æ–≤–Ω–æ–π API —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(await checkResponse.text());
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

setupProductionProduct();