const { PrismaClient } = require('@prisma/client');

async function testSQLite() {
  const prisma = new PrismaClient();

  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    const productCount = await prisma.product.count();
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${productCount}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.product.findMany({
      include: {
        category: true,
        skus: true
      },
      take: 10
    });
    
    console.log('\nüìã –¢–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    products.forEach(product => {
      console.log(`- ${product.name} (${product.slug})`);
      console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category?.name || '–ù–µ—Ç'}`);
      console.log(`  SKU: ${product.skus?.length || 0} —à—Ç.`);
      if (product.skus && product.skus.length > 0) {
        const sku = product.skus[0];
        console.log(`  –¶–µ–Ω–∞: $${sku.price}`);
        console.log(`  –°–∫–ª–∞–¥: ${sku.stock} —à—Ç.`);
      }
      console.log('');
    });
    
    // –ò—â–µ–º —Ç–æ–≤–∞—Ä Lv
    const lvProduct = await prisma.product.findFirst({
      where: { name: 'Lv' },
      include: {
        category: true,
        skus: true
      }
    });
    
    if (lvProduct) {
      console.log('‚úÖ –¢–æ–≤–∞—Ä "Lv" –Ω–∞–π–¥–µ–Ω –≤ SQLite!');
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${lvProduct.category?.name}`);
      console.log(`   SKU: ${lvProduct.skus?.length || 0} —à—Ç.`);
      if (lvProduct.skus && lvProduct.skus.length > 0) {
        console.log(`   –¶–µ–Ω–∞: $${lvProduct.skus[0].price}`);
        console.log(`   –°–∫–ª–∞–¥: ${lvProduct.skus[0].stock} —à—Ç.`);
      }
    } else {
      console.log('‚ùå –¢–æ–≤–∞—Ä "Lv" –ù–ï –Ω–∞–π–¥–µ–Ω –≤ SQLite');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testSQLite();