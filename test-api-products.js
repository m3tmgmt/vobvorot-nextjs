const { default: fetch } = require('node-fetch');

async function testProducts() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ç–æ–≤–∞—Ä–æ–≤...');
    const response = await fetch('http://localhost:3000/api/products');
    const data = await response.json();
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:');
    console.log('- –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('- –£—Å–ø–µ—Ö:', data.success);
    console.log('- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:', data.products?.length || 0);
    
    if (data.products && data.products.length > 0) {
      console.log('\nüì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:');
      data.products.forEach((product, index) => {
        console.log(`${index + 1}. ${product.name} (${product.slug})`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category?.name || '–ù–µ—Ç'}`);
        console.log(`   SKU: ${product.skus?.length || 0} —à—Ç.`);
        console.log(`   –¶–µ–Ω–∞: $${product.skus?.[0]?.price || 'N/A'}`);
        console.log(`   –°–∫–ª–∞–¥: ${product.skus?.[0]?.stock || 0} —à—Ç.`);
        console.log('');
      });
    } else {
      console.log('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è mock –¥–∞–Ω–Ω—ã–µ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testProducts();