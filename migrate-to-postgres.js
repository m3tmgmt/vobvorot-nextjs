const { PrismaClient } = require('@prisma/client');
const sqlite3 = require('sqlite3').verbose();

// PostgreSQL –∫–ª–∏–µ–Ω—Ç
const prisma = new PrismaClient();

// SQLite –∫–ª–∏–µ–Ω—Ç
const sqliteDb = new sqlite3.Database('./prisma/dev.db');

async function migrateData() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL...');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ SQLite
    const categories = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM categories', [], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const cat of categories) {
      try {
        await prisma.category.upsert({
          where: { slug: cat.slug },
          update: {
            name: cat.name,
            description: cat.description
          },
          create: {
            name: cat.name,
            slug: cat.slug,
            description: cat.description,
            isActive: true,
            sortOrder: 0
          }
        });
        console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${cat.name} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${cat.name}:`, error.message);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ SQLite
    const products = await new Promise((resolve, reject) => {
      sqliteDb.all(`
        SELECT p.*, c.slug as categorySlug 
        FROM products p 
        LEFT JOIN categories c ON p.categoryId = c.id
      `, [], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
    for (const prod of products) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ PostgreSQL
        const category = await prisma.category.findUnique({
          where: { slug: prod.categorySlug }
        });

        if (!category) {
          console.error(`‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${prod.categorySlug} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${prod.name}`);
          continue;
        }

        const migratedProduct = await prisma.product.upsert({
          where: { slug: prod.slug },
          update: {
            name: prod.name,
            description: prod.description,
            brand: prod.brand,
            categoryId: category.id
          },
          create: {
            name: prod.name,
            slug: prod.slug,
            description: prod.description,
            brand: prod.brand,
            categoryId: category.id,
            isActive: true
          }
        });

        console.log(`‚úÖ –¢–æ–≤–∞—Ä ${prod.name} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);

        // –ú–∏–≥—Ä–∏—Ä—É–µ–º SKU –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        const skus = await new Promise((resolve, reject) => {
          sqliteDb.all('SELECT * FROM product_skus WHERE productId = ?', [prod.id], (err, rows) => {
            if (err) reject(err);
            else resolve(rows);
          });
        });

        for (const sku of skus) {
          try {
            await prisma.productSku.upsert({
              where: { sku: sku.sku },
              update: {
                price: parseFloat(sku.price),
                stock: sku.stock,
                size: sku.size,
                color: sku.color
              },
              create: {
                sku: sku.sku,
                price: parseFloat(sku.price),
                stock: sku.stock,
                size: sku.size,
                color: sku.color,
                productId: migratedProduct.id,
                isActive: true
              }
            });
            console.log(`  ‚úÖ SKU ${sku.sku} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
          } catch (error) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ SKU ${sku.sku}:`, error.message);
          }
        }

        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        const images = await new Promise((resolve, reject) => {
          sqliteDb.all('SELECT * FROM product_images WHERE productId = ?', [prod.id], (err, rows) => {
            if (err) reject(err);
            else resolve(rows);
          });
        });

        for (const img of images) {
          try {
            await prisma.productImage.create({
              data: {
                url: img.url,
                alt: img.alt,
                isPrimary: img.isPrimary === 1,
                productId: migratedProduct.id
              }
            });
            console.log(`  ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${img.url} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ`);
          } catch (error) {
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if (!error.message.includes('Unique constraint')) {
              console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, error.message);
            }
          }
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${prod.name}:`, error.message);
      }
    }

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalProducts = await prisma.product.count();
    const totalCategories = await prisma.category.count();
    const totalSkus = await prisma.productSku.count();

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:`);
    console.log(`- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${totalCategories}`);
    console.log(`- –¢–æ–≤–∞—Ä—ã: ${totalProducts}`);
    console.log(`- SKU: ${totalSkus}`);

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
    sqliteDb.close();
  }
}

migrateData();