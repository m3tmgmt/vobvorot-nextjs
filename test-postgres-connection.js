const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function testConnection() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', result);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    const productCount = await prisma.product.count();
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${productCount}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const products = await prisma.product.findMany({
      include: {
        category: true,
        skus: true
      },
      take: 10
    });
    
    console.log('\nüìã –¢–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    products.forEach(product => {
      console.log(`- ${product.name} (${product.slug})`);
      console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category?.name || '–ù–µ—Ç'}`);
      console.log(`  SKU: ${product.skus?.length || 0} —à—Ç.`);
      if (product.skus && product.skus.length > 0) {
        const sku = product.skus[0];
        console.log(`  –¶–µ–Ω–∞: $${sku.price}`);
        console.log(`  –°–∫–ª–∞–¥: ${sku.stock} —à—Ç.`);
      }
      console.log('');
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä Lv
    const lvProduct = await prisma.product.findFirst({
      where: { name: 'Lv' },
      include: {
        category: true,
        skus: true
      }
    });
    
    if (lvProduct) {
      console.log('‚úÖ –¢–æ–≤–∞—Ä "Lv" –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${lvProduct.category?.name}`);
      console.log(`   SKU: ${lvProduct.skus?.length || 0} —à—Ç.`);
    } else {
      console.log('‚ùå –¢–æ–≤–∞—Ä "Lv" –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testConnection();