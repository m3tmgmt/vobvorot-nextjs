// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã Prisma —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
require('dotenv').config();
const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function compareSchema() {
  console.log('üîç –°–†–ê–í–ù–ï–ù–ò–ï –°–•–ï–ú–´ PRISMA –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•\n');
  
  try {
    // 1. –ß–∏—Ç–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ schema.prisma
    const schemaContent = fs.readFileSync('./prisma/schema.prisma', 'utf8');
    const modelMatches = schemaContent.match(/model\s+(\w+)\s*{/g);
    const prismaModels = modelMatches.map(m => {
      const modelName = m.match(/model\s+(\w+)/)[1];
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ snake_case –¥–ª—è —Ç–∞–±–ª–∏—Ü
      return modelName.replace(/([A-Z])/g, '_$1').toLowerCase().replace(/^_/, '') + 's';
    });
    
    // –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
    const specialCases = {
      'users': 'users', // —É–∂–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ
      'categorys': 'categories', // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ
      'addresss': 'addresses',
      'order_logs': 'order_logs', // —É–∂–µ snake_case
      'product_skus': 'product_skus',
      'product_images': 'product_images',
      'stock_reservations': 'stock_reservations',
      'order_items': 'order_items',
      'user_addresss': 'user_addresses',
      'wishlist_items': 'wishlist_items',
      'sign_orders': 'sign_orders',
      'future_letters': 'future_letters',
      'verification_tokens': 'verification_tokens'
    };
    
    const expectedTables = prismaModels.map(t => specialCases[t] || t);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ë–î
    const dbTables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `;
    
    const actualTables = dbTables.map(t => t.table_name);
    
    // 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    console.log('üìã –û–ñ–ò–î–ê–ï–ú–´–ï –¢–ê–ë–õ–ò–¶–´ (–∏–∑ schema.prisma):');
    console.log(expectedTables.sort().join(', '));
    console.log(`–í—Å–µ–≥–æ: ${expectedTables.length}\n`);
    
    console.log('üìä –†–ï–ê–õ–¨–ù–´–ï –¢–ê–ë–õ–ò–¶–´ (–≤ Supabase):');
    console.log(actualTables.join(', '));
    console.log(`–í—Å–µ–≥–æ: ${actualTables.length}\n`);
    
    // 4. –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è
    const missingInDb = expectedTables.filter(t => !actualTables.includes(t));
    const extraInDb = actualTables.filter(t => !expectedTables.includes(t));
    
    if (missingInDb.length > 0) {
      console.log('‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –í –ë–î:');
      console.log(missingInDb.join(', '));
    }
    
    if (extraInDb.length > 0) {
      console.log('\n‚ö†Ô∏è  –õ–ò–®–ù–ò–ï –í –ë–î:');
      console.log(extraInDb.join(', '));
    }
    
    if (missingInDb.length === 0 && extraInDb.length === 0) {
      console.log('‚úÖ –í–°–ï –¢–ê–ë–õ–ò–¶–´ –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ –°–•–ï–ú–ï!');
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    console.log('\nüîë –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–û–õ–ï–ô:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ emoji –≤ categories
    const emojiCheck = await prisma.$queryRaw`
      SELECT COUNT(*) as count 
      FROM information_schema.columns 
      WHERE table_name = 'categories' AND column_name = 'emoji'
    `;
    console.log(`- categories.emoji: ${emojiCheck[0].count > 0 ? '‚úÖ –ï–°–¢–¨' : '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ products
    const productFields = ['name', 'slug', 'description', 'categoryId', 'isActive'];
    for (const field of productFields) {
      const check = await prisma.$queryRaw`
        SELECT COUNT(*) as count 
        FROM information_schema.columns 
        WHERE table_name = 'products' AND column_name = ${field}
      `;
      console.log(`- products.${field}: ${check[0].count > 0 ? '‚úÖ' : '‚ùå'}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ product_skus
    const skuFields = ['sku', 'price', 'stock', 'productId'];
    for (const field of skuFields) {
      const check = await prisma.$queryRaw`
        SELECT COUNT(*) as count 
        FROM information_schema.columns 
        WHERE table_name = 'product_skus' AND column_name = ${field}
      `;
      console.log(`- product_skus.${field}: ${check[0].count > 0 ? '‚úÖ' : '‚ùå'}`);
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

compareSchema();