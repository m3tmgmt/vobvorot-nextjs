// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Railway URL
require('dotenv').config();
const pg = require('pg');

// URL –∏–∑ DIRECT_DATABASE_URL
const connectionString = process.env.DIRECT_DATABASE_URL;
console.log('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫:', connectionString ? '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞' : 'URL –Ω–µ –Ω–∞–π–¥–µ–Ω');

const client = new pg.Client({
  connectionString: connectionString
});

async function checkDatabase() {
  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    const productsResult = await client.query('SELECT COUNT(*) FROM products');
    console.log('\nüì¶ –¢–û–í–ê–†–´:');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', productsResult.rows[0].count);
    
    // –°–º–æ—Ç—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    const products = await client.query('SELECT id, name, slug, "categoryId", price FROM products LIMIT 10');
    if (products.rows.length > 0) {
      console.log('\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:');
      products.rows.forEach(p => {
        console.log(`- ${p.name} (${p.slug}) - ${p.price} —Ä—É–±`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoriesResult = await client.query('SELECT * FROM categories');
    console.log('\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–ò:');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', categoriesResult.rows.length);
    categoriesResult.rows.forEach(c => {
      console.log(`- ${c.name} (${c.slug})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ emoji
    const columnsResult = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'categories' 
      AND column_name = 'emoji'
    `);
    console.log('\n‚ùì –ü–æ–ª–µ emoji:', columnsResult.rows.length > 0 ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await client.end();
  }
}

checkDatabase();