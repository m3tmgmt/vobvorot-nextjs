// –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
require('dotenv').config();
const { PrismaClient } = require('@prisma/client');
const sqlite3 = require('sqlite3').verbose();

console.log('üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê SUPABASE (vobvorot-store)\n');

async function migrateToSupabase() {
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const sqliteDb = new sqlite3.Database('./prisma/dev.db');
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Supabase (–∏—Å–ø–æ–ª—å–∑—É–µ–º .env)
  const supabase = new PrismaClient();
  
  try {
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    await supabase.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Supabase!\n');
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
    console.log('2Ô∏è‚É£ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...');
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM categories', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
    
    // –¢–æ–≤–∞—Ä—ã
    const products = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM products', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    
    // SKU
    const skus = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM product_skus', (err, rows) => {
        if (err) reject(err);
        else resolve(rows || []);
      });
    });
    console.log(`–ù–∞–π–¥–µ–Ω–æ SKU: ${skus.length}\n`);
    
    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    console.log('3Ô∏è‚É£ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase...\n');
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const cat of categories) {
      await supabase.category.upsert({
        where: { slug: cat.slug },
        update: {
          name: cat.name,
          description: cat.description,
          emoji: cat.emoji || 'üì¶'
        },
        create: {
          id: cat.id,
          name: cat.name,
          slug: cat.slug,
          description: cat.description,
          emoji: cat.emoji || 'üì¶'
        }
      });
      console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat.name}`);
    }
    
    console.log('');
    
    // –¢–æ–≤–∞—Ä—ã
    for (const prod of products) {
      const created = await supabase.product.upsert({
        where: { slug: prod.slug },
        update: {
          name: prod.name,
          description: prod.description,
          brand: prod.brand,
          categoryId: prod.categoryId,
          isActive: prod.isActive === 1
        },
        create: {
          id: prod.id,
          name: prod.name,
          slug: prod.slug,
          description: prod.description,
          brand: prod.brand,
          categoryId: prod.categoryId,
          isActive: prod.isActive === 1,
          createdAt: new Date(prod.createdAt),
          updatedAt: new Date(prod.updatedAt)
        }
      });
      console.log(`‚úÖ –¢–æ–≤–∞—Ä: ${prod.name}`);
      
      // SKU –¥–ª—è —Ç–æ–≤–∞—Ä–∞
      const productSkus = skus.filter(s => s.productId === prod.id);
      for (const sku of productSkus) {
        await supabase.productSku.create({
          data: {
            id: sku.id,
            sku: sku.sku,
            size: sku.size,
            price: parseFloat(sku.price),
            compareAtPrice: sku.compareAtPrice ? parseFloat(sku.compareAtPrice) : null,
            stock: parseInt(sku.stock),
            productId: created.id
          }
        });
        console.log(`  ‚úÖ –†–∞–∑–º–µ—Ä ${sku.size}: ${sku.price} —Ä—É–±`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const totalProducts = await supabase.product.count();
    const totalCategories = await supabase.category.count();
    const totalSkus = await supabase.productSku.count();
    
    console.log(`\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!`);
    console.log(`–¢–æ–≤–∞—Ä–æ–≤ –≤ Supabase: ${totalProducts}`);
    console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ Supabase: ${totalCategories}`);
    console.log(`SKU –≤ Supabase: ${totalSkus}`);
    
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Connection String –∏–∑ Supabase Dashboard');
    console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ');
    console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ Vercel');
    console.log('4. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ: npx vercel --prod --token yGHkW9HSoepeo4Q8ZnSBEKwn');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
  } finally {
    sqliteDb.close();
    await supabase.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateToSupabase();