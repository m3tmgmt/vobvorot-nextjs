// –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ SQLite –≤ PostgreSQL
require('dotenv').config();
const { PrismaClient } = require('@prisma/client');
const sqlite3 = require('sqlite3').verbose();

// –ö–ª–∏–µ–Ω—Ç –¥–ª—è PostgreSQL (–ø—Ä–æ–¥–∞–∫—à–Ω)
const prisma = new PrismaClient();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
const sqliteDb = new sqlite3.Database('./prisma/dev.db');

async function transferProducts() {
  console.log('üöÄ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ SQLite –≤ PostgreSQL...\n');
  
  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º –ø–æ–ª–µ emoji –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    console.log('1Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ emoji –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    try {
      await prisma.$executeRaw`ALTER TABLE categories ADD COLUMN IF NOT EXISTS emoji VARCHAR(10) DEFAULT 'üì¶'`;
      console.log('‚úÖ –ü–æ–ª–µ emoji –¥–æ–±–∞–≤–ª–µ–Ω–æ\n');
    } catch (error) {
      console.log('‚ö†Ô∏è  –ü–æ–ª–µ emoji —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.message, '\n');
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
    console.log('2Ô∏è‚É£ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM categories', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    const products = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM products', (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    
    // –ü–æ–ª—É—á–∞–µ–º SKU
    const skus = await new Promise((resolve, reject) => {
      sqliteDb.all('SELECT * FROM product_skus', (err, rows) => {
        if (err) reject(err);
        else resolve(rows || []);
      });
    });
    console.log(`–ù–∞–π–¥–µ–Ω–æ SKU: ${skus.length}\n`);
    
    // 3. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('3Ô∏è‚É£ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    for (const category of categories) {
      try {
        await prisma.category.upsert({
          where: { slug: category.slug },
          update: {
            name: category.name,
            description: category.description,
            emoji: category.emoji || 'üì¶'
          },
          create: {
            id: category.id,
            name: category.name,
            slug: category.slug,
            description: category.description,
            emoji: category.emoji || 'üì¶'
          }
        });
        console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.name} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π ${category.name}:`, error.message);
      }
    }
    
    // 4. –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã
    console.log('\n4Ô∏è‚É£ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã...');
    for (const product of products) {
      try {
        const createdProduct = await prisma.product.upsert({
          where: { slug: product.slug },
          update: {
            name: product.name,
            description: product.description,
            brand: product.brand,
            categoryId: product.categoryId,
            isActive: product.isActive === 1
          },
          create: {
            id: product.id,
            name: product.name,
            slug: product.slug,
            description: product.description,
            brand: product.brand,
            categoryId: product.categoryId,
            isActive: product.isActive === 1,
            createdAt: new Date(product.createdAt),
            updatedAt: new Date(product.updatedAt)
          }
        });
        console.log(`‚úÖ –¢–æ–≤–∞—Ä "${product.name}" –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω`);
        
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º SKU –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        const productSkus = skus.filter(sku => sku.productId === product.id);
        for (const sku of productSkus) {
          try {
            await prisma.productSku.create({
              data: {
                id: sku.id,
                sku: sku.sku,
                size: sku.size,
                price: parseFloat(sku.price),
                compareAtPrice: sku.compareAtPrice ? parseFloat(sku.compareAtPrice) : null,
                stock: parseInt(sku.stock),
                productId: createdProduct.id
              }
            });
            console.log(`  ‚úÖ SKU —Ä–∞–∑–º–µ—Ä ${sku.size} - ${sku.price} —Ä—É–±`);
          } catch (error) {
            console.log(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å SKU:`, error.message);
          }
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å —Ç–æ–≤–∞—Ä–æ–º ${product.name}:`, error.message);
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const totalProducts = await prisma.product.count();
    const totalCategories = await prisma.category.count();
    const totalSkus = await prisma.productSku.count();
    
    console.log(`\n‚úÖ –ì–û–¢–û–í–û!`);
    console.log(`–¢–æ–≤–∞—Ä–æ–≤ –≤ PostgreSQL: ${totalProducts}`);
    console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ PostgreSQL: ${totalCategories}`);
    console.log(`SKU –≤ PostgreSQL: ${totalSkus}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    sqliteDb.close();
    await prisma.$disconnect();
  }
}

transferProducts();